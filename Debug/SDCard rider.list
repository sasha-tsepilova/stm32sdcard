
SDCard rider.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c088  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000460  0800c228  0800c228  0001c228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c688  0800c688  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c688  0800c688  0001c688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c690  0800c690  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c690  0800c690  0001c690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c694  0800c694  0001c694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  0800c698  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000db4  200000a8  0800c740  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e5c  0800c740  00020e5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024d46  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c4e  00000000  00000000  00044e1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001530  00000000  00000000  00049a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001380  00000000  00000000  0004afa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b96d  00000000  00000000  0004c320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f936  00000000  00000000  00067c8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009101e  00000000  00000000  000875c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001185e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005acc  00000000  00000000  00118634  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a8 	.word	0x200000a8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c210 	.word	0x0800c210

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000ac 	.word	0x200000ac
 80001dc:	0800c210 	.word	0x0800c210

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <MX_GPIO_Init>:
     PC7   ------> I2S3_MCK
     PC10   ------> I2S3_CK
     PC12   ------> I2S3_SD
*/
void MX_GPIO_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b08c      	sub	sp, #48	; 0x30
 800058c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058e:	f107 031c 	add.w	r3, r7, #28
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
 800059a:	60da      	str	r2, [r3, #12]
 800059c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800059e:	2300      	movs	r3, #0
 80005a0:	61bb      	str	r3, [r7, #24]
 80005a2:	4b8c      	ldr	r3, [pc, #560]	; (80007d4 <MX_GPIO_Init+0x24c>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	4a8b      	ldr	r2, [pc, #556]	; (80007d4 <MX_GPIO_Init+0x24c>)
 80005a8:	f043 0310 	orr.w	r3, r3, #16
 80005ac:	6313      	str	r3, [r2, #48]	; 0x30
 80005ae:	4b89      	ldr	r3, [pc, #548]	; (80007d4 <MX_GPIO_Init+0x24c>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	f003 0310 	and.w	r3, r3, #16
 80005b6:	61bb      	str	r3, [r7, #24]
 80005b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ba:	2300      	movs	r3, #0
 80005bc:	617b      	str	r3, [r7, #20]
 80005be:	4b85      	ldr	r3, [pc, #532]	; (80007d4 <MX_GPIO_Init+0x24c>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	4a84      	ldr	r2, [pc, #528]	; (80007d4 <MX_GPIO_Init+0x24c>)
 80005c4:	f043 0304 	orr.w	r3, r3, #4
 80005c8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ca:	4b82      	ldr	r3, [pc, #520]	; (80007d4 <MX_GPIO_Init+0x24c>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	f003 0304 	and.w	r3, r3, #4
 80005d2:	617b      	str	r3, [r7, #20]
 80005d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	613b      	str	r3, [r7, #16]
 80005da:	4b7e      	ldr	r3, [pc, #504]	; (80007d4 <MX_GPIO_Init+0x24c>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	4a7d      	ldr	r2, [pc, #500]	; (80007d4 <MX_GPIO_Init+0x24c>)
 80005e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005e4:	6313      	str	r3, [r2, #48]	; 0x30
 80005e6:	4b7b      	ldr	r3, [pc, #492]	; (80007d4 <MX_GPIO_Init+0x24c>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ee:	613b      	str	r3, [r7, #16]
 80005f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f2:	2300      	movs	r3, #0
 80005f4:	60fb      	str	r3, [r7, #12]
 80005f6:	4b77      	ldr	r3, [pc, #476]	; (80007d4 <MX_GPIO_Init+0x24c>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	4a76      	ldr	r2, [pc, #472]	; (80007d4 <MX_GPIO_Init+0x24c>)
 80005fc:	f043 0301 	orr.w	r3, r3, #1
 8000600:	6313      	str	r3, [r2, #48]	; 0x30
 8000602:	4b74      	ldr	r3, [pc, #464]	; (80007d4 <MX_GPIO_Init+0x24c>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	f003 0301 	and.w	r3, r3, #1
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	4b70      	ldr	r3, [pc, #448]	; (80007d4 <MX_GPIO_Init+0x24c>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	4a6f      	ldr	r2, [pc, #444]	; (80007d4 <MX_GPIO_Init+0x24c>)
 8000618:	f043 0302 	orr.w	r3, r3, #2
 800061c:	6313      	str	r3, [r2, #48]	; 0x30
 800061e:	4b6d      	ldr	r3, [pc, #436]	; (80007d4 <MX_GPIO_Init+0x24c>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	f003 0302 	and.w	r3, r3, #2
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800062a:	2300      	movs	r3, #0
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	4b69      	ldr	r3, [pc, #420]	; (80007d4 <MX_GPIO_Init+0x24c>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	4a68      	ldr	r2, [pc, #416]	; (80007d4 <MX_GPIO_Init+0x24c>)
 8000634:	f043 0308 	orr.w	r3, r3, #8
 8000638:	6313      	str	r3, [r2, #48]	; 0x30
 800063a:	4b66      	ldr	r3, [pc, #408]	; (80007d4 <MX_GPIO_Init+0x24c>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	f003 0308 	and.w	r3, r3, #8
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	2108      	movs	r1, #8
 800064a:	4863      	ldr	r0, [pc, #396]	; (80007d8 <MX_GPIO_Init+0x250>)
 800064c:	f001 f924 	bl	8001898 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000650:	2201      	movs	r2, #1
 8000652:	2101      	movs	r1, #1
 8000654:	4861      	ldr	r0, [pc, #388]	; (80007dc <MX_GPIO_Init+0x254>)
 8000656:	f001 f91f 	bl	8001898 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800065a:	2200      	movs	r2, #0
 800065c:	2102      	movs	r1, #2
 800065e:	4860      	ldr	r0, [pc, #384]	; (80007e0 <MX_GPIO_Init+0x258>)
 8000660:	f001 f91a 	bl	8001898 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000664:	2200      	movs	r2, #0
 8000666:	f24f 0110 	movw	r1, #61456	; 0xf010
 800066a:	485e      	ldr	r0, [pc, #376]	; (80007e4 <MX_GPIO_Init+0x25c>)
 800066c:	f001 f914 	bl	8001898 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000670:	2304      	movs	r3, #4
 8000672:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000674:	2300      	movs	r3, #0
 8000676:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000678:	2300      	movs	r3, #0
 800067a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4619      	mov	r1, r3
 8000682:	4855      	ldr	r0, [pc, #340]	; (80007d8 <MX_GPIO_Init+0x250>)
 8000684:	f000 fe6c 	bl	8001360 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000688:	2308      	movs	r3, #8
 800068a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068c:	2301      	movs	r3, #1
 800068e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000690:	2300      	movs	r3, #0
 8000692:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000694:	2300      	movs	r3, #0
 8000696:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000698:	f107 031c 	add.w	r3, r7, #28
 800069c:	4619      	mov	r1, r3
 800069e:	484e      	ldr	r0, [pc, #312]	; (80007d8 <MX_GPIO_Init+0x250>)
 80006a0:	f000 fe5e 	bl	8001360 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 80006a4:	2332      	movs	r3, #50	; 0x32
 80006a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006a8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80006ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006b2:	f107 031c 	add.w	r3, r7, #28
 80006b6:	4619      	mov	r1, r3
 80006b8:	4847      	ldr	r0, [pc, #284]	; (80007d8 <MX_GPIO_Init+0x250>)
 80006ba:	f000 fe51 	bl	8001360 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80006be:	2301      	movs	r3, #1
 80006c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c2:	2301      	movs	r3, #1
 80006c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ca:	2300      	movs	r3, #0
 80006cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80006ce:	f107 031c 	add.w	r3, r7, #28
 80006d2:	4619      	mov	r1, r3
 80006d4:	4841      	ldr	r0, [pc, #260]	; (80007dc <MX_GPIO_Init+0x254>)
 80006d6:	f000 fe43 	bl	8001360 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80006da:	2308      	movs	r3, #8
 80006dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006de:	2302      	movs	r3, #2
 80006e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e6:	2300      	movs	r3, #0
 80006e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80006ea:	2305      	movs	r3, #5
 80006ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80006ee:	f107 031c 	add.w	r3, r7, #28
 80006f2:	4619      	mov	r1, r3
 80006f4:	4839      	ldr	r0, [pc, #228]	; (80007dc <MX_GPIO_Init+0x254>)
 80006f6:	f000 fe33 	bl	8001360 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006fa:	2301      	movs	r3, #1
 80006fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006fe:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000702:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	2300      	movs	r3, #0
 8000706:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000708:	f107 031c 	add.w	r3, r7, #28
 800070c:	4619      	mov	r1, r3
 800070e:	4836      	ldr	r0, [pc, #216]	; (80007e8 <MX_GPIO_Init+0x260>)
 8000710:	f000 fe26 	bl	8001360 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000714:	2310      	movs	r3, #16
 8000716:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000718:	2302      	movs	r3, #2
 800071a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000720:	2300      	movs	r3, #0
 8000722:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000724:	2306      	movs	r3, #6
 8000726:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000728:	f107 031c 	add.w	r3, r7, #28
 800072c:	4619      	mov	r1, r3
 800072e:	482e      	ldr	r0, [pc, #184]	; (80007e8 <MX_GPIO_Init+0x260>)
 8000730:	f000 fe16 	bl	8001360 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000734:	2302      	movs	r3, #2
 8000736:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000738:	2301      	movs	r3, #1
 800073a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000740:	2300      	movs	r3, #0
 8000742:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000744:	f107 031c 	add.w	r3, r7, #28
 8000748:	4619      	mov	r1, r3
 800074a:	4825      	ldr	r0, [pc, #148]	; (80007e0 <MX_GPIO_Init+0x258>)
 800074c:	f000 fe08 	bl	8001360 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000750:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000754:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000756:	2302      	movs	r3, #2
 8000758:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	2300      	movs	r3, #0
 800075c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075e:	2300      	movs	r3, #0
 8000760:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000762:	2305      	movs	r3, #5
 8000764:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000766:	f107 031c 	add.w	r3, r7, #28
 800076a:	4619      	mov	r1, r3
 800076c:	481c      	ldr	r0, [pc, #112]	; (80007e0 <MX_GPIO_Init+0x258>)
 800076e:	f000 fdf7 	bl	8001360 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000772:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000776:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000778:	2301      	movs	r3, #1
 800077a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000780:	2300      	movs	r3, #0
 8000782:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000784:	f107 031c 	add.w	r3, r7, #28
 8000788:	4619      	mov	r1, r3
 800078a:	4816      	ldr	r0, [pc, #88]	; (80007e4 <MX_GPIO_Init+0x25c>)
 800078c:	f000 fde8 	bl	8001360 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000790:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000794:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000796:	2302      	movs	r3, #2
 8000798:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079e:	2300      	movs	r3, #0
 80007a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80007a2:	2306      	movs	r3, #6
 80007a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007a6:	f107 031c 	add.w	r3, r7, #28
 80007aa:	4619      	mov	r1, r3
 80007ac:	480b      	ldr	r0, [pc, #44]	; (80007dc <MX_GPIO_Init+0x254>)
 80007ae:	f000 fdd7 	bl	8001360 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80007b2:	2320      	movs	r3, #32
 80007b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b6:	2300      	movs	r3, #0
 80007b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007be:	f107 031c 	add.w	r3, r7, #28
 80007c2:	4619      	mov	r1, r3
 80007c4:	4807      	ldr	r0, [pc, #28]	; (80007e4 <MX_GPIO_Init+0x25c>)
 80007c6:	f000 fdcb 	bl	8001360 <HAL_GPIO_Init>

}
 80007ca:	bf00      	nop
 80007cc:	3730      	adds	r7, #48	; 0x30
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40023800 	.word	0x40023800
 80007d8:	40021000 	.word	0x40021000
 80007dc:	40020800 	.word	0x40020800
 80007e0:	40020400 	.word	0x40020400
 80007e4:	40020c00 	.word	0x40020c00
 80007e8:	40020000 	.word	0x40020000

080007ec <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007f0:	4b12      	ldr	r3, [pc, #72]	; (800083c <MX_I2C1_Init+0x50>)
 80007f2:	4a13      	ldr	r2, [pc, #76]	; (8000840 <MX_I2C1_Init+0x54>)
 80007f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007f6:	4b11      	ldr	r3, [pc, #68]	; (800083c <MX_I2C1_Init+0x50>)
 80007f8:	4a12      	ldr	r2, [pc, #72]	; (8000844 <MX_I2C1_Init+0x58>)
 80007fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007fc:	4b0f      	ldr	r3, [pc, #60]	; (800083c <MX_I2C1_Init+0x50>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000802:	4b0e      	ldr	r3, [pc, #56]	; (800083c <MX_I2C1_Init+0x50>)
 8000804:	2200      	movs	r2, #0
 8000806:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000808:	4b0c      	ldr	r3, [pc, #48]	; (800083c <MX_I2C1_Init+0x50>)
 800080a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800080e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000810:	4b0a      	ldr	r3, [pc, #40]	; (800083c <MX_I2C1_Init+0x50>)
 8000812:	2200      	movs	r2, #0
 8000814:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000816:	4b09      	ldr	r3, [pc, #36]	; (800083c <MX_I2C1_Init+0x50>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800081c:	4b07      	ldr	r3, [pc, #28]	; (800083c <MX_I2C1_Init+0x50>)
 800081e:	2200      	movs	r2, #0
 8000820:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000822:	4b06      	ldr	r3, [pc, #24]	; (800083c <MX_I2C1_Init+0x50>)
 8000824:	2200      	movs	r2, #0
 8000826:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000828:	4804      	ldr	r0, [pc, #16]	; (800083c <MX_I2C1_Init+0x50>)
 800082a:	f002 fe0b 	bl	8003444 <HAL_I2C_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000834:	f000 f9f0 	bl	8000c18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}
 800083c:	2000020c 	.word	0x2000020c
 8000840:	40005400 	.word	0x40005400
 8000844:	000186a0 	.word	0x000186a0

08000848 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08a      	sub	sp, #40	; 0x28
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000850:	f107 0314 	add.w	r3, r7, #20
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a19      	ldr	r2, [pc, #100]	; (80008cc <HAL_I2C_MspInit+0x84>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d12c      	bne.n	80008c4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	613b      	str	r3, [r7, #16]
 800086e:	4b18      	ldr	r3, [pc, #96]	; (80008d0 <HAL_I2C_MspInit+0x88>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a17      	ldr	r2, [pc, #92]	; (80008d0 <HAL_I2C_MspInit+0x88>)
 8000874:	f043 0302 	orr.w	r3, r3, #2
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <HAL_I2C_MspInit+0x88>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0302 	and.w	r3, r3, #2
 8000882:	613b      	str	r3, [r7, #16]
 8000884:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000886:	f44f 7310 	mov.w	r3, #576	; 0x240
 800088a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800088c:	2312      	movs	r3, #18
 800088e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000890:	2301      	movs	r3, #1
 8000892:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000894:	2300      	movs	r3, #0
 8000896:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000898:	2304      	movs	r3, #4
 800089a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	4619      	mov	r1, r3
 80008a2:	480c      	ldr	r0, [pc, #48]	; (80008d4 <HAL_I2C_MspInit+0x8c>)
 80008a4:	f000 fd5c 	bl	8001360 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008a8:	2300      	movs	r3, #0
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <HAL_I2C_MspInit+0x88>)
 80008ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b0:	4a07      	ldr	r2, [pc, #28]	; (80008d0 <HAL_I2C_MspInit+0x88>)
 80008b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008b6:	6413      	str	r3, [r2, #64]	; 0x40
 80008b8:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <HAL_I2C_MspInit+0x88>)
 80008ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80008c4:	bf00      	nop
 80008c6:	3728      	adds	r7, #40	; 0x28
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40005400 	.word	0x40005400
 80008d0:	40023800 	.word	0x40023800
 80008d4:	40020400 	.word	0x40020400

080008d8 <myprintf>:
void myprintf(const char *fmt, ...);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void myprintf(const char *fmt, ...) {
 80008d8:	b40f      	push	{r0, r1, r2, r3}
 80008da:	b580      	push	{r7, lr}
 80008dc:	b082      	sub	sp, #8
 80008de:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	693a      	ldr	r2, [r7, #16]
 80008ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008ee:	480b      	ldr	r0, [pc, #44]	; (800091c <myprintf+0x44>)
 80008f0:	f00b f92c 	bl	800bb4c <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 80008f4:	4809      	ldr	r0, [pc, #36]	; (800091c <myprintf+0x44>)
 80008f6:	f7ff fc73 	bl	80001e0 <strlen>
 80008fa:	4603      	mov	r3, r0
 80008fc:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	b29a      	uxth	r2, r3
 8000902:	f04f 33ff 	mov.w	r3, #4294967295
 8000906:	4905      	ldr	r1, [pc, #20]	; (800091c <myprintf+0x44>)
 8000908:	4805      	ldr	r0, [pc, #20]	; (8000920 <myprintf+0x48>)
 800090a:	f004 f9fd 	bl	8004d08 <HAL_UART_Transmit>

}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000918:	b004      	add	sp, #16
 800091a:	4770      	bx	lr
 800091c:	200000c4 	.word	0x200000c4
 8000920:	200002b8 	.word	0x200002b8

08000924 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000924:	b5b0      	push	{r4, r5, r7, lr}
 8000926:	f5ad 6d94 	sub.w	sp, sp, #1184	; 0x4a0
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800092c:	f000 fb42 	bl	8000fb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000930:	f000 f90a 	bl	8000b48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000934:	f7ff fe28 	bl	8000588 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000938:	f7ff ff58 	bl	80007ec <MX_I2C1_Init>
  MX_SPI1_Init();
 800093c:	f000 f97c 	bl	8000c38 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000940:	f00a fcd4 	bl	800b2ec <MX_USB_HOST_Init>
  MX_FATFS_Init();
 8000944:	f005 fca2 	bl	800628c <MX_FATFS_Init>
  MX_USART2_UART_Init();
 8000948:	f000 fa98 	bl	8000e7c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

    myprintf("\r\n~ SD card demo by kiwih ~\r\n\r\n");
 800094c:	486e      	ldr	r0, [pc, #440]	; (8000b08 <main+0x1e4>)
 800094e:	f7ff ffc3 	bl	80008d8 <myprintf>

    HAL_Delay(1000); //a short delay is important to let the SD card settle
 8000952:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000956:	f000 fb9f 	bl	8001098 <HAL_Delay>
    FATFS FatFs; 	//Fatfs handle
    FIL fil; 		//File handle
    FRESULT fres; //Result after operations

    //Open the file system
    fres = f_mount(&FatFs, "", 1); //1=mount now
 800095a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800095e:	2201      	movs	r2, #1
 8000960:	496a      	ldr	r1, [pc, #424]	; (8000b0c <main+0x1e8>)
 8000962:	4618      	mov	r0, r3
 8000964:	f009 fe14 	bl	800a590 <f_mount>
 8000968:	4603      	mov	r3, r0
 800096a:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
    if (fres != FR_OK) {
 800096e:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000972:	2b00      	cmp	r3, #0
 8000974:	d006      	beq.n	8000984 <main+0x60>
  	myprintf("f_mount error (%i)\r\n", fres);
 8000976:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 800097a:	4619      	mov	r1, r3
 800097c:	4864      	ldr	r0, [pc, #400]	; (8000b10 <main+0x1ec>)
 800097e:	f7ff ffab 	bl	80008d8 <myprintf>
  	while(1);
 8000982:	e7fe      	b.n	8000982 <main+0x5e>
    //Let's get some statistics from the SD card
    DWORD free_clusters, free_sectors, total_sectors;

    FATFS* getFreeFs;

    fres = f_getfree("", &free_clusters, &getFreeFs);
 8000984:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000988:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800098c:	4619      	mov	r1, r3
 800098e:	485f      	ldr	r0, [pc, #380]	; (8000b0c <main+0x1e8>)
 8000990:	f00a fb5e 	bl	800b050 <f_getfree>
 8000994:	4603      	mov	r3, r0
 8000996:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
    if (fres != FR_OK) {
 800099a:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d006      	beq.n	80009b0 <main+0x8c>
  	myprintf("f_getfree error (%i)\r\n", fres);
 80009a2:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 80009a6:	4619      	mov	r1, r3
 80009a8:	485a      	ldr	r0, [pc, #360]	; (8000b14 <main+0x1f0>)
 80009aa:	f7ff ff95 	bl	80008d8 <myprintf>
  	while(1);
 80009ae:	e7fe      	b.n	80009ae <main+0x8a>
    }

    //Formula comes from ChaN's documentation
    total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 80009b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	695b      	ldr	r3, [r3, #20]
 80009b8:	3b02      	subs	r3, #2
 80009ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80009be:	6812      	ldr	r2, [r2, #0]
 80009c0:	8952      	ldrh	r2, [r2, #10]
 80009c2:	fb02 f303 	mul.w	r3, r2, r3
 80009c6:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
    free_sectors = free_clusters * getFreeFs->csize;
 80009ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	895b      	ldrh	r3, [r3, #10]
 80009d2:	461a      	mov	r2, r3
 80009d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	fb03 f302 	mul.w	r3, r3, r2
 80009de:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494

    myprintf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 80009e2:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 80009e6:	0859      	lsrs	r1, r3, #1
 80009e8:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 80009ec:	085b      	lsrs	r3, r3, #1
 80009ee:	461a      	mov	r2, r3
 80009f0:	4849      	ldr	r0, [pc, #292]	; (8000b18 <main+0x1f4>)
 80009f2:	f7ff ff71 	bl	80008d8 <myprintf>

    //Now let's try to open file "test.txt"
    fres = f_open(&fil, "test.txt", FA_READ);
 80009f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009fa:	2201      	movs	r2, #1
 80009fc:	4947      	ldr	r1, [pc, #284]	; (8000b1c <main+0x1f8>)
 80009fe:	4618      	mov	r0, r3
 8000a00:	f009 fe0c 	bl	800a61c <f_open>
 8000a04:	4603      	mov	r3, r0
 8000a06:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
    if (fres != FR_OK) {
 8000a0a:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d003      	beq.n	8000a1a <main+0xf6>
  	myprintf("f_open error (%i)\r\n");
 8000a12:	4843      	ldr	r0, [pc, #268]	; (8000b20 <main+0x1fc>)
 8000a14:	f7ff ff60 	bl	80008d8 <myprintf>
  	while(1);
 8000a18:	e7fe      	b.n	8000a18 <main+0xf4>
    }
    myprintf("I was able to open 'test.txt' for reading!\r\n");
 8000a1a:	4842      	ldr	r0, [pc, #264]	; (8000b24 <main+0x200>)
 8000a1c:	f7ff ff5c 	bl	80008d8 <myprintf>
    //Read 30 bytes from "test.txt" on the SD card
    BYTE readBuf[30];

    //We can either use f_read OR f_gets to get data out of files
    //f_gets is a wrapper on f_read that does some string formatting for us
    TCHAR* rres = f_gets((TCHAR*)readBuf, 30, &fil);
 8000a20:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000a24:	f107 0308 	add.w	r3, r7, #8
 8000a28:	211e      	movs	r1, #30
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f00a fbc5 	bl	800b1ba <f_gets>
 8000a30:	f8c7 0490 	str.w	r0, [r7, #1168]	; 0x490
    if(rres != 0) {
 8000a34:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d006      	beq.n	8000a4a <main+0x126>
  	myprintf("Read string from 'test.txt' contents: %s\r\n", readBuf);
 8000a3c:	f107 0308 	add.w	r3, r7, #8
 8000a40:	4619      	mov	r1, r3
 8000a42:	4839      	ldr	r0, [pc, #228]	; (8000b28 <main+0x204>)
 8000a44:	f7ff ff48 	bl	80008d8 <myprintf>
 8000a48:	e005      	b.n	8000a56 <main+0x132>
    } else {
  	myprintf("f_gets error (%i)\r\n", fres);
 8000a4a:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4836      	ldr	r0, [pc, #216]	; (8000b2c <main+0x208>)
 8000a52:	f7ff ff41 	bl	80008d8 <myprintf>
    }

    //Be a tidy kiwi - don't forget to close your file!
    f_close(&fil);
 8000a56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f00a face 	bl	800affc <f_close>

    //Now let's try and write a file "write.txt"
    fres = f_open(&fil, "write.txt", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8000a60:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a64:	221a      	movs	r2, #26
 8000a66:	4932      	ldr	r1, [pc, #200]	; (8000b30 <main+0x20c>)
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f009 fdd7 	bl	800a61c <f_open>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
    if(fres == FR_OK) {
 8000a74:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d103      	bne.n	8000a84 <main+0x160>
  	myprintf("I was able to open 'write.txt' for writing\r\n");
 8000a7c:	482d      	ldr	r0, [pc, #180]	; (8000b34 <main+0x210>)
 8000a7e:	f7ff ff2b 	bl	80008d8 <myprintf>
 8000a82:	e005      	b.n	8000a90 <main+0x16c>
    } else {
  	myprintf("f_open error (%i)\r\n", fres);
 8000a84:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4825      	ldr	r0, [pc, #148]	; (8000b20 <main+0x1fc>)
 8000a8c:	f7ff ff24 	bl	80008d8 <myprintf>
    }

    //Copy in a string
    strncpy((char*)readBuf, "a new file is made!", 19);
 8000a90:	f107 0308 	add.w	r3, r7, #8
 8000a94:	4a28      	ldr	r2, [pc, #160]	; (8000b38 <main+0x214>)
 8000a96:	461c      	mov	r4, r3
 8000a98:	4615      	mov	r5, r2
 8000a9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a9e:	682b      	ldr	r3, [r5, #0]
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	8022      	strh	r2, [r4, #0]
 8000aa4:	3402      	adds	r4, #2
 8000aa6:	0c1b      	lsrs	r3, r3, #16
 8000aa8:	7023      	strb	r3, [r4, #0]
    UINT bytesWrote;
    fres = f_write(&fil, readBuf, 19, &bytesWrote);
 8000aaa:	1d3b      	adds	r3, r7, #4
 8000aac:	f107 0108 	add.w	r1, r7, #8
 8000ab0:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000ab4:	2213      	movs	r2, #19
 8000ab6:	f00a f8ae 	bl	800ac16 <f_write>
 8000aba:	4603      	mov	r3, r0
 8000abc:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
    if(fres == FR_OK) {
 8000ac0:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d106      	bne.n	8000ad6 <main+0x1b2>
  	myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 8000ac8:	1d3b      	adds	r3, r7, #4
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4619      	mov	r1, r3
 8000ace:	481b      	ldr	r0, [pc, #108]	; (8000b3c <main+0x218>)
 8000ad0:	f7ff ff02 	bl	80008d8 <myprintf>
 8000ad4:	e002      	b.n	8000adc <main+0x1b8>
    } else {
  	myprintf("f_write error (%i)\r\n");
 8000ad6:	481a      	ldr	r0, [pc, #104]	; (8000b40 <main+0x21c>)
 8000ad8:	f7ff fefe 	bl	80008d8 <myprintf>
    }

    //Be a tidy kiwi - don't forget to close your file!
    f_close(&fil);
 8000adc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f00a fa8b 	bl	800affc <f_close>

    //We're done, so de-mount the drive
    f_mount(NULL, "", 0);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	4908      	ldr	r1, [pc, #32]	; (8000b0c <main+0x1e8>)
 8000aea:	2000      	movs	r0, #0
 8000aec:	f009 fd50 	bl	800a590 <f_mount>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
    {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000af0:	f00a fc22 	bl	800b338 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
        //Blink the LED every second
  	  HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
 8000af4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000af8:	4812      	ldr	r0, [pc, #72]	; (8000b44 <main+0x220>)
 8000afa:	f000 feff 	bl	80018fc <HAL_GPIO_TogglePin>
  	  HAL_Delay(1000);
 8000afe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b02:	f000 fac9 	bl	8001098 <HAL_Delay>
    MX_USB_HOST_Process();
 8000b06:	e7f3      	b.n	8000af0 <main+0x1cc>
 8000b08:	0800c228 	.word	0x0800c228
 8000b0c:	0800c248 	.word	0x0800c248
 8000b10:	0800c24c 	.word	0x0800c24c
 8000b14:	0800c264 	.word	0x0800c264
 8000b18:	0800c27c 	.word	0x0800c27c
 8000b1c:	0800c2c4 	.word	0x0800c2c4
 8000b20:	0800c2d0 	.word	0x0800c2d0
 8000b24:	0800c2e4 	.word	0x0800c2e4
 8000b28:	0800c314 	.word	0x0800c314
 8000b2c:	0800c340 	.word	0x0800c340
 8000b30:	0800c354 	.word	0x0800c354
 8000b34:	0800c360 	.word	0x0800c360
 8000b38:	0800c390 	.word	0x0800c390
 8000b3c:	0800c3a4 	.word	0x0800c3a4
 8000b40:	0800c3c8 	.word	0x0800c3c8
 8000b44:	40020c00 	.word	0x40020c00

08000b48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b094      	sub	sp, #80	; 0x50
 8000b4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b4e:	f107 0320 	add.w	r3, r7, #32
 8000b52:	2230      	movs	r2, #48	; 0x30
 8000b54:	2100      	movs	r1, #0
 8000b56:	4618      	mov	r0, r3
 8000b58:	f00a ff0a 	bl	800b970 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b5c:	f107 030c 	add.w	r3, r7, #12
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	60bb      	str	r3, [r7, #8]
 8000b70:	4b27      	ldr	r3, [pc, #156]	; (8000c10 <SystemClock_Config+0xc8>)
 8000b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b74:	4a26      	ldr	r2, [pc, #152]	; (8000c10 <SystemClock_Config+0xc8>)
 8000b76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b7c:	4b24      	ldr	r3, [pc, #144]	; (8000c10 <SystemClock_Config+0xc8>)
 8000b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b84:	60bb      	str	r3, [r7, #8]
 8000b86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b88:	2300      	movs	r3, #0
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	4b21      	ldr	r3, [pc, #132]	; (8000c14 <SystemClock_Config+0xcc>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a20      	ldr	r2, [pc, #128]	; (8000c14 <SystemClock_Config+0xcc>)
 8000b92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b96:	6013      	str	r3, [r2, #0]
 8000b98:	4b1e      	ldr	r3, [pc, #120]	; (8000c14 <SystemClock_Config+0xcc>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ba0:	607b      	str	r3, [r7, #4]
 8000ba2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ba8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bb2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000bb8:	2304      	movs	r3, #4
 8000bba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000bbc:	23c0      	movs	r3, #192	; 0xc0
 8000bbe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000bc0:	2304      	movs	r3, #4
 8000bc2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000bc4:	2308      	movs	r3, #8
 8000bc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc8:	f107 0320 	add.w	r3, r7, #32
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f002 fe05 	bl	80037dc <HAL_RCC_OscConfig>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000bd8:	f000 f81e 	bl	8000c18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bdc:	230f      	movs	r3, #15
 8000bde:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000be0:	2302      	movs	r3, #2
 8000be2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000be4:	2300      	movs	r3, #0
 8000be6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000be8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000bf2:	f107 030c 	add.w	r3, r7, #12
 8000bf6:	2103      	movs	r1, #3
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f003 f917 	bl	8003e2c <HAL_RCC_ClockConfig>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000c04:	f000 f808 	bl	8000c18 <Error_Handler>
  }
}
 8000c08:	bf00      	nop
 8000c0a:	3750      	adds	r7, #80	; 0x50
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	40023800 	.word	0x40023800
 8000c14:	40007000 	.word	0x40007000

08000c18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c1c:	b672      	cpsid	i
}
 8000c1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <Error_Handler+0x8>

08000c22 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000c22:	b480      	push	{r7}
 8000c24:	b083      	sub	sp, #12
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6078      	str	r0, [r7, #4]
 8000c2a:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000c2c:	bf00      	nop
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000c3c:	4b17      	ldr	r3, [pc, #92]	; (8000c9c <MX_SPI1_Init+0x64>)
 8000c3e:	4a18      	ldr	r2, [pc, #96]	; (8000ca0 <MX_SPI1_Init+0x68>)
 8000c40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c42:	4b16      	ldr	r3, [pc, #88]	; (8000c9c <MX_SPI1_Init+0x64>)
 8000c44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c4a:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <MX_SPI1_Init+0x64>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c50:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <MX_SPI1_Init+0x64>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c56:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <MX_SPI1_Init+0x64>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c5c:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <MX_SPI1_Init+0x64>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c62:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <MX_SPI1_Init+0x64>)
 8000c64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c68:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <MX_SPI1_Init+0x64>)
 8000c6c:	2230      	movs	r2, #48	; 0x30
 8000c6e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c70:	4b0a      	ldr	r3, [pc, #40]	; (8000c9c <MX_SPI1_Init+0x64>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c76:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <MX_SPI1_Init+0x64>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c7c:	4b07      	ldr	r3, [pc, #28]	; (8000c9c <MX_SPI1_Init+0x64>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c82:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <MX_SPI1_Init+0x64>)
 8000c84:	220a      	movs	r2, #10
 8000c86:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c88:	4804      	ldr	r0, [pc, #16]	; (8000c9c <MX_SPI1_Init+0x64>)
 8000c8a:	f003 fb73 	bl	8004374 <HAL_SPI_Init>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c94:	f7ff ffc0 	bl	8000c18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20000260 	.word	0x20000260
 8000ca0:	40013000 	.word	0x40013000

08000ca4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08a      	sub	sp, #40	; 0x28
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cac:	f107 0314 	add.w	r3, r7, #20
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a19      	ldr	r2, [pc, #100]	; (8000d28 <HAL_SPI_MspInit+0x84>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d12b      	bne.n	8000d1e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	613b      	str	r3, [r7, #16]
 8000cca:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <HAL_SPI_MspInit+0x88>)
 8000ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cce:	4a17      	ldr	r2, [pc, #92]	; (8000d2c <HAL_SPI_MspInit+0x88>)
 8000cd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cd4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cd6:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <HAL_SPI_MspInit+0x88>)
 8000cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cde:	613b      	str	r3, [r7, #16]
 8000ce0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <HAL_SPI_MspInit+0x88>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	4a10      	ldr	r2, [pc, #64]	; (8000d2c <HAL_SPI_MspInit+0x88>)
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <HAL_SPI_MspInit+0x88>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000cfe:	23e0      	movs	r3, #224	; 0xe0
 8000d00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d02:	2302      	movs	r3, #2
 8000d04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d06:	2302      	movs	r3, #2
 8000d08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d0e:	2305      	movs	r3, #5
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d12:	f107 0314 	add.w	r3, r7, #20
 8000d16:	4619      	mov	r1, r3
 8000d18:	4805      	ldr	r0, [pc, #20]	; (8000d30 <HAL_SPI_MspInit+0x8c>)
 8000d1a:	f000 fb21 	bl	8001360 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000d1e:	bf00      	nop
 8000d20:	3728      	adds	r7, #40	; 0x28
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40013000 	.word	0x40013000
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40020000 	.word	0x40020000

08000d34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	607b      	str	r3, [r7, #4]
 8000d3e:	4b10      	ldr	r3, [pc, #64]	; (8000d80 <HAL_MspInit+0x4c>)
 8000d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d42:	4a0f      	ldr	r2, [pc, #60]	; (8000d80 <HAL_MspInit+0x4c>)
 8000d44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d48:	6453      	str	r3, [r2, #68]	; 0x44
 8000d4a:	4b0d      	ldr	r3, [pc, #52]	; (8000d80 <HAL_MspInit+0x4c>)
 8000d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	603b      	str	r3, [r7, #0]
 8000d5a:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <HAL_MspInit+0x4c>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5e:	4a08      	ldr	r2, [pc, #32]	; (8000d80 <HAL_MspInit+0x4c>)
 8000d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d64:	6413      	str	r3, [r2, #64]	; 0x40
 8000d66:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <HAL_MspInit+0x4c>)
 8000d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d6e:	603b      	str	r3, [r7, #0]
 8000d70:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d72:	2007      	movs	r0, #7
 8000d74:	f000 fa84 	bl	8001280 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d78:	bf00      	nop
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40023800 	.word	0x40023800

08000d84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <NMI_Handler+0x4>

08000d8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d8e:	e7fe      	b.n	8000d8e <HardFault_Handler+0x4>

08000d90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <MemManage_Handler+0x4>

08000d96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d9a:	e7fe      	b.n	8000d9a <BusFault_Handler+0x4>

08000d9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <UsageFault_Handler+0x4>

08000da2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr

08000dbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dd0:	f000 f942 	bl	8001058 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000ddc:	4802      	ldr	r0, [pc, #8]	; (8000de8 <OTG_FS_IRQHandler+0x10>)
 8000dde:	f001 f82b 	bl	8001e38 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20000b48 	.word	0x20000b48

08000dec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000df4:	4a14      	ldr	r2, [pc, #80]	; (8000e48 <_sbrk+0x5c>)
 8000df6:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <_sbrk+0x60>)
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e00:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <_sbrk+0x64>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d102      	bne.n	8000e0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e08:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <_sbrk+0x64>)
 8000e0a:	4a12      	ldr	r2, [pc, #72]	; (8000e54 <_sbrk+0x68>)
 8000e0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e0e:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <_sbrk+0x64>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4413      	add	r3, r2
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d207      	bcs.n	8000e2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e1c:	f00a fd6e 	bl	800b8fc <__errno>
 8000e20:	4603      	mov	r3, r0
 8000e22:	220c      	movs	r2, #12
 8000e24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e26:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2a:	e009      	b.n	8000e40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e2c:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <_sbrk+0x64>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e32:	4b07      	ldr	r3, [pc, #28]	; (8000e50 <_sbrk+0x64>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4413      	add	r3, r2
 8000e3a:	4a05      	ldr	r2, [pc, #20]	; (8000e50 <_sbrk+0x64>)
 8000e3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3718      	adds	r7, #24
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20020000 	.word	0x20020000
 8000e4c:	00000400 	.word	0x00000400
 8000e50:	200001c4 	.word	0x200001c4
 8000e54:	20000e60 	.word	0x20000e60

08000e58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e5c:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <SystemInit+0x20>)
 8000e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e62:	4a05      	ldr	r2, [pc, #20]	; (8000e78 <SystemInit+0x20>)
 8000e64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e80:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <MX_USART2_UART_Init+0x4c>)
 8000e82:	4a12      	ldr	r2, [pc, #72]	; (8000ecc <MX_USART2_UART_Init+0x50>)
 8000e84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e86:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <MX_USART2_UART_Init+0x4c>)
 8000e88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <MX_USART2_UART_Init+0x4c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e94:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <MX_USART2_UART_Init+0x4c>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <MX_USART2_UART_Init+0x4c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ea0:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <MX_USART2_UART_Init+0x4c>)
 8000ea2:	220c      	movs	r2, #12
 8000ea4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ea6:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <MX_USART2_UART_Init+0x4c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <MX_USART2_UART_Init+0x4c>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000eb2:	4805      	ldr	r0, [pc, #20]	; (8000ec8 <MX_USART2_UART_Init+0x4c>)
 8000eb4:	f003 fe72 	bl	8004b9c <HAL_UART_Init>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ebe:	f7ff feab 	bl	8000c18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	200002b8 	.word	0x200002b8
 8000ecc:	40004400 	.word	0x40004400

08000ed0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08a      	sub	sp, #40	; 0x28
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a19      	ldr	r2, [pc, #100]	; (8000f54 <HAL_UART_MspInit+0x84>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d12b      	bne.n	8000f4a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
 8000ef6:	4b18      	ldr	r3, [pc, #96]	; (8000f58 <HAL_UART_MspInit+0x88>)
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efa:	4a17      	ldr	r2, [pc, #92]	; (8000f58 <HAL_UART_MspInit+0x88>)
 8000efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f00:	6413      	str	r3, [r2, #64]	; 0x40
 8000f02:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <HAL_UART_MspInit+0x88>)
 8000f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f0a:	613b      	str	r3, [r7, #16]
 8000f0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <HAL_UART_MspInit+0x88>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	4a10      	ldr	r2, [pc, #64]	; (8000f58 <HAL_UART_MspInit+0x88>)
 8000f18:	f043 0301 	orr.w	r3, r3, #1
 8000f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1e:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <HAL_UART_MspInit+0x88>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f2a:	230c      	movs	r3, #12
 8000f2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f36:	2303      	movs	r3, #3
 8000f38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f3a:	2307      	movs	r3, #7
 8000f3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3e:	f107 0314 	add.w	r3, r7, #20
 8000f42:	4619      	mov	r1, r3
 8000f44:	4805      	ldr	r0, [pc, #20]	; (8000f5c <HAL_UART_MspInit+0x8c>)
 8000f46:	f000 fa0b 	bl	8001360 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f4a:	bf00      	nop
 8000f4c:	3728      	adds	r7, #40	; 0x28
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40004400 	.word	0x40004400
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	40020000 	.word	0x40020000

08000f60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f64:	480d      	ldr	r0, [pc, #52]	; (8000f9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f66:	490e      	ldr	r1, [pc, #56]	; (8000fa0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f68:	4a0e      	ldr	r2, [pc, #56]	; (8000fa4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f6c:	e002      	b.n	8000f74 <LoopCopyDataInit>

08000f6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f72:	3304      	adds	r3, #4

08000f74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f78:	d3f9      	bcc.n	8000f6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f7a:	4a0b      	ldr	r2, [pc, #44]	; (8000fa8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f7c:	4c0b      	ldr	r4, [pc, #44]	; (8000fac <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f80:	e001      	b.n	8000f86 <LoopFillZerobss>

08000f82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f84:	3204      	adds	r2, #4

08000f86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f88:	d3fb      	bcc.n	8000f82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f8a:	f7ff ff65 	bl	8000e58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f8e:	f00a fcbb 	bl	800b908 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f92:	f7ff fcc7 	bl	8000924 <main>
  bx  lr    
 8000f96:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa0:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8000fa4:	0800c698 	.word	0x0800c698
  ldr r2, =_sbss
 8000fa8:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8000fac:	20000e5c 	.word	0x20000e5c

08000fb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fb0:	e7fe      	b.n	8000fb0 <ADC_IRQHandler>
	...

08000fb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fb8:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <HAL_Init+0x40>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a0d      	ldr	r2, [pc, #52]	; (8000ff4 <HAL_Init+0x40>)
 8000fbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fc4:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <HAL_Init+0x40>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a0a      	ldr	r2, [pc, #40]	; (8000ff4 <HAL_Init+0x40>)
 8000fca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fd0:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <HAL_Init+0x40>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a07      	ldr	r2, [pc, #28]	; (8000ff4 <HAL_Init+0x40>)
 8000fd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fdc:	2003      	movs	r0, #3
 8000fde:	f000 f94f 	bl	8001280 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fe2:	2000      	movs	r0, #0
 8000fe4:	f000 f808 	bl	8000ff8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fe8:	f7ff fea4 	bl	8000d34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40023c00 	.word	0x40023c00

08000ff8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001000:	4b12      	ldr	r3, [pc, #72]	; (800104c <HAL_InitTick+0x54>)
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	4b12      	ldr	r3, [pc, #72]	; (8001050 <HAL_InitTick+0x58>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	4619      	mov	r1, r3
 800100a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800100e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001012:	fbb2 f3f3 	udiv	r3, r2, r3
 8001016:	4618      	mov	r0, r3
 8001018:	f000 f996 	bl	8001348 <HAL_SYSTICK_Config>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e00e      	b.n	8001044 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2b0f      	cmp	r3, #15
 800102a:	d80a      	bhi.n	8001042 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800102c:	2200      	movs	r2, #0
 800102e:	6879      	ldr	r1, [r7, #4]
 8001030:	f04f 30ff 	mov.w	r0, #4294967295
 8001034:	f000 f944 	bl	80012c0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001038:	4a06      	ldr	r2, [pc, #24]	; (8001054 <HAL_InitTick+0x5c>)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800103e:	2300      	movs	r3, #0
 8001040:	e000      	b.n	8001044 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
}
 8001044:	4618      	mov	r0, r3
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20000000 	.word	0x20000000
 8001050:	20000008 	.word	0x20000008
 8001054:	20000004 	.word	0x20000004

08001058 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800105c:	4b06      	ldr	r3, [pc, #24]	; (8001078 <HAL_IncTick+0x20>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	461a      	mov	r2, r3
 8001062:	4b06      	ldr	r3, [pc, #24]	; (800107c <HAL_IncTick+0x24>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4413      	add	r3, r2
 8001068:	4a04      	ldr	r2, [pc, #16]	; (800107c <HAL_IncTick+0x24>)
 800106a:	6013      	str	r3, [r2, #0]
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	20000008 	.word	0x20000008
 800107c:	200002fc 	.word	0x200002fc

08001080 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  return uwTick;
 8001084:	4b03      	ldr	r3, [pc, #12]	; (8001094 <HAL_GetTick+0x14>)
 8001086:	681b      	ldr	r3, [r3, #0]
}
 8001088:	4618      	mov	r0, r3
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	200002fc 	.word	0x200002fc

08001098 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010a0:	f7ff ffee 	bl	8001080 <HAL_GetTick>
 80010a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010b0:	d005      	beq.n	80010be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010b2:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <HAL_Delay+0x44>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	461a      	mov	r2, r3
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	4413      	add	r3, r2
 80010bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010be:	bf00      	nop
 80010c0:	f7ff ffde 	bl	8001080 <HAL_GetTick>
 80010c4:	4602      	mov	r2, r0
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	68fa      	ldr	r2, [r7, #12]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d8f7      	bhi.n	80010c0 <HAL_Delay+0x28>
  {
  }
}
 80010d0:	bf00      	nop
 80010d2:	bf00      	nop
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20000008 	.word	0x20000008

080010e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f003 0307 	and.w	r3, r3, #7
 80010ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010f0:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <__NVIC_SetPriorityGrouping+0x44>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010f6:	68ba      	ldr	r2, [r7, #8]
 80010f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010fc:	4013      	ands	r3, r2
 80010fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001108:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800110c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001110:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001112:	4a04      	ldr	r2, [pc, #16]	; (8001124 <__NVIC_SetPriorityGrouping+0x44>)
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	60d3      	str	r3, [r2, #12]
}
 8001118:	bf00      	nop
 800111a:	3714      	adds	r7, #20
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800112c:	4b04      	ldr	r3, [pc, #16]	; (8001140 <__NVIC_GetPriorityGrouping+0x18>)
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	0a1b      	lsrs	r3, r3, #8
 8001132:	f003 0307 	and.w	r3, r3, #7
}
 8001136:	4618      	mov	r0, r3
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	e000ed00 	.word	0xe000ed00

08001144 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800114e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001152:	2b00      	cmp	r3, #0
 8001154:	db0b      	blt.n	800116e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	f003 021f 	and.w	r2, r3, #31
 800115c:	4907      	ldr	r1, [pc, #28]	; (800117c <__NVIC_EnableIRQ+0x38>)
 800115e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001162:	095b      	lsrs	r3, r3, #5
 8001164:	2001      	movs	r0, #1
 8001166:	fa00 f202 	lsl.w	r2, r0, r2
 800116a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	e000e100 	.word	0xe000e100

08001180 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	6039      	str	r1, [r7, #0]
 800118a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800118c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001190:	2b00      	cmp	r3, #0
 8001192:	db0a      	blt.n	80011aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	b2da      	uxtb	r2, r3
 8001198:	490c      	ldr	r1, [pc, #48]	; (80011cc <__NVIC_SetPriority+0x4c>)
 800119a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119e:	0112      	lsls	r2, r2, #4
 80011a0:	b2d2      	uxtb	r2, r2
 80011a2:	440b      	add	r3, r1
 80011a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011a8:	e00a      	b.n	80011c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	b2da      	uxtb	r2, r3
 80011ae:	4908      	ldr	r1, [pc, #32]	; (80011d0 <__NVIC_SetPriority+0x50>)
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	f003 030f 	and.w	r3, r3, #15
 80011b6:	3b04      	subs	r3, #4
 80011b8:	0112      	lsls	r2, r2, #4
 80011ba:	b2d2      	uxtb	r2, r2
 80011bc:	440b      	add	r3, r1
 80011be:	761a      	strb	r2, [r3, #24]
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	e000e100 	.word	0xe000e100
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b089      	sub	sp, #36	; 0x24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	f003 0307 	and.w	r3, r3, #7
 80011e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	f1c3 0307 	rsb	r3, r3, #7
 80011ee:	2b04      	cmp	r3, #4
 80011f0:	bf28      	it	cs
 80011f2:	2304      	movcs	r3, #4
 80011f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	3304      	adds	r3, #4
 80011fa:	2b06      	cmp	r3, #6
 80011fc:	d902      	bls.n	8001204 <NVIC_EncodePriority+0x30>
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	3b03      	subs	r3, #3
 8001202:	e000      	b.n	8001206 <NVIC_EncodePriority+0x32>
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001208:	f04f 32ff 	mov.w	r2, #4294967295
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43da      	mvns	r2, r3
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	401a      	ands	r2, r3
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800121c:	f04f 31ff 	mov.w	r1, #4294967295
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	fa01 f303 	lsl.w	r3, r1, r3
 8001226:	43d9      	mvns	r1, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800122c:	4313      	orrs	r3, r2
         );
}
 800122e:	4618      	mov	r0, r3
 8001230:	3724      	adds	r7, #36	; 0x24
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
	...

0800123c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3b01      	subs	r3, #1
 8001248:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800124c:	d301      	bcc.n	8001252 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800124e:	2301      	movs	r3, #1
 8001250:	e00f      	b.n	8001272 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001252:	4a0a      	ldr	r2, [pc, #40]	; (800127c <SysTick_Config+0x40>)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	3b01      	subs	r3, #1
 8001258:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800125a:	210f      	movs	r1, #15
 800125c:	f04f 30ff 	mov.w	r0, #4294967295
 8001260:	f7ff ff8e 	bl	8001180 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001264:	4b05      	ldr	r3, [pc, #20]	; (800127c <SysTick_Config+0x40>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800126a:	4b04      	ldr	r3, [pc, #16]	; (800127c <SysTick_Config+0x40>)
 800126c:	2207      	movs	r2, #7
 800126e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	e000e010 	.word	0xe000e010

08001280 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2b07      	cmp	r3, #7
 800128c:	d00f      	beq.n	80012ae <HAL_NVIC_SetPriorityGrouping+0x2e>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2b06      	cmp	r3, #6
 8001292:	d00c      	beq.n	80012ae <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2b05      	cmp	r3, #5
 8001298:	d009      	beq.n	80012ae <HAL_NVIC_SetPriorityGrouping+0x2e>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2b04      	cmp	r3, #4
 800129e:	d006      	beq.n	80012ae <HAL_NVIC_SetPriorityGrouping+0x2e>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2b03      	cmp	r3, #3
 80012a4:	d003      	beq.n	80012ae <HAL_NVIC_SetPriorityGrouping+0x2e>
 80012a6:	2192      	movs	r1, #146	; 0x92
 80012a8:	4804      	ldr	r0, [pc, #16]	; (80012bc <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80012aa:	f7ff fcba 	bl	8000c22 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f7ff ff16 	bl	80010e0 <__NVIC_SetPriorityGrouping>
}
 80012b4:	bf00      	nop
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	0800c3e0 	.word	0x0800c3e0

080012c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
 80012cc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012ce:	2300      	movs	r3, #0
 80012d0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2b0f      	cmp	r3, #15
 80012d6:	d903      	bls.n	80012e0 <HAL_NVIC_SetPriority+0x20>
 80012d8:	21aa      	movs	r1, #170	; 0xaa
 80012da:	480e      	ldr	r0, [pc, #56]	; (8001314 <HAL_NVIC_SetPriority+0x54>)
 80012dc:	f7ff fca1 	bl	8000c22 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	2b0f      	cmp	r3, #15
 80012e4:	d903      	bls.n	80012ee <HAL_NVIC_SetPriority+0x2e>
 80012e6:	21ab      	movs	r1, #171	; 0xab
 80012e8:	480a      	ldr	r0, [pc, #40]	; (8001314 <HAL_NVIC_SetPriority+0x54>)
 80012ea:	f7ff fc9a 	bl	8000c22 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012ee:	f7ff ff1b 	bl	8001128 <__NVIC_GetPriorityGrouping>
 80012f2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	68b9      	ldr	r1, [r7, #8]
 80012f8:	6978      	ldr	r0, [r7, #20]
 80012fa:	f7ff ff6b 	bl	80011d4 <NVIC_EncodePriority>
 80012fe:	4602      	mov	r2, r0
 8001300:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001304:	4611      	mov	r1, r2
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff ff3a 	bl	8001180 <__NVIC_SetPriority>
}
 800130c:	bf00      	nop
 800130e:	3718      	adds	r7, #24
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	0800c3e0 	.word	0x0800c3e0

08001318 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001326:	2b00      	cmp	r3, #0
 8001328:	da03      	bge.n	8001332 <HAL_NVIC_EnableIRQ+0x1a>
 800132a:	21be      	movs	r1, #190	; 0xbe
 800132c:	4805      	ldr	r0, [pc, #20]	; (8001344 <HAL_NVIC_EnableIRQ+0x2c>)
 800132e:	f7ff fc78 	bl	8000c22 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff ff04 	bl	8001144 <__NVIC_EnableIRQ>
}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	0800c3e0 	.word	0x0800c3e0

08001348 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff ff73 	bl	800123c <SysTick_Config>
 8001356:	4603      	mov	r3, r0
}
 8001358:	4618      	mov	r0, r3
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b088      	sub	sp, #32
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800136a:	2300      	movs	r3, #0
 800136c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001372:	2300      	movs	r3, #0
 8001374:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a33      	ldr	r2, [pc, #204]	; (8001448 <HAL_GPIO_Init+0xe8>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d017      	beq.n	80013ae <HAL_GPIO_Init+0x4e>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a32      	ldr	r2, [pc, #200]	; (800144c <HAL_GPIO_Init+0xec>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d013      	beq.n	80013ae <HAL_GPIO_Init+0x4e>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a31      	ldr	r2, [pc, #196]	; (8001450 <HAL_GPIO_Init+0xf0>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d00f      	beq.n	80013ae <HAL_GPIO_Init+0x4e>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a30      	ldr	r2, [pc, #192]	; (8001454 <HAL_GPIO_Init+0xf4>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d00b      	beq.n	80013ae <HAL_GPIO_Init+0x4e>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a2f      	ldr	r2, [pc, #188]	; (8001458 <HAL_GPIO_Init+0xf8>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d007      	beq.n	80013ae <HAL_GPIO_Init+0x4e>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a2e      	ldr	r2, [pc, #184]	; (800145c <HAL_GPIO_Init+0xfc>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d003      	beq.n	80013ae <HAL_GPIO_Init+0x4e>
 80013a6:	21ac      	movs	r1, #172	; 0xac
 80013a8:	482d      	ldr	r0, [pc, #180]	; (8001460 <HAL_GPIO_Init+0x100>)
 80013aa:	f7ff fc3a 	bl	8000c22 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d005      	beq.n	80013c4 <HAL_GPIO_Init+0x64>
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	0c1b      	lsrs	r3, r3, #16
 80013be:	041b      	lsls	r3, r3, #16
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d003      	beq.n	80013cc <HAL_GPIO_Init+0x6c>
 80013c4:	21ad      	movs	r1, #173	; 0xad
 80013c6:	4826      	ldr	r0, [pc, #152]	; (8001460 <HAL_GPIO_Init+0x100>)
 80013c8:	f7ff fc2b 	bl	8000c22 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d035      	beq.n	8001440 <HAL_GPIO_Init+0xe0>
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d031      	beq.n	8001440 <HAL_GPIO_Init+0xe0>
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	2b11      	cmp	r3, #17
 80013e2:	d02d      	beq.n	8001440 <HAL_GPIO_Init+0xe0>
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d029      	beq.n	8001440 <HAL_GPIO_Init+0xe0>
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	2b12      	cmp	r3, #18
 80013f2:	d025      	beq.n	8001440 <HAL_GPIO_Init+0xe0>
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 80013fc:	d020      	beq.n	8001440 <HAL_GPIO_Init+0xe0>
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001406:	d01b      	beq.n	8001440 <HAL_GPIO_Init+0xe0>
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8001410:	d016      	beq.n	8001440 <HAL_GPIO_Init+0xe0>
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 800141a:	d011      	beq.n	8001440 <HAL_GPIO_Init+0xe0>
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8001424:	d00c      	beq.n	8001440 <HAL_GPIO_Init+0xe0>
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 800142e:	d007      	beq.n	8001440 <HAL_GPIO_Init+0xe0>
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	2b03      	cmp	r3, #3
 8001436:	d003      	beq.n	8001440 <HAL_GPIO_Init+0xe0>
 8001438:	21ae      	movs	r1, #174	; 0xae
 800143a:	4809      	ldr	r0, [pc, #36]	; (8001460 <HAL_GPIO_Init+0x100>)
 800143c:	f7ff fbf1 	bl	8000c22 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001440:	2300      	movs	r3, #0
 8001442:	61fb      	str	r3, [r7, #28]
 8001444:	e211      	b.n	800186a <HAL_GPIO_Init+0x50a>
 8001446:	bf00      	nop
 8001448:	40020000 	.word	0x40020000
 800144c:	40020400 	.word	0x40020400
 8001450:	40020800 	.word	0x40020800
 8001454:	40020c00 	.word	0x40020c00
 8001458:	40021000 	.word	0x40021000
 800145c:	40021c00 	.word	0x40021c00
 8001460:	0800c41c 	.word	0x0800c41c
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001464:	2201      	movs	r2, #1
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	697a      	ldr	r2, [r7, #20]
 8001474:	4013      	ands	r3, r2
 8001476:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	429a      	cmp	r2, r3
 800147e:	f040 81f1 	bne.w	8001864 <HAL_GPIO_Init+0x504>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f003 0303 	and.w	r3, r3, #3
 800148a:	2b01      	cmp	r3, #1
 800148c:	d005      	beq.n	800149a <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001496:	2b02      	cmp	r3, #2
 8001498:	d144      	bne.n	8001524 <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d00f      	beq.n	80014c2 <HAL_GPIO_Init+0x162>
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d00b      	beq.n	80014c2 <HAL_GPIO_Init+0x162>
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	68db      	ldr	r3, [r3, #12]
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d007      	beq.n	80014c2 <HAL_GPIO_Init+0x162>
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	2b03      	cmp	r3, #3
 80014b8:	d003      	beq.n	80014c2 <HAL_GPIO_Init+0x162>
 80014ba:	21c0      	movs	r1, #192	; 0xc0
 80014bc:	489f      	ldr	r0, [pc, #636]	; (800173c <HAL_GPIO_Init+0x3dc>)
 80014be:	f7ff fbb0 	bl	8000c22 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	2203      	movs	r2, #3
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	43db      	mvns	r3, r3
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	4013      	ands	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	68da      	ldr	r2, [r3, #12]
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014f8:	2201      	movs	r2, #1
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	43db      	mvns	r3, r3
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	4013      	ands	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	091b      	lsrs	r3, r3, #4
 800150e:	f003 0201 	and.w	r2, r3, #1
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	4313      	orrs	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f003 0303 	and.w	r3, r3, #3
 800152c:	2b03      	cmp	r3, #3
 800152e:	d027      	beq.n	8001580 <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d00b      	beq.n	8001550 <HAL_GPIO_Init+0x1f0>
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d007      	beq.n	8001550 <HAL_GPIO_Init+0x1f0>
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	2b02      	cmp	r3, #2
 8001546:	d003      	beq.n	8001550 <HAL_GPIO_Init+0x1f0>
 8001548:	21d1      	movs	r1, #209	; 0xd1
 800154a:	487c      	ldr	r0, [pc, #496]	; (800173c <HAL_GPIO_Init+0x3dc>)
 800154c:	f7ff fb69 	bl	8000c22 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	2203      	movs	r2, #3
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	43db      	mvns	r3, r3
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	4013      	ands	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	689a      	ldr	r2, [r3, #8]
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	4313      	orrs	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f003 0303 	and.w	r3, r3, #3
 8001588:	2b02      	cmp	r3, #2
 800158a:	f040 80a0 	bne.w	80016ce <HAL_GPIO_Init+0x36e>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	691b      	ldr	r3, [r3, #16]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d077      	beq.n	8001686 <HAL_GPIO_Init+0x326>
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	691b      	ldr	r3, [r3, #16]
 800159a:	2b09      	cmp	r3, #9
 800159c:	d073      	beq.n	8001686 <HAL_GPIO_Init+0x326>
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	691b      	ldr	r3, [r3, #16]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d06f      	beq.n	8001686 <HAL_GPIO_Init+0x326>
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	691b      	ldr	r3, [r3, #16]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d06b      	beq.n	8001686 <HAL_GPIO_Init+0x326>
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	691b      	ldr	r3, [r3, #16]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d067      	beq.n	8001686 <HAL_GPIO_Init+0x326>
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	691b      	ldr	r3, [r3, #16]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d063      	beq.n	8001686 <HAL_GPIO_Init+0x326>
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	691b      	ldr	r3, [r3, #16]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d05f      	beq.n	8001686 <HAL_GPIO_Init+0x326>
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	691b      	ldr	r3, [r3, #16]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d05b      	beq.n	8001686 <HAL_GPIO_Init+0x326>
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d057      	beq.n	8001686 <HAL_GPIO_Init+0x326>
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	691b      	ldr	r3, [r3, #16]
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d053      	beq.n	8001686 <HAL_GPIO_Init+0x326>
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	691b      	ldr	r3, [r3, #16]
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d04f      	beq.n	8001686 <HAL_GPIO_Init+0x326>
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	691b      	ldr	r3, [r3, #16]
 80015ea:	2b04      	cmp	r3, #4
 80015ec:	d04b      	beq.n	8001686 <HAL_GPIO_Init+0x326>
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	691b      	ldr	r3, [r3, #16]
 80015f2:	2b04      	cmp	r3, #4
 80015f4:	d047      	beq.n	8001686 <HAL_GPIO_Init+0x326>
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	691b      	ldr	r3, [r3, #16]
 80015fa:	2b04      	cmp	r3, #4
 80015fc:	d043      	beq.n	8001686 <HAL_GPIO_Init+0x326>
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	691b      	ldr	r3, [r3, #16]
 8001602:	2b05      	cmp	r3, #5
 8001604:	d03f      	beq.n	8001686 <HAL_GPIO_Init+0x326>
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	691b      	ldr	r3, [r3, #16]
 800160a:	2b05      	cmp	r3, #5
 800160c:	d03b      	beq.n	8001686 <HAL_GPIO_Init+0x326>
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	691b      	ldr	r3, [r3, #16]
 8001612:	2b05      	cmp	r3, #5
 8001614:	d037      	beq.n	8001686 <HAL_GPIO_Init+0x326>
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	2b06      	cmp	r3, #6
 800161c:	d033      	beq.n	8001686 <HAL_GPIO_Init+0x326>
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	691b      	ldr	r3, [r3, #16]
 8001622:	2b06      	cmp	r3, #6
 8001624:	d02f      	beq.n	8001686 <HAL_GPIO_Init+0x326>
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	691b      	ldr	r3, [r3, #16]
 800162a:	2b05      	cmp	r3, #5
 800162c:	d02b      	beq.n	8001686 <HAL_GPIO_Init+0x326>
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	691b      	ldr	r3, [r3, #16]
 8001632:	2b06      	cmp	r3, #6
 8001634:	d027      	beq.n	8001686 <HAL_GPIO_Init+0x326>
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	691b      	ldr	r3, [r3, #16]
 800163a:	2b07      	cmp	r3, #7
 800163c:	d023      	beq.n	8001686 <HAL_GPIO_Init+0x326>
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	691b      	ldr	r3, [r3, #16]
 8001642:	2b07      	cmp	r3, #7
 8001644:	d01f      	beq.n	8001686 <HAL_GPIO_Init+0x326>
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	691b      	ldr	r3, [r3, #16]
 800164a:	2b07      	cmp	r3, #7
 800164c:	d01b      	beq.n	8001686 <HAL_GPIO_Init+0x326>
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	691b      	ldr	r3, [r3, #16]
 8001652:	2b08      	cmp	r3, #8
 8001654:	d017      	beq.n	8001686 <HAL_GPIO_Init+0x326>
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	2b0a      	cmp	r3, #10
 800165c:	d013      	beq.n	8001686 <HAL_GPIO_Init+0x326>
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	691b      	ldr	r3, [r3, #16]
 8001662:	2b09      	cmp	r3, #9
 8001664:	d00f      	beq.n	8001686 <HAL_GPIO_Init+0x326>
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	691b      	ldr	r3, [r3, #16]
 800166a:	2b09      	cmp	r3, #9
 800166c:	d00b      	beq.n	8001686 <HAL_GPIO_Init+0x326>
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	691b      	ldr	r3, [r3, #16]
 8001672:	2b0c      	cmp	r3, #12
 8001674:	d007      	beq.n	8001686 <HAL_GPIO_Init+0x326>
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	691b      	ldr	r3, [r3, #16]
 800167a:	2b0f      	cmp	r3, #15
 800167c:	d003      	beq.n	8001686 <HAL_GPIO_Init+0x326>
 800167e:	21de      	movs	r1, #222	; 0xde
 8001680:	482e      	ldr	r0, [pc, #184]	; (800173c <HAL_GPIO_Init+0x3dc>)
 8001682:	f7ff face 	bl	8000c22 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	08da      	lsrs	r2, r3, #3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	3208      	adds	r2, #8
 800168e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001692:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	220f      	movs	r2, #15
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	43db      	mvns	r3, r3
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	4013      	ands	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	691a      	ldr	r2, [r3, #16]
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	f003 0307 	and.w	r3, r3, #7
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	4313      	orrs	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	08da      	lsrs	r2, r3, #3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	3208      	adds	r2, #8
 80016c8:	69b9      	ldr	r1, [r7, #24]
 80016ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	2203      	movs	r2, #3
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	43db      	mvns	r3, r3
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	4013      	ands	r3, r2
 80016e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f003 0203 	and.w	r2, r3, #3
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800170a:	2b00      	cmp	r3, #0
 800170c:	f000 80aa 	beq.w	8001864 <HAL_GPIO_Init+0x504>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001710:	2300      	movs	r3, #0
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	4b0a      	ldr	r3, [pc, #40]	; (8001740 <HAL_GPIO_Init+0x3e0>)
 8001716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001718:	4a09      	ldr	r2, [pc, #36]	; (8001740 <HAL_GPIO_Init+0x3e0>)
 800171a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800171e:	6453      	str	r3, [r2, #68]	; 0x44
 8001720:	4b07      	ldr	r3, [pc, #28]	; (8001740 <HAL_GPIO_Init+0x3e0>)
 8001722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001724:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800172c:	4a05      	ldr	r2, [pc, #20]	; (8001744 <HAL_GPIO_Init+0x3e4>)
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	089b      	lsrs	r3, r3, #2
 8001732:	3302      	adds	r3, #2
 8001734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001738:	e006      	b.n	8001748 <HAL_GPIO_Init+0x3e8>
 800173a:	bf00      	nop
 800173c:	0800c41c 	.word	0x0800c41c
 8001740:	40023800 	.word	0x40023800
 8001744:	40013800 	.word	0x40013800
 8001748:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	f003 0303 	and.w	r3, r3, #3
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	220f      	movs	r2, #15
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	43db      	mvns	r3, r3
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	4013      	ands	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4a46      	ldr	r2, [pc, #280]	; (800187c <HAL_GPIO_Init+0x51c>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d019      	beq.n	800179c <HAL_GPIO_Init+0x43c>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	4a45      	ldr	r2, [pc, #276]	; (8001880 <HAL_GPIO_Init+0x520>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d013      	beq.n	8001798 <HAL_GPIO_Init+0x438>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4a44      	ldr	r2, [pc, #272]	; (8001884 <HAL_GPIO_Init+0x524>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d00d      	beq.n	8001794 <HAL_GPIO_Init+0x434>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	4a43      	ldr	r2, [pc, #268]	; (8001888 <HAL_GPIO_Init+0x528>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d007      	beq.n	8001790 <HAL_GPIO_Init+0x430>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	4a42      	ldr	r2, [pc, #264]	; (800188c <HAL_GPIO_Init+0x52c>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d101      	bne.n	800178c <HAL_GPIO_Init+0x42c>
 8001788:	2304      	movs	r3, #4
 800178a:	e008      	b.n	800179e <HAL_GPIO_Init+0x43e>
 800178c:	2307      	movs	r3, #7
 800178e:	e006      	b.n	800179e <HAL_GPIO_Init+0x43e>
 8001790:	2303      	movs	r3, #3
 8001792:	e004      	b.n	800179e <HAL_GPIO_Init+0x43e>
 8001794:	2302      	movs	r3, #2
 8001796:	e002      	b.n	800179e <HAL_GPIO_Init+0x43e>
 8001798:	2301      	movs	r3, #1
 800179a:	e000      	b.n	800179e <HAL_GPIO_Init+0x43e>
 800179c:	2300      	movs	r3, #0
 800179e:	69fa      	ldr	r2, [r7, #28]
 80017a0:	f002 0203 	and.w	r2, r2, #3
 80017a4:	0092      	lsls	r2, r2, #2
 80017a6:	4093      	lsls	r3, r2
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017ae:	4938      	ldr	r1, [pc, #224]	; (8001890 <HAL_GPIO_Init+0x530>)
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	089b      	lsrs	r3, r3, #2
 80017b4:	3302      	adds	r3, #2
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017bc:	4b35      	ldr	r3, [pc, #212]	; (8001894 <HAL_GPIO_Init+0x534>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	43db      	mvns	r3, r3
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	4013      	ands	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d003      	beq.n	80017e0 <HAL_GPIO_Init+0x480>
        {
          temp |= iocurrent;
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	4313      	orrs	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017e0:	4a2c      	ldr	r2, [pc, #176]	; (8001894 <HAL_GPIO_Init+0x534>)
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80017e6:	4b2b      	ldr	r3, [pc, #172]	; (8001894 <HAL_GPIO_Init+0x534>)
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	43db      	mvns	r3, r3
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	4013      	ands	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d003      	beq.n	800180a <HAL_GPIO_Init+0x4aa>
        {
          temp |= iocurrent;
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	4313      	orrs	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800180a:	4a22      	ldr	r2, [pc, #136]	; (8001894 <HAL_GPIO_Init+0x534>)
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001810:	4b20      	ldr	r3, [pc, #128]	; (8001894 <HAL_GPIO_Init+0x534>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	43db      	mvns	r3, r3
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	4013      	ands	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d003      	beq.n	8001834 <HAL_GPIO_Init+0x4d4>
        {
          temp |= iocurrent;
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	4313      	orrs	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001834:	4a17      	ldr	r2, [pc, #92]	; (8001894 <HAL_GPIO_Init+0x534>)
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800183a:	4b16      	ldr	r3, [pc, #88]	; (8001894 <HAL_GPIO_Init+0x534>)
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	43db      	mvns	r3, r3
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	4013      	ands	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d003      	beq.n	800185e <HAL_GPIO_Init+0x4fe>
        {
          temp |= iocurrent;
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	4313      	orrs	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800185e:	4a0d      	ldr	r2, [pc, #52]	; (8001894 <HAL_GPIO_Init+0x534>)
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	3301      	adds	r3, #1
 8001868:	61fb      	str	r3, [r7, #28]
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	2b0f      	cmp	r3, #15
 800186e:	f67f adf9 	bls.w	8001464 <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 8001872:	bf00      	nop
 8001874:	bf00      	nop
 8001876:	3720      	adds	r7, #32
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40020000 	.word	0x40020000
 8001880:	40020400 	.word	0x40020400
 8001884:	40020800 	.word	0x40020800
 8001888:	40020c00 	.word	0x40020c00
 800188c:	40021000 	.word	0x40021000
 8001890:	40013800 	.word	0x40013800
 8001894:	40013c00 	.word	0x40013c00

08001898 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	460b      	mov	r3, r1
 80018a2:	807b      	strh	r3, [r7, #2]
 80018a4:	4613      	mov	r3, r2
 80018a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80018a8:	887b      	ldrh	r3, [r7, #2]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d004      	beq.n	80018b8 <HAL_GPIO_WritePin+0x20>
 80018ae:	887b      	ldrh	r3, [r7, #2]
 80018b0:	0c1b      	lsrs	r3, r3, #16
 80018b2:	041b      	lsls	r3, r3, #16
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d004      	beq.n	80018c2 <HAL_GPIO_WritePin+0x2a>
 80018b8:	f240 119d 	movw	r1, #413	; 0x19d
 80018bc:	480e      	ldr	r0, [pc, #56]	; (80018f8 <HAL_GPIO_WritePin+0x60>)
 80018be:	f7ff f9b0 	bl	8000c22 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80018c2:	787b      	ldrb	r3, [r7, #1]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d007      	beq.n	80018d8 <HAL_GPIO_WritePin+0x40>
 80018c8:	787b      	ldrb	r3, [r7, #1]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d004      	beq.n	80018d8 <HAL_GPIO_WritePin+0x40>
 80018ce:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 80018d2:	4809      	ldr	r0, [pc, #36]	; (80018f8 <HAL_GPIO_WritePin+0x60>)
 80018d4:	f7ff f9a5 	bl	8000c22 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80018d8:	787b      	ldrb	r3, [r7, #1]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d003      	beq.n	80018e6 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018de:	887a      	ldrh	r2, [r7, #2]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018e4:	e003      	b.n	80018ee <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018e6:	887b      	ldrh	r3, [r7, #2]
 80018e8:	041a      	lsls	r2, r3, #16
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	619a      	str	r2, [r3, #24]
}
 80018ee:	bf00      	nop
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	0800c41c 	.word	0x0800c41c

080018fc <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	460b      	mov	r3, r1
 8001906:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001908:	887b      	ldrh	r3, [r7, #2]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d004      	beq.n	8001918 <HAL_GPIO_TogglePin+0x1c>
 800190e:	887b      	ldrh	r3, [r7, #2]
 8001910:	0c1b      	lsrs	r3, r3, #16
 8001912:	041b      	lsls	r3, r3, #16
 8001914:	2b00      	cmp	r3, #0
 8001916:	d004      	beq.n	8001922 <HAL_GPIO_TogglePin+0x26>
 8001918:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 800191c:	480a      	ldr	r0, [pc, #40]	; (8001948 <HAL_GPIO_TogglePin+0x4c>)
 800191e:	f7ff f980 	bl	8000c22 <assert_failed>

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	695b      	ldr	r3, [r3, #20]
 8001926:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001928:	887a      	ldrh	r2, [r7, #2]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	4013      	ands	r3, r2
 800192e:	041a      	lsls	r2, r3, #16
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	43d9      	mvns	r1, r3
 8001934:	887b      	ldrh	r3, [r7, #2]
 8001936:	400b      	ands	r3, r1
 8001938:	431a      	orrs	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	619a      	str	r2, [r3, #24]
}
 800193e:	bf00      	nop
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	0800c41c 	.word	0x0800c41c

0800194c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800194c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800194e:	b08f      	sub	sp, #60	; 0x3c
 8001950:	af0a      	add	r7, sp, #40	; 0x28
 8001952:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e05d      	b.n	8001a1a <HAL_HCD_Init+0xce>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001966:	d003      	beq.n	8001970 <HAL_HCD_Init+0x24>
 8001968:	2179      	movs	r1, #121	; 0x79
 800196a:	482e      	ldr	r0, [pc, #184]	; (8001a24 <HAL_HCD_Init+0xd8>)
 800196c:	f7ff f959 	bl	8000c22 <assert_failed>

  USBx = hhcd->Instance;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800197c:	b2db      	uxtb	r3, r3
 800197e:	2b00      	cmp	r3, #0
 8001980:	d106      	bne.n	8001990 <HAL_HCD_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f009 fd0c 	bl	800b3a8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2203      	movs	r2, #3
 8001994:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800199c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d102      	bne.n	80019aa <HAL_HCD_Init+0x5e>
  {
    hhcd->Init.dma_enable = 0U;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f003 fd26 	bl	8005400 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	603b      	str	r3, [r7, #0]
 80019ba:	687e      	ldr	r6, [r7, #4]
 80019bc:	466d      	mov	r5, sp
 80019be:	f106 0410 	add.w	r4, r6, #16
 80019c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80019d2:	1d33      	adds	r3, r6, #4
 80019d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019d6:	6838      	ldr	r0, [r7, #0]
 80019d8:	f003 fca0 	bl	800531c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2101      	movs	r1, #1
 80019e2:	4618      	mov	r0, r3
 80019e4:	f003 fd1d 	bl	8005422 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	603b      	str	r3, [r7, #0]
 80019ee:	687e      	ldr	r6, [r7, #4]
 80019f0:	466d      	mov	r5, sp
 80019f2:	f106 0410 	add.w	r4, r6, #16
 80019f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a02:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a06:	1d33      	adds	r3, r6, #4
 8001a08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a0a:	6838      	ldr	r0, [r7, #0]
 8001a0c:	f003 fe84 	bl	8005718 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3714      	adds	r7, #20
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a22:	bf00      	nop
 8001a24:	0800c458 	.word	0x0800c458

08001a28 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001a28:	b590      	push	{r4, r7, lr}
 8001a2a:	b089      	sub	sp, #36	; 0x24
 8001a2c:	af04      	add	r7, sp, #16
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	4608      	mov	r0, r1
 8001a32:	4611      	mov	r1, r2
 8001a34:	461a      	mov	r2, r3
 8001a36:	4603      	mov	r3, r0
 8001a38:	70fb      	strb	r3, [r7, #3]
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	70bb      	strb	r3, [r7, #2]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d101      	bne.n	8001a50 <HAL_HCD_HC_Init+0x28>
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	e076      	b.n	8001b3e <HAL_HCD_HC_Init+0x116>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2201      	movs	r2, #1
 8001a54:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001a58:	78fb      	ldrb	r3, [r7, #3]
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	212c      	movs	r1, #44	; 0x2c
 8001a5e:	fb01 f303 	mul.w	r3, r1, r3
 8001a62:	4413      	add	r3, r2
 8001a64:	333d      	adds	r3, #61	; 0x3d
 8001a66:	2200      	movs	r2, #0
 8001a68:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001a6a:	78fb      	ldrb	r3, [r7, #3]
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	212c      	movs	r1, #44	; 0x2c
 8001a70:	fb01 f303 	mul.w	r3, r1, r3
 8001a74:	4413      	add	r3, r2
 8001a76:	3338      	adds	r3, #56	; 0x38
 8001a78:	787a      	ldrb	r2, [r7, #1]
 8001a7a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001a7c:	78fb      	ldrb	r3, [r7, #3]
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	212c      	movs	r1, #44	; 0x2c
 8001a82:	fb01 f303 	mul.w	r3, r1, r3
 8001a86:	4413      	add	r3, r2
 8001a88:	3340      	adds	r3, #64	; 0x40
 8001a8a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001a8c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a8e:	78fb      	ldrb	r3, [r7, #3]
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	212c      	movs	r1, #44	; 0x2c
 8001a94:	fb01 f303 	mul.w	r3, r1, r3
 8001a98:	4413      	add	r3, r2
 8001a9a:	3339      	adds	r3, #57	; 0x39
 8001a9c:	78fa      	ldrb	r2, [r7, #3]
 8001a9e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001aa0:	78fb      	ldrb	r3, [r7, #3]
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	212c      	movs	r1, #44	; 0x2c
 8001aa6:	fb01 f303 	mul.w	r3, r1, r3
 8001aaa:	4413      	add	r3, r2
 8001aac:	333f      	adds	r3, #63	; 0x3f
 8001aae:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001ab2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001ab4:	78fb      	ldrb	r3, [r7, #3]
 8001ab6:	78ba      	ldrb	r2, [r7, #2]
 8001ab8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001abc:	b2d0      	uxtb	r0, r2
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	212c      	movs	r1, #44	; 0x2c
 8001ac2:	fb01 f303 	mul.w	r3, r1, r3
 8001ac6:	4413      	add	r3, r2
 8001ac8:	333a      	adds	r3, #58	; 0x3a
 8001aca:	4602      	mov	r2, r0
 8001acc:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001ace:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	da09      	bge.n	8001aea <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001ad6:	78fb      	ldrb	r3, [r7, #3]
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	212c      	movs	r1, #44	; 0x2c
 8001adc:	fb01 f303 	mul.w	r3, r1, r3
 8001ae0:	4413      	add	r3, r2
 8001ae2:	333b      	adds	r3, #59	; 0x3b
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	701a      	strb	r2, [r3, #0]
 8001ae8:	e008      	b.n	8001afc <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001aea:	78fb      	ldrb	r3, [r7, #3]
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	212c      	movs	r1, #44	; 0x2c
 8001af0:	fb01 f303 	mul.w	r3, r1, r3
 8001af4:	4413      	add	r3, r2
 8001af6:	333b      	adds	r3, #59	; 0x3b
 8001af8:	2200      	movs	r2, #0
 8001afa:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001afc:	78fb      	ldrb	r3, [r7, #3]
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	212c      	movs	r1, #44	; 0x2c
 8001b02:	fb01 f303 	mul.w	r3, r1, r3
 8001b06:	4413      	add	r3, r2
 8001b08:	333c      	adds	r3, #60	; 0x3c
 8001b0a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001b0e:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6818      	ldr	r0, [r3, #0]
 8001b14:	787c      	ldrb	r4, [r7, #1]
 8001b16:	78ba      	ldrb	r2, [r7, #2]
 8001b18:	78f9      	ldrb	r1, [r7, #3]
 8001b1a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001b1c:	9302      	str	r3, [sp, #8]
 8001b1e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001b22:	9301      	str	r3, [sp, #4]
 8001b24:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b28:	9300      	str	r3, [sp, #0]
 8001b2a:	4623      	mov	r3, r4
 8001b2c:	f003 ff6e 	bl	8005a0c <USB_HC_Init>
 8001b30:	4603      	mov	r3, r0
 8001b32:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3714      	adds	r7, #20
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd90      	pop	{r4, r7, pc}

08001b46 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b084      	sub	sp, #16
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
 8001b4e:	460b      	mov	r3, r1
 8001b50:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001b52:	2300      	movs	r3, #0
 8001b54:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d101      	bne.n	8001b64 <HAL_HCD_HC_Halt+0x1e>
 8001b60:	2302      	movs	r3, #2
 8001b62:	e00f      	b.n	8001b84 <HAL_HCD_HC_Halt+0x3e>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	78fa      	ldrb	r2, [r7, #3]
 8001b72:	4611      	mov	r1, r2
 8001b74:	4618      	mov	r0, r3
 8001b76:	f004 f9aa 	bl	8005ece <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3710      	adds	r7, #16
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	4608      	mov	r0, r1
 8001b96:	4611      	mov	r1, r2
 8001b98:	461a      	mov	r2, r3
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	70fb      	strb	r3, [r7, #3]
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	70bb      	strb	r3, [r7, #2]
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001ba6:	78fb      	ldrb	r3, [r7, #3]
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	212c      	movs	r1, #44	; 0x2c
 8001bac:	fb01 f303 	mul.w	r3, r1, r3
 8001bb0:	4413      	add	r3, r2
 8001bb2:	333b      	adds	r3, #59	; 0x3b
 8001bb4:	78ba      	ldrb	r2, [r7, #2]
 8001bb6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001bb8:	78fb      	ldrb	r3, [r7, #3]
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	212c      	movs	r1, #44	; 0x2c
 8001bbe:	fb01 f303 	mul.w	r3, r1, r3
 8001bc2:	4413      	add	r3, r2
 8001bc4:	333f      	adds	r3, #63	; 0x3f
 8001bc6:	787a      	ldrb	r2, [r7, #1]
 8001bc8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001bca:	7c3b      	ldrb	r3, [r7, #16]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d112      	bne.n	8001bf6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001bd0:	78fb      	ldrb	r3, [r7, #3]
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	212c      	movs	r1, #44	; 0x2c
 8001bd6:	fb01 f303 	mul.w	r3, r1, r3
 8001bda:	4413      	add	r3, r2
 8001bdc:	3342      	adds	r3, #66	; 0x42
 8001bde:	2203      	movs	r2, #3
 8001be0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001be2:	78fb      	ldrb	r3, [r7, #3]
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	212c      	movs	r1, #44	; 0x2c
 8001be8:	fb01 f303 	mul.w	r3, r1, r3
 8001bec:	4413      	add	r3, r2
 8001bee:	333d      	adds	r3, #61	; 0x3d
 8001bf0:	7f3a      	ldrb	r2, [r7, #28]
 8001bf2:	701a      	strb	r2, [r3, #0]
 8001bf4:	e008      	b.n	8001c08 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bf6:	78fb      	ldrb	r3, [r7, #3]
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	212c      	movs	r1, #44	; 0x2c
 8001bfc:	fb01 f303 	mul.w	r3, r1, r3
 8001c00:	4413      	add	r3, r2
 8001c02:	3342      	adds	r3, #66	; 0x42
 8001c04:	2202      	movs	r2, #2
 8001c06:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001c08:	787b      	ldrb	r3, [r7, #1]
 8001c0a:	2b03      	cmp	r3, #3
 8001c0c:	f200 80c6 	bhi.w	8001d9c <HAL_HCD_HC_SubmitRequest+0x210>
 8001c10:	a201      	add	r2, pc, #4	; (adr r2, 8001c18 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c16:	bf00      	nop
 8001c18:	08001c29 	.word	0x08001c29
 8001c1c:	08001d89 	.word	0x08001d89
 8001c20:	08001c8d 	.word	0x08001c8d
 8001c24:	08001d0b 	.word	0x08001d0b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001c28:	7c3b      	ldrb	r3, [r7, #16]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	f040 80b8 	bne.w	8001da0 <HAL_HCD_HC_SubmitRequest+0x214>
 8001c30:	78bb      	ldrb	r3, [r7, #2]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	f040 80b4 	bne.w	8001da0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001c38:	8b3b      	ldrh	r3, [r7, #24]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d108      	bne.n	8001c50 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001c3e:	78fb      	ldrb	r3, [r7, #3]
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	212c      	movs	r1, #44	; 0x2c
 8001c44:	fb01 f303 	mul.w	r3, r1, r3
 8001c48:	4413      	add	r3, r2
 8001c4a:	3355      	adds	r3, #85	; 0x55
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c50:	78fb      	ldrb	r3, [r7, #3]
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	212c      	movs	r1, #44	; 0x2c
 8001c56:	fb01 f303 	mul.w	r3, r1, r3
 8001c5a:	4413      	add	r3, r2
 8001c5c:	3355      	adds	r3, #85	; 0x55
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d109      	bne.n	8001c78 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c64:	78fb      	ldrb	r3, [r7, #3]
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	212c      	movs	r1, #44	; 0x2c
 8001c6a:	fb01 f303 	mul.w	r3, r1, r3
 8001c6e:	4413      	add	r3, r2
 8001c70:	3342      	adds	r3, #66	; 0x42
 8001c72:	2200      	movs	r2, #0
 8001c74:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001c76:	e093      	b.n	8001da0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c78:	78fb      	ldrb	r3, [r7, #3]
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	212c      	movs	r1, #44	; 0x2c
 8001c7e:	fb01 f303 	mul.w	r3, r1, r3
 8001c82:	4413      	add	r3, r2
 8001c84:	3342      	adds	r3, #66	; 0x42
 8001c86:	2202      	movs	r2, #2
 8001c88:	701a      	strb	r2, [r3, #0]
      break;
 8001c8a:	e089      	b.n	8001da0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001c8c:	78bb      	ldrb	r3, [r7, #2]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d11d      	bne.n	8001cce <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c92:	78fb      	ldrb	r3, [r7, #3]
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	212c      	movs	r1, #44	; 0x2c
 8001c98:	fb01 f303 	mul.w	r3, r1, r3
 8001c9c:	4413      	add	r3, r2
 8001c9e:	3355      	adds	r3, #85	; 0x55
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d109      	bne.n	8001cba <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ca6:	78fb      	ldrb	r3, [r7, #3]
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	212c      	movs	r1, #44	; 0x2c
 8001cac:	fb01 f303 	mul.w	r3, r1, r3
 8001cb0:	4413      	add	r3, r2
 8001cb2:	3342      	adds	r3, #66	; 0x42
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001cb8:	e073      	b.n	8001da2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cba:	78fb      	ldrb	r3, [r7, #3]
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	212c      	movs	r1, #44	; 0x2c
 8001cc0:	fb01 f303 	mul.w	r3, r1, r3
 8001cc4:	4413      	add	r3, r2
 8001cc6:	3342      	adds	r3, #66	; 0x42
 8001cc8:	2202      	movs	r2, #2
 8001cca:	701a      	strb	r2, [r3, #0]
      break;
 8001ccc:	e069      	b.n	8001da2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001cce:	78fb      	ldrb	r3, [r7, #3]
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	212c      	movs	r1, #44	; 0x2c
 8001cd4:	fb01 f303 	mul.w	r3, r1, r3
 8001cd8:	4413      	add	r3, r2
 8001cda:	3354      	adds	r3, #84	; 0x54
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d109      	bne.n	8001cf6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ce2:	78fb      	ldrb	r3, [r7, #3]
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	212c      	movs	r1, #44	; 0x2c
 8001ce8:	fb01 f303 	mul.w	r3, r1, r3
 8001cec:	4413      	add	r3, r2
 8001cee:	3342      	adds	r3, #66	; 0x42
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	701a      	strb	r2, [r3, #0]
      break;
 8001cf4:	e055      	b.n	8001da2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cf6:	78fb      	ldrb	r3, [r7, #3]
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	212c      	movs	r1, #44	; 0x2c
 8001cfc:	fb01 f303 	mul.w	r3, r1, r3
 8001d00:	4413      	add	r3, r2
 8001d02:	3342      	adds	r3, #66	; 0x42
 8001d04:	2202      	movs	r2, #2
 8001d06:	701a      	strb	r2, [r3, #0]
      break;
 8001d08:	e04b      	b.n	8001da2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001d0a:	78bb      	ldrb	r3, [r7, #2]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d11d      	bne.n	8001d4c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001d10:	78fb      	ldrb	r3, [r7, #3]
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	212c      	movs	r1, #44	; 0x2c
 8001d16:	fb01 f303 	mul.w	r3, r1, r3
 8001d1a:	4413      	add	r3, r2
 8001d1c:	3355      	adds	r3, #85	; 0x55
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d109      	bne.n	8001d38 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d24:	78fb      	ldrb	r3, [r7, #3]
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	212c      	movs	r1, #44	; 0x2c
 8001d2a:	fb01 f303 	mul.w	r3, r1, r3
 8001d2e:	4413      	add	r3, r2
 8001d30:	3342      	adds	r3, #66	; 0x42
 8001d32:	2200      	movs	r2, #0
 8001d34:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001d36:	e034      	b.n	8001da2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d38:	78fb      	ldrb	r3, [r7, #3]
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	212c      	movs	r1, #44	; 0x2c
 8001d3e:	fb01 f303 	mul.w	r3, r1, r3
 8001d42:	4413      	add	r3, r2
 8001d44:	3342      	adds	r3, #66	; 0x42
 8001d46:	2202      	movs	r2, #2
 8001d48:	701a      	strb	r2, [r3, #0]
      break;
 8001d4a:	e02a      	b.n	8001da2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001d4c:	78fb      	ldrb	r3, [r7, #3]
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	212c      	movs	r1, #44	; 0x2c
 8001d52:	fb01 f303 	mul.w	r3, r1, r3
 8001d56:	4413      	add	r3, r2
 8001d58:	3354      	adds	r3, #84	; 0x54
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d109      	bne.n	8001d74 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d60:	78fb      	ldrb	r3, [r7, #3]
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	212c      	movs	r1, #44	; 0x2c
 8001d66:	fb01 f303 	mul.w	r3, r1, r3
 8001d6a:	4413      	add	r3, r2
 8001d6c:	3342      	adds	r3, #66	; 0x42
 8001d6e:	2200      	movs	r2, #0
 8001d70:	701a      	strb	r2, [r3, #0]
      break;
 8001d72:	e016      	b.n	8001da2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d74:	78fb      	ldrb	r3, [r7, #3]
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	212c      	movs	r1, #44	; 0x2c
 8001d7a:	fb01 f303 	mul.w	r3, r1, r3
 8001d7e:	4413      	add	r3, r2
 8001d80:	3342      	adds	r3, #66	; 0x42
 8001d82:	2202      	movs	r2, #2
 8001d84:	701a      	strb	r2, [r3, #0]
      break;
 8001d86:	e00c      	b.n	8001da2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d88:	78fb      	ldrb	r3, [r7, #3]
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	212c      	movs	r1, #44	; 0x2c
 8001d8e:	fb01 f303 	mul.w	r3, r1, r3
 8001d92:	4413      	add	r3, r2
 8001d94:	3342      	adds	r3, #66	; 0x42
 8001d96:	2200      	movs	r2, #0
 8001d98:	701a      	strb	r2, [r3, #0]
      break;
 8001d9a:	e002      	b.n	8001da2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001d9c:	bf00      	nop
 8001d9e:	e000      	b.n	8001da2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001da0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001da2:	78fb      	ldrb	r3, [r7, #3]
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	212c      	movs	r1, #44	; 0x2c
 8001da8:	fb01 f303 	mul.w	r3, r1, r3
 8001dac:	4413      	add	r3, r2
 8001dae:	3344      	adds	r3, #68	; 0x44
 8001db0:	697a      	ldr	r2, [r7, #20]
 8001db2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001db4:	78fb      	ldrb	r3, [r7, #3]
 8001db6:	8b3a      	ldrh	r2, [r7, #24]
 8001db8:	6879      	ldr	r1, [r7, #4]
 8001dba:	202c      	movs	r0, #44	; 0x2c
 8001dbc:	fb00 f303 	mul.w	r3, r0, r3
 8001dc0:	440b      	add	r3, r1
 8001dc2:	334c      	adds	r3, #76	; 0x4c
 8001dc4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001dc6:	78fb      	ldrb	r3, [r7, #3]
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	212c      	movs	r1, #44	; 0x2c
 8001dcc:	fb01 f303 	mul.w	r3, r1, r3
 8001dd0:	4413      	add	r3, r2
 8001dd2:	3360      	adds	r3, #96	; 0x60
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001dd8:	78fb      	ldrb	r3, [r7, #3]
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	212c      	movs	r1, #44	; 0x2c
 8001dde:	fb01 f303 	mul.w	r3, r1, r3
 8001de2:	4413      	add	r3, r2
 8001de4:	3350      	adds	r3, #80	; 0x50
 8001de6:	2200      	movs	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001dea:	78fb      	ldrb	r3, [r7, #3]
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	212c      	movs	r1, #44	; 0x2c
 8001df0:	fb01 f303 	mul.w	r3, r1, r3
 8001df4:	4413      	add	r3, r2
 8001df6:	3339      	adds	r3, #57	; 0x39
 8001df8:	78fa      	ldrb	r2, [r7, #3]
 8001dfa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001dfc:	78fb      	ldrb	r3, [r7, #3]
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	212c      	movs	r1, #44	; 0x2c
 8001e02:	fb01 f303 	mul.w	r3, r1, r3
 8001e06:	4413      	add	r3, r2
 8001e08:	3361      	adds	r3, #97	; 0x61
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6818      	ldr	r0, [r3, #0]
 8001e12:	78fb      	ldrb	r3, [r7, #3]
 8001e14:	222c      	movs	r2, #44	; 0x2c
 8001e16:	fb02 f303 	mul.w	r3, r2, r3
 8001e1a:	3338      	adds	r3, #56	; 0x38
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	18d1      	adds	r1, r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	461a      	mov	r2, r3
 8001e28:	f003 fefe 	bl	8005c28 <USB_HC_StartXfer>
 8001e2c:	4603      	mov	r3, r0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop

08001e38 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f003 fc21 	bl	8005696 <USB_GetMode>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	f040 80f6 	bne.w	8002048 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f003 fc05 	bl	8005670 <USB_ReadInterrupts>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	f000 80ec 	beq.w	8002046 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f003 fbfc 	bl	8005670 <USB_ReadInterrupts>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001e82:	d104      	bne.n	8001e8e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001e8c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f003 fbec 	bl	8005670 <USB_ReadInterrupts>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ea2:	d104      	bne.n	8001eae <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001eac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f003 fbdc 	bl	8005670 <USB_ReadInterrupts>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ebe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001ec2:	d104      	bne.n	8001ece <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001ecc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f003 fbcc 	bl	8005670 <USB_ReadInterrupts>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d103      	bne.n	8001eea <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2202      	movs	r2, #2
 8001ee8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f003 fbbe 	bl	8005670 <USB_ReadInterrupts>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001efa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001efe:	d11c      	bne.n	8001f3a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001f08:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d10f      	bne.n	8001f3a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001f1a:	2110      	movs	r1, #16
 8001f1c:	6938      	ldr	r0, [r7, #16]
 8001f1e:	f003 facd 	bl	80054bc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001f22:	6938      	ldr	r0, [r7, #16]
 8001f24:	f003 faee 	bl	8005504 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2101      	movs	r1, #1
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f003 fca6 	bl	8005880 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f009 fab5 	bl	800b4a4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f003 fb96 	bl	8005670 <USB_ReadInterrupts>
 8001f44:	4603      	mov	r3, r0
 8001f46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f4a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f4e:	d102      	bne.n	8001f56 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f001 fa03 	bl	800335c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f003 fb88 	bl	8005670 <USB_ReadInterrupts>
 8001f60:	4603      	mov	r3, r0
 8001f62:	f003 0308 	and.w	r3, r3, #8
 8001f66:	2b08      	cmp	r3, #8
 8001f68:	d106      	bne.n	8001f78 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f009 fa7e 	bl	800b46c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2208      	movs	r2, #8
 8001f76:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f003 fb77 	bl	8005670 <USB_ReadInterrupts>
 8001f82:	4603      	mov	r3, r0
 8001f84:	f003 0310 	and.w	r3, r3, #16
 8001f88:	2b10      	cmp	r3, #16
 8001f8a:	d101      	bne.n	8001f90 <HAL_HCD_IRQHandler+0x158>
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e000      	b.n	8001f92 <HAL_HCD_IRQHandler+0x15a>
 8001f90:	2300      	movs	r3, #0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d012      	beq.n	8001fbc <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	699a      	ldr	r2, [r3, #24]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f022 0210 	bic.w	r2, r2, #16
 8001fa4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f001 f906 	bl	80031b8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	699a      	ldr	r2, [r3, #24]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f042 0210 	orr.w	r2, r2, #16
 8001fba:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f003 fb55 	bl	8005670 <USB_ReadInterrupts>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fcc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001fd0:	d13a      	bne.n	8002048 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f003 ff68 	bl	8005eac <USB_HC_ReadInterrupt>
 8001fdc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001fde:	2300      	movs	r3, #0
 8001fe0:	617b      	str	r3, [r7, #20]
 8001fe2:	e025      	b.n	8002030 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	f003 030f 	and.w	r3, r3, #15
 8001fea:	68ba      	ldr	r2, [r7, #8]
 8001fec:	fa22 f303 	lsr.w	r3, r2, r3
 8001ff0:	f003 0301 	and.w	r3, r3, #1
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d018      	beq.n	800202a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	015a      	lsls	r2, r3, #5
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	4413      	add	r3, r2
 8002000:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800200a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800200e:	d106      	bne.n	800201e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	b2db      	uxtb	r3, r3
 8002014:	4619      	mov	r1, r3
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 f8ab 	bl	8002172 <HCD_HC_IN_IRQHandler>
 800201c:	e005      	b.n	800202a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	b2db      	uxtb	r3, r3
 8002022:	4619      	mov	r1, r3
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f000 fcc6 	bl	80029b6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	3301      	adds	r3, #1
 800202e:	617b      	str	r3, [r7, #20]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	697a      	ldr	r2, [r7, #20]
 8002036:	429a      	cmp	r2, r3
 8002038:	d3d4      	bcc.n	8001fe4 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002042:	615a      	str	r2, [r3, #20]
 8002044:	e000      	b.n	8002048 <HAL_HCD_IRQHandler+0x210>
      return;
 8002046:	bf00      	nop
    }
  }
}
 8002048:	3718      	adds	r7, #24
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b082      	sub	sp, #8
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800205c:	2b01      	cmp	r3, #1
 800205e:	d101      	bne.n	8002064 <HAL_HCD_Start+0x16>
 8002060:	2302      	movs	r3, #2
 8002062:	e013      	b.n	800208c <HAL_HCD_Start+0x3e>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2101      	movs	r1, #1
 8002072:	4618      	mov	r0, r3
 8002074:	f003 fc68 	bl	8005948 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4618      	mov	r0, r3
 800207e:	f003 f9ae 	bl	80053de <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d101      	bne.n	80020aa <HAL_HCD_Stop+0x16>
 80020a6:	2302      	movs	r3, #2
 80020a8:	e00d      	b.n	80020c6 <HAL_HCD_Stop+0x32>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f004 f862 	bl	8006180 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b082      	sub	sp, #8
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4618      	mov	r0, r3
 80020dc:	f003 fc0a 	bl	80058f4 <USB_ResetPort>
 80020e0:	4603      	mov	r3, r0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80020ea:	b480      	push	{r7}
 80020ec:	b083      	sub	sp, #12
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
 80020f2:	460b      	mov	r3, r1
 80020f4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80020f6:	78fb      	ldrb	r3, [r7, #3]
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	212c      	movs	r1, #44	; 0x2c
 80020fc:	fb01 f303 	mul.w	r3, r1, r3
 8002100:	4413      	add	r3, r2
 8002102:	3360      	adds	r3, #96	; 0x60
 8002104:	781b      	ldrb	r3, [r3, #0]
}
 8002106:	4618      	mov	r0, r3
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr

08002112 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002112:	b480      	push	{r7}
 8002114:	b083      	sub	sp, #12
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
 800211a:	460b      	mov	r3, r1
 800211c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800211e:	78fb      	ldrb	r3, [r7, #3]
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	212c      	movs	r1, #44	; 0x2c
 8002124:	fb01 f303 	mul.w	r3, r1, r3
 8002128:	4413      	add	r3, r2
 800212a:	3350      	adds	r3, #80	; 0x50
 800212c:	681b      	ldr	r3, [r3, #0]
}
 800212e:	4618      	mov	r0, r3
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b082      	sub	sp, #8
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4618      	mov	r0, r3
 8002148:	f003 fc4e 	bl	80059e8 <USB_GetCurrentFrame>
 800214c:	4603      	mov	r3, r0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b082      	sub	sp, #8
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f003 fc29 	bl	80059ba <USB_GetHostSpeed>
 8002168:	4603      	mov	r3, r0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b086      	sub	sp, #24
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
 800217a:	460b      	mov	r3, r1
 800217c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002188:	78fb      	ldrb	r3, [r7, #3]
 800218a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	015a      	lsls	r2, r3, #5
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	4413      	add	r3, r2
 8002194:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f003 0304 	and.w	r3, r3, #4
 800219e:	2b04      	cmp	r3, #4
 80021a0:	d119      	bne.n	80021d6 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	015a      	lsls	r2, r3, #5
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	4413      	add	r3, r2
 80021aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ae:	461a      	mov	r2, r3
 80021b0:	2304      	movs	r3, #4
 80021b2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	015a      	lsls	r2, r3, #5
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	4413      	add	r3, r2
 80021bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	0151      	lsls	r1, r2, #5
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	440a      	add	r2, r1
 80021ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021ce:	f043 0302 	orr.w	r3, r3, #2
 80021d2:	60d3      	str	r3, [r2, #12]
 80021d4:	e101      	b.n	80023da <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	015a      	lsls	r2, r3, #5
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	4413      	add	r3, r2
 80021de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021ec:	d12b      	bne.n	8002246 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	015a      	lsls	r2, r3, #5
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	4413      	add	r3, r2
 80021f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021fa:	461a      	mov	r2, r3
 80021fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002200:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	212c      	movs	r1, #44	; 0x2c
 8002208:	fb01 f303 	mul.w	r3, r1, r3
 800220c:	4413      	add	r3, r2
 800220e:	3361      	adds	r3, #97	; 0x61
 8002210:	2207      	movs	r2, #7
 8002212:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	015a      	lsls	r2, r3, #5
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	4413      	add	r3, r2
 800221c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	0151      	lsls	r1, r2, #5
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	440a      	add	r2, r1
 800222a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800222e:	f043 0302 	orr.w	r3, r3, #2
 8002232:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	b2d2      	uxtb	r2, r2
 800223c:	4611      	mov	r1, r2
 800223e:	4618      	mov	r0, r3
 8002240:	f003 fe45 	bl	8005ece <USB_HC_Halt>
 8002244:	e0c9      	b.n	80023da <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	015a      	lsls	r2, r3, #5
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	4413      	add	r3, r2
 800224e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f003 0320 	and.w	r3, r3, #32
 8002258:	2b20      	cmp	r3, #32
 800225a:	d109      	bne.n	8002270 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	015a      	lsls	r2, r3, #5
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	4413      	add	r3, r2
 8002264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002268:	461a      	mov	r2, r3
 800226a:	2320      	movs	r3, #32
 800226c:	6093      	str	r3, [r2, #8]
 800226e:	e0b4      	b.n	80023da <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	015a      	lsls	r2, r3, #5
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	4413      	add	r3, r2
 8002278:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f003 0308 	and.w	r3, r3, #8
 8002282:	2b08      	cmp	r3, #8
 8002284:	d133      	bne.n	80022ee <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	015a      	lsls	r2, r3, #5
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	4413      	add	r3, r2
 800228e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	0151      	lsls	r1, r2, #5
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	440a      	add	r2, r1
 800229c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022a0:	f043 0302 	orr.w	r3, r3, #2
 80022a4:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	212c      	movs	r1, #44	; 0x2c
 80022ac:	fb01 f303 	mul.w	r3, r1, r3
 80022b0:	4413      	add	r3, r2
 80022b2:	3361      	adds	r3, #97	; 0x61
 80022b4:	2205      	movs	r2, #5
 80022b6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	015a      	lsls	r2, r3, #5
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	4413      	add	r3, r2
 80022c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c4:	461a      	mov	r2, r3
 80022c6:	2310      	movs	r3, #16
 80022c8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	015a      	lsls	r2, r3, #5
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	4413      	add	r3, r2
 80022d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022d6:	461a      	mov	r2, r3
 80022d8:	2308      	movs	r3, #8
 80022da:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	b2d2      	uxtb	r2, r2
 80022e4:	4611      	mov	r1, r2
 80022e6:	4618      	mov	r0, r3
 80022e8:	f003 fdf1 	bl	8005ece <USB_HC_Halt>
 80022ec:	e075      	b.n	80023da <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	015a      	lsls	r2, r3, #5
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	4413      	add	r3, r2
 80022f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002300:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002304:	d134      	bne.n	8002370 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	015a      	lsls	r2, r3, #5
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	4413      	add	r3, r2
 800230e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	68fa      	ldr	r2, [r7, #12]
 8002316:	0151      	lsls	r1, r2, #5
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	440a      	add	r2, r1
 800231c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002320:	f043 0302 	orr.w	r3, r3, #2
 8002324:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	212c      	movs	r1, #44	; 0x2c
 800232c:	fb01 f303 	mul.w	r3, r1, r3
 8002330:	4413      	add	r3, r2
 8002332:	3361      	adds	r3, #97	; 0x61
 8002334:	2208      	movs	r2, #8
 8002336:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	015a      	lsls	r2, r3, #5
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	4413      	add	r3, r2
 8002340:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002344:	461a      	mov	r2, r3
 8002346:	2310      	movs	r3, #16
 8002348:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	015a      	lsls	r2, r3, #5
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	4413      	add	r3, r2
 8002352:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002356:	461a      	mov	r2, r3
 8002358:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800235c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	b2d2      	uxtb	r2, r2
 8002366:	4611      	mov	r1, r2
 8002368:	4618      	mov	r0, r3
 800236a:	f003 fdb0 	bl	8005ece <USB_HC_Halt>
 800236e:	e034      	b.n	80023da <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	015a      	lsls	r2, r3, #5
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	4413      	add	r3, r2
 8002378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002382:	2b80      	cmp	r3, #128	; 0x80
 8002384:	d129      	bne.n	80023da <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	015a      	lsls	r2, r3, #5
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	4413      	add	r3, r2
 800238e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	0151      	lsls	r1, r2, #5
 8002398:	693a      	ldr	r2, [r7, #16]
 800239a:	440a      	add	r2, r1
 800239c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023a0:	f043 0302 	orr.w	r3, r3, #2
 80023a4:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	212c      	movs	r1, #44	; 0x2c
 80023ac:	fb01 f303 	mul.w	r3, r1, r3
 80023b0:	4413      	add	r3, r2
 80023b2:	3361      	adds	r3, #97	; 0x61
 80023b4:	2206      	movs	r2, #6
 80023b6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68fa      	ldr	r2, [r7, #12]
 80023be:	b2d2      	uxtb	r2, r2
 80023c0:	4611      	mov	r1, r2
 80023c2:	4618      	mov	r0, r3
 80023c4:	f003 fd83 	bl	8005ece <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	015a      	lsls	r2, r3, #5
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	4413      	add	r3, r2
 80023d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023d4:	461a      	mov	r2, r3
 80023d6:	2380      	movs	r3, #128	; 0x80
 80023d8:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	015a      	lsls	r2, r3, #5
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	4413      	add	r3, r2
 80023e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023f0:	d122      	bne.n	8002438 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	015a      	lsls	r2, r3, #5
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	4413      	add	r3, r2
 80023fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	0151      	lsls	r1, r2, #5
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	440a      	add	r2, r1
 8002408:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800240c:	f043 0302 	orr.w	r3, r3, #2
 8002410:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	b2d2      	uxtb	r2, r2
 800241a:	4611      	mov	r1, r2
 800241c:	4618      	mov	r0, r3
 800241e:	f003 fd56 	bl	8005ece <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	015a      	lsls	r2, r3, #5
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	4413      	add	r3, r2
 800242a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800242e:	461a      	mov	r2, r3
 8002430:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002434:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002436:	e2ba      	b.n	80029ae <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	015a      	lsls	r2, r3, #5
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	4413      	add	r3, r2
 8002440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	2b01      	cmp	r3, #1
 800244c:	f040 811b 	bne.w	8002686 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	691b      	ldr	r3, [r3, #16]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d019      	beq.n	800248c <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	212c      	movs	r1, #44	; 0x2c
 800245e:	fb01 f303 	mul.w	r3, r1, r3
 8002462:	4413      	add	r3, r2
 8002464:	3348      	adds	r3, #72	; 0x48
 8002466:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	0159      	lsls	r1, r3, #5
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	440b      	add	r3, r1
 8002470:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800247a:	1ad2      	subs	r2, r2, r3
 800247c:	6879      	ldr	r1, [r7, #4]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	202c      	movs	r0, #44	; 0x2c
 8002482:	fb00 f303 	mul.w	r3, r0, r3
 8002486:	440b      	add	r3, r1
 8002488:	3350      	adds	r3, #80	; 0x50
 800248a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	212c      	movs	r1, #44	; 0x2c
 8002492:	fb01 f303 	mul.w	r3, r1, r3
 8002496:	4413      	add	r3, r2
 8002498:	3361      	adds	r3, #97	; 0x61
 800249a:	2201      	movs	r2, #1
 800249c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	212c      	movs	r1, #44	; 0x2c
 80024a4:	fb01 f303 	mul.w	r3, r1, r3
 80024a8:	4413      	add	r3, r2
 80024aa:	335c      	adds	r3, #92	; 0x5c
 80024ac:	2200      	movs	r2, #0
 80024ae:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	015a      	lsls	r2, r3, #5
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	4413      	add	r3, r2
 80024b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024bc:	461a      	mov	r2, r3
 80024be:	2301      	movs	r3, #1
 80024c0:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	212c      	movs	r1, #44	; 0x2c
 80024c8:	fb01 f303 	mul.w	r3, r1, r3
 80024cc:	4413      	add	r3, r2
 80024ce:	333f      	adds	r3, #63	; 0x3f
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d009      	beq.n	80024ea <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	212c      	movs	r1, #44	; 0x2c
 80024dc:	fb01 f303 	mul.w	r3, r1, r3
 80024e0:	4413      	add	r3, r2
 80024e2:	333f      	adds	r3, #63	; 0x3f
 80024e4:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d121      	bne.n	800252e <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	015a      	lsls	r2, r3, #5
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	4413      	add	r3, r2
 80024f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	68fa      	ldr	r2, [r7, #12]
 80024fa:	0151      	lsls	r1, r2, #5
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	440a      	add	r2, r1
 8002500:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002504:	f043 0302 	orr.w	r3, r3, #2
 8002508:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	68fa      	ldr	r2, [r7, #12]
 8002510:	b2d2      	uxtb	r2, r2
 8002512:	4611      	mov	r1, r2
 8002514:	4618      	mov	r0, r3
 8002516:	f003 fcda 	bl	8005ece <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	015a      	lsls	r2, r3, #5
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	4413      	add	r3, r2
 8002522:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002526:	461a      	mov	r2, r3
 8002528:	2310      	movs	r3, #16
 800252a:	6093      	str	r3, [r2, #8]
 800252c:	e066      	b.n	80025fc <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	212c      	movs	r1, #44	; 0x2c
 8002534:	fb01 f303 	mul.w	r3, r1, r3
 8002538:	4413      	add	r3, r2
 800253a:	333f      	adds	r3, #63	; 0x3f
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	2b03      	cmp	r3, #3
 8002540:	d127      	bne.n	8002592 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	015a      	lsls	r2, r3, #5
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	4413      	add	r3, r2
 800254a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	0151      	lsls	r1, r2, #5
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	440a      	add	r2, r1
 8002558:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800255c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002560:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	212c      	movs	r1, #44	; 0x2c
 8002568:	fb01 f303 	mul.w	r3, r1, r3
 800256c:	4413      	add	r3, r2
 800256e:	3360      	adds	r3, #96	; 0x60
 8002570:	2201      	movs	r2, #1
 8002572:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	b2d9      	uxtb	r1, r3
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	202c      	movs	r0, #44	; 0x2c
 800257e:	fb00 f303 	mul.w	r3, r0, r3
 8002582:	4413      	add	r3, r2
 8002584:	3360      	adds	r3, #96	; 0x60
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	461a      	mov	r2, r3
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f008 ff98 	bl	800b4c0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002590:	e034      	b.n	80025fc <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	212c      	movs	r1, #44	; 0x2c
 8002598:	fb01 f303 	mul.w	r3, r1, r3
 800259c:	4413      	add	r3, r2
 800259e:	333f      	adds	r3, #63	; 0x3f
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d12a      	bne.n	80025fc <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	212c      	movs	r1, #44	; 0x2c
 80025ac:	fb01 f303 	mul.w	r3, r1, r3
 80025b0:	4413      	add	r3, r2
 80025b2:	3360      	adds	r3, #96	; 0x60
 80025b4:	2201      	movs	r2, #1
 80025b6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	212c      	movs	r1, #44	; 0x2c
 80025be:	fb01 f303 	mul.w	r3, r1, r3
 80025c2:	4413      	add	r3, r2
 80025c4:	3354      	adds	r3, #84	; 0x54
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	f083 0301 	eor.w	r3, r3, #1
 80025cc:	b2d8      	uxtb	r0, r3
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	212c      	movs	r1, #44	; 0x2c
 80025d4:	fb01 f303 	mul.w	r3, r1, r3
 80025d8:	4413      	add	r3, r2
 80025da:	3354      	adds	r3, #84	; 0x54
 80025dc:	4602      	mov	r2, r0
 80025de:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	b2d9      	uxtb	r1, r3
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	202c      	movs	r0, #44	; 0x2c
 80025ea:	fb00 f303 	mul.w	r3, r0, r3
 80025ee:	4413      	add	r3, r2
 80025f0:	3360      	adds	r3, #96	; 0x60
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	461a      	mov	r2, r3
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f008 ff62 	bl	800b4c0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d12b      	bne.n	800265c <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	212c      	movs	r1, #44	; 0x2c
 800260a:	fb01 f303 	mul.w	r3, r1, r3
 800260e:	4413      	add	r3, r2
 8002610:	3348      	adds	r3, #72	; 0x48
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	6879      	ldr	r1, [r7, #4]
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	202c      	movs	r0, #44	; 0x2c
 800261a:	fb00 f202 	mul.w	r2, r0, r2
 800261e:	440a      	add	r2, r1
 8002620:	3240      	adds	r2, #64	; 0x40
 8002622:	8812      	ldrh	r2, [r2, #0]
 8002624:	fbb3 f3f2 	udiv	r3, r3, r2
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	2b00      	cmp	r3, #0
 800262e:	f000 81be 	beq.w	80029ae <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	212c      	movs	r1, #44	; 0x2c
 8002638:	fb01 f303 	mul.w	r3, r1, r3
 800263c:	4413      	add	r3, r2
 800263e:	3354      	adds	r3, #84	; 0x54
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	f083 0301 	eor.w	r3, r3, #1
 8002646:	b2d8      	uxtb	r0, r3
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	212c      	movs	r1, #44	; 0x2c
 800264e:	fb01 f303 	mul.w	r3, r1, r3
 8002652:	4413      	add	r3, r2
 8002654:	3354      	adds	r3, #84	; 0x54
 8002656:	4602      	mov	r2, r0
 8002658:	701a      	strb	r2, [r3, #0]
}
 800265a:	e1a8      	b.n	80029ae <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	212c      	movs	r1, #44	; 0x2c
 8002662:	fb01 f303 	mul.w	r3, r1, r3
 8002666:	4413      	add	r3, r2
 8002668:	3354      	adds	r3, #84	; 0x54
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	f083 0301 	eor.w	r3, r3, #1
 8002670:	b2d8      	uxtb	r0, r3
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	212c      	movs	r1, #44	; 0x2c
 8002678:	fb01 f303 	mul.w	r3, r1, r3
 800267c:	4413      	add	r3, r2
 800267e:	3354      	adds	r3, #84	; 0x54
 8002680:	4602      	mov	r2, r0
 8002682:	701a      	strb	r2, [r3, #0]
}
 8002684:	e193      	b.n	80029ae <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	015a      	lsls	r2, r3, #5
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	4413      	add	r3, r2
 800268e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b02      	cmp	r3, #2
 800269a:	f040 8106 	bne.w	80028aa <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	015a      	lsls	r2, r3, #5
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	4413      	add	r3, r2
 80026a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	68fa      	ldr	r2, [r7, #12]
 80026ae:	0151      	lsls	r1, r2, #5
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	440a      	add	r2, r1
 80026b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026b8:	f023 0302 	bic.w	r3, r3, #2
 80026bc:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	212c      	movs	r1, #44	; 0x2c
 80026c4:	fb01 f303 	mul.w	r3, r1, r3
 80026c8:	4413      	add	r3, r2
 80026ca:	3361      	adds	r3, #97	; 0x61
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d109      	bne.n	80026e6 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	212c      	movs	r1, #44	; 0x2c
 80026d8:	fb01 f303 	mul.w	r3, r1, r3
 80026dc:	4413      	add	r3, r2
 80026de:	3360      	adds	r3, #96	; 0x60
 80026e0:	2201      	movs	r2, #1
 80026e2:	701a      	strb	r2, [r3, #0]
 80026e4:	e0c9      	b.n	800287a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	212c      	movs	r1, #44	; 0x2c
 80026ec:	fb01 f303 	mul.w	r3, r1, r3
 80026f0:	4413      	add	r3, r2
 80026f2:	3361      	adds	r3, #97	; 0x61
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	2b05      	cmp	r3, #5
 80026f8:	d109      	bne.n	800270e <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	212c      	movs	r1, #44	; 0x2c
 8002700:	fb01 f303 	mul.w	r3, r1, r3
 8002704:	4413      	add	r3, r2
 8002706:	3360      	adds	r3, #96	; 0x60
 8002708:	2205      	movs	r2, #5
 800270a:	701a      	strb	r2, [r3, #0]
 800270c:	e0b5      	b.n	800287a <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	212c      	movs	r1, #44	; 0x2c
 8002714:	fb01 f303 	mul.w	r3, r1, r3
 8002718:	4413      	add	r3, r2
 800271a:	3361      	adds	r3, #97	; 0x61
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	2b06      	cmp	r3, #6
 8002720:	d009      	beq.n	8002736 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	212c      	movs	r1, #44	; 0x2c
 8002728:	fb01 f303 	mul.w	r3, r1, r3
 800272c:	4413      	add	r3, r2
 800272e:	3361      	adds	r3, #97	; 0x61
 8002730:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002732:	2b08      	cmp	r3, #8
 8002734:	d150      	bne.n	80027d8 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	212c      	movs	r1, #44	; 0x2c
 800273c:	fb01 f303 	mul.w	r3, r1, r3
 8002740:	4413      	add	r3, r2
 8002742:	335c      	adds	r3, #92	; 0x5c
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	1c5a      	adds	r2, r3, #1
 8002748:	6879      	ldr	r1, [r7, #4]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	202c      	movs	r0, #44	; 0x2c
 800274e:	fb00 f303 	mul.w	r3, r0, r3
 8002752:	440b      	add	r3, r1
 8002754:	335c      	adds	r3, #92	; 0x5c
 8002756:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	212c      	movs	r1, #44	; 0x2c
 800275e:	fb01 f303 	mul.w	r3, r1, r3
 8002762:	4413      	add	r3, r2
 8002764:	335c      	adds	r3, #92	; 0x5c
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2b02      	cmp	r3, #2
 800276a:	d912      	bls.n	8002792 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	212c      	movs	r1, #44	; 0x2c
 8002772:	fb01 f303 	mul.w	r3, r1, r3
 8002776:	4413      	add	r3, r2
 8002778:	335c      	adds	r3, #92	; 0x5c
 800277a:	2200      	movs	r2, #0
 800277c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	212c      	movs	r1, #44	; 0x2c
 8002784:	fb01 f303 	mul.w	r3, r1, r3
 8002788:	4413      	add	r3, r2
 800278a:	3360      	adds	r3, #96	; 0x60
 800278c:	2204      	movs	r2, #4
 800278e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002790:	e073      	b.n	800287a <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	212c      	movs	r1, #44	; 0x2c
 8002798:	fb01 f303 	mul.w	r3, r1, r3
 800279c:	4413      	add	r3, r2
 800279e:	3360      	adds	r3, #96	; 0x60
 80027a0:	2202      	movs	r2, #2
 80027a2:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	015a      	lsls	r2, r3, #5
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	4413      	add	r3, r2
 80027ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80027ba:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80027c2:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	015a      	lsls	r2, r3, #5
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	4413      	add	r3, r2
 80027cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d0:	461a      	mov	r2, r3
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80027d6:	e050      	b.n	800287a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	212c      	movs	r1, #44	; 0x2c
 80027de:	fb01 f303 	mul.w	r3, r1, r3
 80027e2:	4413      	add	r3, r2
 80027e4:	3361      	adds	r3, #97	; 0x61
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	2b03      	cmp	r3, #3
 80027ea:	d122      	bne.n	8002832 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	212c      	movs	r1, #44	; 0x2c
 80027f2:	fb01 f303 	mul.w	r3, r1, r3
 80027f6:	4413      	add	r3, r2
 80027f8:	3360      	adds	r3, #96	; 0x60
 80027fa:	2202      	movs	r2, #2
 80027fc:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	015a      	lsls	r2, r3, #5
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	4413      	add	r3, r2
 8002806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002814:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800281c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	015a      	lsls	r2, r3, #5
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	4413      	add	r3, r2
 8002826:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800282a:	461a      	mov	r2, r3
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	6013      	str	r3, [r2, #0]
 8002830:	e023      	b.n	800287a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	212c      	movs	r1, #44	; 0x2c
 8002838:	fb01 f303 	mul.w	r3, r1, r3
 800283c:	4413      	add	r3, r2
 800283e:	3361      	adds	r3, #97	; 0x61
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	2b07      	cmp	r3, #7
 8002844:	d119      	bne.n	800287a <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	212c      	movs	r1, #44	; 0x2c
 800284c:	fb01 f303 	mul.w	r3, r1, r3
 8002850:	4413      	add	r3, r2
 8002852:	335c      	adds	r3, #92	; 0x5c
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	1c5a      	adds	r2, r3, #1
 8002858:	6879      	ldr	r1, [r7, #4]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	202c      	movs	r0, #44	; 0x2c
 800285e:	fb00 f303 	mul.w	r3, r0, r3
 8002862:	440b      	add	r3, r1
 8002864:	335c      	adds	r3, #92	; 0x5c
 8002866:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	212c      	movs	r1, #44	; 0x2c
 800286e:	fb01 f303 	mul.w	r3, r1, r3
 8002872:	4413      	add	r3, r2
 8002874:	3360      	adds	r3, #96	; 0x60
 8002876:	2204      	movs	r2, #4
 8002878:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	015a      	lsls	r2, r3, #5
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	4413      	add	r3, r2
 8002882:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002886:	461a      	mov	r2, r3
 8002888:	2302      	movs	r3, #2
 800288a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	b2d9      	uxtb	r1, r3
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	202c      	movs	r0, #44	; 0x2c
 8002896:	fb00 f303 	mul.w	r3, r0, r3
 800289a:	4413      	add	r3, r2
 800289c:	3360      	adds	r3, #96	; 0x60
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	461a      	mov	r2, r3
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f008 fe0c 	bl	800b4c0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80028a8:	e081      	b.n	80029ae <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	015a      	lsls	r2, r3, #5
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	4413      	add	r3, r2
 80028b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f003 0310 	and.w	r3, r3, #16
 80028bc:	2b10      	cmp	r3, #16
 80028be:	d176      	bne.n	80029ae <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	212c      	movs	r1, #44	; 0x2c
 80028c6:	fb01 f303 	mul.w	r3, r1, r3
 80028ca:	4413      	add	r3, r2
 80028cc:	333f      	adds	r3, #63	; 0x3f
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	2b03      	cmp	r3, #3
 80028d2:	d121      	bne.n	8002918 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	212c      	movs	r1, #44	; 0x2c
 80028da:	fb01 f303 	mul.w	r3, r1, r3
 80028de:	4413      	add	r3, r2
 80028e0:	335c      	adds	r3, #92	; 0x5c
 80028e2:	2200      	movs	r2, #0
 80028e4:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	015a      	lsls	r2, r3, #5
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	4413      	add	r3, r2
 80028ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	0151      	lsls	r1, r2, #5
 80028f8:	693a      	ldr	r2, [r7, #16]
 80028fa:	440a      	add	r2, r1
 80028fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002900:	f043 0302 	orr.w	r3, r3, #2
 8002904:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	b2d2      	uxtb	r2, r2
 800290e:	4611      	mov	r1, r2
 8002910:	4618      	mov	r0, r3
 8002912:	f003 fadc 	bl	8005ece <USB_HC_Halt>
 8002916:	e041      	b.n	800299c <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	212c      	movs	r1, #44	; 0x2c
 800291e:	fb01 f303 	mul.w	r3, r1, r3
 8002922:	4413      	add	r3, r2
 8002924:	333f      	adds	r3, #63	; 0x3f
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d009      	beq.n	8002940 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	212c      	movs	r1, #44	; 0x2c
 8002932:	fb01 f303 	mul.w	r3, r1, r3
 8002936:	4413      	add	r3, r2
 8002938:	333f      	adds	r3, #63	; 0x3f
 800293a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800293c:	2b02      	cmp	r3, #2
 800293e:	d12d      	bne.n	800299c <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	212c      	movs	r1, #44	; 0x2c
 8002946:	fb01 f303 	mul.w	r3, r1, r3
 800294a:	4413      	add	r3, r2
 800294c:	335c      	adds	r3, #92	; 0x5c
 800294e:	2200      	movs	r2, #0
 8002950:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d120      	bne.n	800299c <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	212c      	movs	r1, #44	; 0x2c
 8002960:	fb01 f303 	mul.w	r3, r1, r3
 8002964:	4413      	add	r3, r2
 8002966:	3361      	adds	r3, #97	; 0x61
 8002968:	2203      	movs	r2, #3
 800296a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	015a      	lsls	r2, r3, #5
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	4413      	add	r3, r2
 8002974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	0151      	lsls	r1, r2, #5
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	440a      	add	r2, r1
 8002982:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002986:	f043 0302 	orr.w	r3, r3, #2
 800298a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	b2d2      	uxtb	r2, r2
 8002994:	4611      	mov	r1, r2
 8002996:	4618      	mov	r0, r3
 8002998:	f003 fa99 	bl	8005ece <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	015a      	lsls	r2, r3, #5
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	4413      	add	r3, r2
 80029a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a8:	461a      	mov	r2, r3
 80029aa:	2310      	movs	r3, #16
 80029ac:	6093      	str	r3, [r2, #8]
}
 80029ae:	bf00      	nop
 80029b0:	3718      	adds	r7, #24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b088      	sub	sp, #32
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
 80029be:	460b      	mov	r3, r1
 80029c0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80029cc:	78fb      	ldrb	r3, [r7, #3]
 80029ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	015a      	lsls	r2, r3, #5
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	4413      	add	r3, r2
 80029d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f003 0304 	and.w	r3, r3, #4
 80029e2:	2b04      	cmp	r3, #4
 80029e4:	d119      	bne.n	8002a1a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	015a      	lsls	r2, r3, #5
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	4413      	add	r3, r2
 80029ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f2:	461a      	mov	r2, r3
 80029f4:	2304      	movs	r3, #4
 80029f6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	015a      	lsls	r2, r3, #5
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	4413      	add	r3, r2
 8002a00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	697a      	ldr	r2, [r7, #20]
 8002a08:	0151      	lsls	r1, r2, #5
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	440a      	add	r2, r1
 8002a0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a12:	f043 0302 	orr.w	r3, r3, #2
 8002a16:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002a18:	e3ca      	b.n	80031b0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	015a      	lsls	r2, r3, #5
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	4413      	add	r3, r2
 8002a22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f003 0320 	and.w	r3, r3, #32
 8002a2c:	2b20      	cmp	r3, #32
 8002a2e:	d13e      	bne.n	8002aae <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	015a      	lsls	r2, r3, #5
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	4413      	add	r3, r2
 8002a38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	2320      	movs	r3, #32
 8002a40:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	212c      	movs	r1, #44	; 0x2c
 8002a48:	fb01 f303 	mul.w	r3, r1, r3
 8002a4c:	4413      	add	r3, r2
 8002a4e:	333d      	adds	r3, #61	; 0x3d
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	f040 83ac 	bne.w	80031b0 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	212c      	movs	r1, #44	; 0x2c
 8002a5e:	fb01 f303 	mul.w	r3, r1, r3
 8002a62:	4413      	add	r3, r2
 8002a64:	333d      	adds	r3, #61	; 0x3d
 8002a66:	2200      	movs	r2, #0
 8002a68:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	212c      	movs	r1, #44	; 0x2c
 8002a70:	fb01 f303 	mul.w	r3, r1, r3
 8002a74:	4413      	add	r3, r2
 8002a76:	3360      	adds	r3, #96	; 0x60
 8002a78:	2202      	movs	r2, #2
 8002a7a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	015a      	lsls	r2, r3, #5
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	4413      	add	r3, r2
 8002a84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	697a      	ldr	r2, [r7, #20]
 8002a8c:	0151      	lsls	r1, r2, #5
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	440a      	add	r2, r1
 8002a92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a96:	f043 0302 	orr.w	r3, r3, #2
 8002a9a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	697a      	ldr	r2, [r7, #20]
 8002aa2:	b2d2      	uxtb	r2, r2
 8002aa4:	4611      	mov	r1, r2
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f003 fa11 	bl	8005ece <USB_HC_Halt>
}
 8002aac:	e380      	b.n	80031b0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	015a      	lsls	r2, r3, #5
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ac0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ac4:	d122      	bne.n	8002b0c <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	015a      	lsls	r2, r3, #5
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	4413      	add	r3, r2
 8002ace:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	697a      	ldr	r2, [r7, #20]
 8002ad6:	0151      	lsls	r1, r2, #5
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	440a      	add	r2, r1
 8002adc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ae0:	f043 0302 	orr.w	r3, r3, #2
 8002ae4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	b2d2      	uxtb	r2, r2
 8002aee:	4611      	mov	r1, r2
 8002af0:	4618      	mov	r0, r3
 8002af2:	f003 f9ec 	bl	8005ece <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	015a      	lsls	r2, r3, #5
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	4413      	add	r3, r2
 8002afe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b02:	461a      	mov	r2, r3
 8002b04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b08:	6093      	str	r3, [r2, #8]
}
 8002b0a:	e351      	b.n	80031b0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	015a      	lsls	r2, r3, #5
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	4413      	add	r3, r2
 8002b14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d150      	bne.n	8002bc4 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	212c      	movs	r1, #44	; 0x2c
 8002b28:	fb01 f303 	mul.w	r3, r1, r3
 8002b2c:	4413      	add	r3, r2
 8002b2e:	335c      	adds	r3, #92	; 0x5c
 8002b30:	2200      	movs	r2, #0
 8002b32:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	015a      	lsls	r2, r3, #5
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b46:	2b40      	cmp	r3, #64	; 0x40
 8002b48:	d111      	bne.n	8002b6e <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	212c      	movs	r1, #44	; 0x2c
 8002b50:	fb01 f303 	mul.w	r3, r1, r3
 8002b54:	4413      	add	r3, r2
 8002b56:	333d      	adds	r3, #61	; 0x3d
 8002b58:	2201      	movs	r2, #1
 8002b5a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	015a      	lsls	r2, r3, #5
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	4413      	add	r3, r2
 8002b64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b68:	461a      	mov	r2, r3
 8002b6a:	2340      	movs	r3, #64	; 0x40
 8002b6c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	015a      	lsls	r2, r3, #5
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	4413      	add	r3, r2
 8002b76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	697a      	ldr	r2, [r7, #20]
 8002b7e:	0151      	lsls	r1, r2, #5
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	440a      	add	r2, r1
 8002b84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b88:	f043 0302 	orr.w	r3, r3, #2
 8002b8c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	b2d2      	uxtb	r2, r2
 8002b96:	4611      	mov	r1, r2
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f003 f998 	bl	8005ece <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	015a      	lsls	r2, r3, #5
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002baa:	461a      	mov	r2, r3
 8002bac:	2301      	movs	r3, #1
 8002bae:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	212c      	movs	r1, #44	; 0x2c
 8002bb6:	fb01 f303 	mul.w	r3, r1, r3
 8002bba:	4413      	add	r3, r2
 8002bbc:	3361      	adds	r3, #97	; 0x61
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	701a      	strb	r2, [r3, #0]
}
 8002bc2:	e2f5      	b.n	80031b0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	015a      	lsls	r2, r3, #5
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	4413      	add	r3, r2
 8002bcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd6:	2b40      	cmp	r3, #64	; 0x40
 8002bd8:	d13c      	bne.n	8002c54 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	212c      	movs	r1, #44	; 0x2c
 8002be0:	fb01 f303 	mul.w	r3, r1, r3
 8002be4:	4413      	add	r3, r2
 8002be6:	3361      	adds	r3, #97	; 0x61
 8002be8:	2204      	movs	r2, #4
 8002bea:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	212c      	movs	r1, #44	; 0x2c
 8002bf2:	fb01 f303 	mul.w	r3, r1, r3
 8002bf6:	4413      	add	r3, r2
 8002bf8:	333d      	adds	r3, #61	; 0x3d
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	212c      	movs	r1, #44	; 0x2c
 8002c04:	fb01 f303 	mul.w	r3, r1, r3
 8002c08:	4413      	add	r3, r2
 8002c0a:	335c      	adds	r3, #92	; 0x5c
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	015a      	lsls	r2, r3, #5
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	4413      	add	r3, r2
 8002c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	697a      	ldr	r2, [r7, #20]
 8002c20:	0151      	lsls	r1, r2, #5
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	440a      	add	r2, r1
 8002c26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c2a:	f043 0302 	orr.w	r3, r3, #2
 8002c2e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	697a      	ldr	r2, [r7, #20]
 8002c36:	b2d2      	uxtb	r2, r2
 8002c38:	4611      	mov	r1, r2
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f003 f947 	bl	8005ece <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	015a      	lsls	r2, r3, #5
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	4413      	add	r3, r2
 8002c48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	2340      	movs	r3, #64	; 0x40
 8002c50:	6093      	str	r3, [r2, #8]
}
 8002c52:	e2ad      	b.n	80031b0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	015a      	lsls	r2, r3, #5
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f003 0308 	and.w	r3, r3, #8
 8002c66:	2b08      	cmp	r3, #8
 8002c68:	d12a      	bne.n	8002cc0 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	015a      	lsls	r2, r3, #5
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	4413      	add	r3, r2
 8002c72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c76:	461a      	mov	r2, r3
 8002c78:	2308      	movs	r3, #8
 8002c7a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	015a      	lsls	r2, r3, #5
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	4413      	add	r3, r2
 8002c84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	697a      	ldr	r2, [r7, #20]
 8002c8c:	0151      	lsls	r1, r2, #5
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	440a      	add	r2, r1
 8002c92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c96:	f043 0302 	orr.w	r3, r3, #2
 8002c9a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	697a      	ldr	r2, [r7, #20]
 8002ca2:	b2d2      	uxtb	r2, r2
 8002ca4:	4611      	mov	r1, r2
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f003 f911 	bl	8005ece <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	212c      	movs	r1, #44	; 0x2c
 8002cb2:	fb01 f303 	mul.w	r3, r1, r3
 8002cb6:	4413      	add	r3, r2
 8002cb8:	3361      	adds	r3, #97	; 0x61
 8002cba:	2205      	movs	r2, #5
 8002cbc:	701a      	strb	r2, [r3, #0]
}
 8002cbe:	e277      	b.n	80031b0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	015a      	lsls	r2, r3, #5
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f003 0310 	and.w	r3, r3, #16
 8002cd2:	2b10      	cmp	r3, #16
 8002cd4:	d150      	bne.n	8002d78 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	212c      	movs	r1, #44	; 0x2c
 8002cdc:	fb01 f303 	mul.w	r3, r1, r3
 8002ce0:	4413      	add	r3, r2
 8002ce2:	335c      	adds	r3, #92	; 0x5c
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	212c      	movs	r1, #44	; 0x2c
 8002cee:	fb01 f303 	mul.w	r3, r1, r3
 8002cf2:	4413      	add	r3, r2
 8002cf4:	3361      	adds	r3, #97	; 0x61
 8002cf6:	2203      	movs	r2, #3
 8002cf8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	212c      	movs	r1, #44	; 0x2c
 8002d00:	fb01 f303 	mul.w	r3, r1, r3
 8002d04:	4413      	add	r3, r2
 8002d06:	333d      	adds	r3, #61	; 0x3d
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d112      	bne.n	8002d34 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	212c      	movs	r1, #44	; 0x2c
 8002d14:	fb01 f303 	mul.w	r3, r1, r3
 8002d18:	4413      	add	r3, r2
 8002d1a:	333c      	adds	r3, #60	; 0x3c
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d108      	bne.n	8002d34 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	212c      	movs	r1, #44	; 0x2c
 8002d28:	fb01 f303 	mul.w	r3, r1, r3
 8002d2c:	4413      	add	r3, r2
 8002d2e:	333d      	adds	r3, #61	; 0x3d
 8002d30:	2201      	movs	r2, #1
 8002d32:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	015a      	lsls	r2, r3, #5
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	0151      	lsls	r1, r2, #5
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	440a      	add	r2, r1
 8002d4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d4e:	f043 0302 	orr.w	r3, r3, #2
 8002d52:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	697a      	ldr	r2, [r7, #20]
 8002d5a:	b2d2      	uxtb	r2, r2
 8002d5c:	4611      	mov	r1, r2
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f003 f8b5 	bl	8005ece <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	015a      	lsls	r2, r3, #5
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d70:	461a      	mov	r2, r3
 8002d72:	2310      	movs	r3, #16
 8002d74:	6093      	str	r3, [r2, #8]
}
 8002d76:	e21b      	b.n	80031b0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	015a      	lsls	r2, r3, #5
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	4413      	add	r3, r2
 8002d80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d8a:	2b80      	cmp	r3, #128	; 0x80
 8002d8c:	d174      	bne.n	8002e78 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d121      	bne.n	8002dda <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	212c      	movs	r1, #44	; 0x2c
 8002d9c:	fb01 f303 	mul.w	r3, r1, r3
 8002da0:	4413      	add	r3, r2
 8002da2:	3361      	adds	r3, #97	; 0x61
 8002da4:	2206      	movs	r2, #6
 8002da6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	015a      	lsls	r2, r3, #5
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	4413      	add	r3, r2
 8002db0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	697a      	ldr	r2, [r7, #20]
 8002db8:	0151      	lsls	r1, r2, #5
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	440a      	add	r2, r1
 8002dbe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002dc2:	f043 0302 	orr.w	r3, r3, #2
 8002dc6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	697a      	ldr	r2, [r7, #20]
 8002dce:	b2d2      	uxtb	r2, r2
 8002dd0:	4611      	mov	r1, r2
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f003 f87b 	bl	8005ece <USB_HC_Halt>
 8002dd8:	e044      	b.n	8002e64 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	212c      	movs	r1, #44	; 0x2c
 8002de0:	fb01 f303 	mul.w	r3, r1, r3
 8002de4:	4413      	add	r3, r2
 8002de6:	335c      	adds	r3, #92	; 0x5c
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	1c5a      	adds	r2, r3, #1
 8002dec:	6879      	ldr	r1, [r7, #4]
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	202c      	movs	r0, #44	; 0x2c
 8002df2:	fb00 f303 	mul.w	r3, r0, r3
 8002df6:	440b      	add	r3, r1
 8002df8:	335c      	adds	r3, #92	; 0x5c
 8002dfa:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	212c      	movs	r1, #44	; 0x2c
 8002e02:	fb01 f303 	mul.w	r3, r1, r3
 8002e06:	4413      	add	r3, r2
 8002e08:	335c      	adds	r3, #92	; 0x5c
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d920      	bls.n	8002e52 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	212c      	movs	r1, #44	; 0x2c
 8002e16:	fb01 f303 	mul.w	r3, r1, r3
 8002e1a:	4413      	add	r3, r2
 8002e1c:	335c      	adds	r3, #92	; 0x5c
 8002e1e:	2200      	movs	r2, #0
 8002e20:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	212c      	movs	r1, #44	; 0x2c
 8002e28:	fb01 f303 	mul.w	r3, r1, r3
 8002e2c:	4413      	add	r3, r2
 8002e2e:	3360      	adds	r3, #96	; 0x60
 8002e30:	2204      	movs	r2, #4
 8002e32:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	b2d9      	uxtb	r1, r3
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	202c      	movs	r0, #44	; 0x2c
 8002e3e:	fb00 f303 	mul.w	r3, r0, r3
 8002e42:	4413      	add	r3, r2
 8002e44:	3360      	adds	r3, #96	; 0x60
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	461a      	mov	r2, r3
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f008 fb38 	bl	800b4c0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002e50:	e008      	b.n	8002e64 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	212c      	movs	r1, #44	; 0x2c
 8002e58:	fb01 f303 	mul.w	r3, r1, r3
 8002e5c:	4413      	add	r3, r2
 8002e5e:	3360      	adds	r3, #96	; 0x60
 8002e60:	2202      	movs	r2, #2
 8002e62:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	015a      	lsls	r2, r3, #5
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e70:	461a      	mov	r2, r3
 8002e72:	2380      	movs	r3, #128	; 0x80
 8002e74:	6093      	str	r3, [r2, #8]
}
 8002e76:	e19b      	b.n	80031b0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	015a      	lsls	r2, r3, #5
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	4413      	add	r3, r2
 8002e80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e8e:	d134      	bne.n	8002efa <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	015a      	lsls	r2, r3, #5
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	4413      	add	r3, r2
 8002e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	0151      	lsls	r1, r2, #5
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	440a      	add	r2, r1
 8002ea6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002eaa:	f043 0302 	orr.w	r3, r3, #2
 8002eae:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	697a      	ldr	r2, [r7, #20]
 8002eb6:	b2d2      	uxtb	r2, r2
 8002eb8:	4611      	mov	r1, r2
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f003 f807 	bl	8005ece <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	015a      	lsls	r2, r3, #5
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ecc:	461a      	mov	r2, r3
 8002ece:	2310      	movs	r3, #16
 8002ed0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	015a      	lsls	r2, r3, #5
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	4413      	add	r3, r2
 8002eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ede:	461a      	mov	r2, r3
 8002ee0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ee4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	212c      	movs	r1, #44	; 0x2c
 8002eec:	fb01 f303 	mul.w	r3, r1, r3
 8002ef0:	4413      	add	r3, r2
 8002ef2:	3361      	adds	r3, #97	; 0x61
 8002ef4:	2208      	movs	r2, #8
 8002ef6:	701a      	strb	r2, [r3, #0]
}
 8002ef8:	e15a      	b.n	80031b0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	015a      	lsls	r2, r3, #5
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	4413      	add	r3, r2
 8002f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	f040 814f 	bne.w	80031b0 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	015a      	lsls	r2, r3, #5
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	4413      	add	r3, r2
 8002f1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	697a      	ldr	r2, [r7, #20]
 8002f22:	0151      	lsls	r1, r2, #5
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	440a      	add	r2, r1
 8002f28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f2c:	f023 0302 	bic.w	r3, r3, #2
 8002f30:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	212c      	movs	r1, #44	; 0x2c
 8002f38:	fb01 f303 	mul.w	r3, r1, r3
 8002f3c:	4413      	add	r3, r2
 8002f3e:	3361      	adds	r3, #97	; 0x61
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d17d      	bne.n	8003042 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	212c      	movs	r1, #44	; 0x2c
 8002f4c:	fb01 f303 	mul.w	r3, r1, r3
 8002f50:	4413      	add	r3, r2
 8002f52:	3360      	adds	r3, #96	; 0x60
 8002f54:	2201      	movs	r2, #1
 8002f56:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	212c      	movs	r1, #44	; 0x2c
 8002f5e:	fb01 f303 	mul.w	r3, r1, r3
 8002f62:	4413      	add	r3, r2
 8002f64:	333f      	adds	r3, #63	; 0x3f
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d00a      	beq.n	8002f82 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	212c      	movs	r1, #44	; 0x2c
 8002f72:	fb01 f303 	mul.w	r3, r1, r3
 8002f76:	4413      	add	r3, r2
 8002f78:	333f      	adds	r3, #63	; 0x3f
 8002f7a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002f7c:	2b03      	cmp	r3, #3
 8002f7e:	f040 8100 	bne.w	8003182 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d113      	bne.n	8002fb2 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	212c      	movs	r1, #44	; 0x2c
 8002f90:	fb01 f303 	mul.w	r3, r1, r3
 8002f94:	4413      	add	r3, r2
 8002f96:	3355      	adds	r3, #85	; 0x55
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	f083 0301 	eor.w	r3, r3, #1
 8002f9e:	b2d8      	uxtb	r0, r3
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	212c      	movs	r1, #44	; 0x2c
 8002fa6:	fb01 f303 	mul.w	r3, r1, r3
 8002faa:	4413      	add	r3, r2
 8002fac:	3355      	adds	r3, #85	; 0x55
 8002fae:	4602      	mov	r2, r0
 8002fb0:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	f040 80e3 	bne.w	8003182 <HCD_HC_OUT_IRQHandler+0x7cc>
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	212c      	movs	r1, #44	; 0x2c
 8002fc2:	fb01 f303 	mul.w	r3, r1, r3
 8002fc6:	4413      	add	r3, r2
 8002fc8:	334c      	adds	r3, #76	; 0x4c
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	f000 80d8 	beq.w	8003182 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	212c      	movs	r1, #44	; 0x2c
 8002fd8:	fb01 f303 	mul.w	r3, r1, r3
 8002fdc:	4413      	add	r3, r2
 8002fde:	334c      	adds	r3, #76	; 0x4c
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	6879      	ldr	r1, [r7, #4]
 8002fe4:	697a      	ldr	r2, [r7, #20]
 8002fe6:	202c      	movs	r0, #44	; 0x2c
 8002fe8:	fb00 f202 	mul.w	r2, r0, r2
 8002fec:	440a      	add	r2, r1
 8002fee:	3240      	adds	r2, #64	; 0x40
 8002ff0:	8812      	ldrh	r2, [r2, #0]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	6879      	ldr	r1, [r7, #4]
 8002ff8:	697a      	ldr	r2, [r7, #20]
 8002ffa:	202c      	movs	r0, #44	; 0x2c
 8002ffc:	fb00 f202 	mul.w	r2, r0, r2
 8003000:	440a      	add	r2, r1
 8003002:	3240      	adds	r2, #64	; 0x40
 8003004:	8812      	ldrh	r2, [r2, #0]
 8003006:	fbb3 f3f2 	udiv	r3, r3, r2
 800300a:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b00      	cmp	r3, #0
 8003014:	f000 80b5 	beq.w	8003182 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	212c      	movs	r1, #44	; 0x2c
 800301e:	fb01 f303 	mul.w	r3, r1, r3
 8003022:	4413      	add	r3, r2
 8003024:	3355      	adds	r3, #85	; 0x55
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	f083 0301 	eor.w	r3, r3, #1
 800302c:	b2d8      	uxtb	r0, r3
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	212c      	movs	r1, #44	; 0x2c
 8003034:	fb01 f303 	mul.w	r3, r1, r3
 8003038:	4413      	add	r3, r2
 800303a:	3355      	adds	r3, #85	; 0x55
 800303c:	4602      	mov	r2, r0
 800303e:	701a      	strb	r2, [r3, #0]
 8003040:	e09f      	b.n	8003182 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	212c      	movs	r1, #44	; 0x2c
 8003048:	fb01 f303 	mul.w	r3, r1, r3
 800304c:	4413      	add	r3, r2
 800304e:	3361      	adds	r3, #97	; 0x61
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	2b03      	cmp	r3, #3
 8003054:	d109      	bne.n	800306a <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	212c      	movs	r1, #44	; 0x2c
 800305c:	fb01 f303 	mul.w	r3, r1, r3
 8003060:	4413      	add	r3, r2
 8003062:	3360      	adds	r3, #96	; 0x60
 8003064:	2202      	movs	r2, #2
 8003066:	701a      	strb	r2, [r3, #0]
 8003068:	e08b      	b.n	8003182 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	212c      	movs	r1, #44	; 0x2c
 8003070:	fb01 f303 	mul.w	r3, r1, r3
 8003074:	4413      	add	r3, r2
 8003076:	3361      	adds	r3, #97	; 0x61
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	2b04      	cmp	r3, #4
 800307c:	d109      	bne.n	8003092 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	212c      	movs	r1, #44	; 0x2c
 8003084:	fb01 f303 	mul.w	r3, r1, r3
 8003088:	4413      	add	r3, r2
 800308a:	3360      	adds	r3, #96	; 0x60
 800308c:	2202      	movs	r2, #2
 800308e:	701a      	strb	r2, [r3, #0]
 8003090:	e077      	b.n	8003182 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	212c      	movs	r1, #44	; 0x2c
 8003098:	fb01 f303 	mul.w	r3, r1, r3
 800309c:	4413      	add	r3, r2
 800309e:	3361      	adds	r3, #97	; 0x61
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	2b05      	cmp	r3, #5
 80030a4:	d109      	bne.n	80030ba <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	212c      	movs	r1, #44	; 0x2c
 80030ac:	fb01 f303 	mul.w	r3, r1, r3
 80030b0:	4413      	add	r3, r2
 80030b2:	3360      	adds	r3, #96	; 0x60
 80030b4:	2205      	movs	r2, #5
 80030b6:	701a      	strb	r2, [r3, #0]
 80030b8:	e063      	b.n	8003182 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	212c      	movs	r1, #44	; 0x2c
 80030c0:	fb01 f303 	mul.w	r3, r1, r3
 80030c4:	4413      	add	r3, r2
 80030c6:	3361      	adds	r3, #97	; 0x61
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	2b06      	cmp	r3, #6
 80030cc:	d009      	beq.n	80030e2 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	212c      	movs	r1, #44	; 0x2c
 80030d4:	fb01 f303 	mul.w	r3, r1, r3
 80030d8:	4413      	add	r3, r2
 80030da:	3361      	adds	r3, #97	; 0x61
 80030dc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80030de:	2b08      	cmp	r3, #8
 80030e0:	d14f      	bne.n	8003182 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	212c      	movs	r1, #44	; 0x2c
 80030e8:	fb01 f303 	mul.w	r3, r1, r3
 80030ec:	4413      	add	r3, r2
 80030ee:	335c      	adds	r3, #92	; 0x5c
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	1c5a      	adds	r2, r3, #1
 80030f4:	6879      	ldr	r1, [r7, #4]
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	202c      	movs	r0, #44	; 0x2c
 80030fa:	fb00 f303 	mul.w	r3, r0, r3
 80030fe:	440b      	add	r3, r1
 8003100:	335c      	adds	r3, #92	; 0x5c
 8003102:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	212c      	movs	r1, #44	; 0x2c
 800310a:	fb01 f303 	mul.w	r3, r1, r3
 800310e:	4413      	add	r3, r2
 8003110:	335c      	adds	r3, #92	; 0x5c
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2b02      	cmp	r3, #2
 8003116:	d912      	bls.n	800313e <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	212c      	movs	r1, #44	; 0x2c
 800311e:	fb01 f303 	mul.w	r3, r1, r3
 8003122:	4413      	add	r3, r2
 8003124:	335c      	adds	r3, #92	; 0x5c
 8003126:	2200      	movs	r2, #0
 8003128:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	212c      	movs	r1, #44	; 0x2c
 8003130:	fb01 f303 	mul.w	r3, r1, r3
 8003134:	4413      	add	r3, r2
 8003136:	3360      	adds	r3, #96	; 0x60
 8003138:	2204      	movs	r2, #4
 800313a:	701a      	strb	r2, [r3, #0]
 800313c:	e021      	b.n	8003182 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	212c      	movs	r1, #44	; 0x2c
 8003144:	fb01 f303 	mul.w	r3, r1, r3
 8003148:	4413      	add	r3, r2
 800314a:	3360      	adds	r3, #96	; 0x60
 800314c:	2202      	movs	r2, #2
 800314e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	015a      	lsls	r2, r3, #5
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	4413      	add	r3, r2
 8003158:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003166:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800316e:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	015a      	lsls	r2, r3, #5
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	4413      	add	r3, r2
 8003178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800317c:	461a      	mov	r2, r3
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	015a      	lsls	r2, r3, #5
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	4413      	add	r3, r2
 800318a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800318e:	461a      	mov	r2, r3
 8003190:	2302      	movs	r3, #2
 8003192:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	b2d9      	uxtb	r1, r3
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	202c      	movs	r0, #44	; 0x2c
 800319e:	fb00 f303 	mul.w	r3, r0, r3
 80031a2:	4413      	add	r3, r2
 80031a4:	3360      	adds	r3, #96	; 0x60
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	461a      	mov	r2, r3
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f008 f988 	bl	800b4c0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80031b0:	bf00      	nop
 80031b2:	3720      	adds	r7, #32
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b08a      	sub	sp, #40	; 0x28
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c8:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	6a1b      	ldr	r3, [r3, #32]
 80031d0:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	f003 030f 	and.w	r3, r3, #15
 80031d8:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	0c5b      	lsrs	r3, r3, #17
 80031de:	f003 030f 	and.w	r3, r3, #15
 80031e2:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	091b      	lsrs	r3, r3, #4
 80031e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031ec:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d004      	beq.n	80031fe <HCD_RXQLVL_IRQHandler+0x46>
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	2b05      	cmp	r3, #5
 80031f8:	f000 80a9 	beq.w	800334e <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80031fc:	e0aa      	b.n	8003354 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	2b00      	cmp	r3, #0
 8003202:	f000 80a6 	beq.w	8003352 <HCD_RXQLVL_IRQHandler+0x19a>
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	212c      	movs	r1, #44	; 0x2c
 800320c:	fb01 f303 	mul.w	r3, r1, r3
 8003210:	4413      	add	r3, r2
 8003212:	3344      	adds	r3, #68	; 0x44
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2b00      	cmp	r3, #0
 8003218:	f000 809b 	beq.w	8003352 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	212c      	movs	r1, #44	; 0x2c
 8003222:	fb01 f303 	mul.w	r3, r1, r3
 8003226:	4413      	add	r3, r2
 8003228:	3350      	adds	r3, #80	; 0x50
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	441a      	add	r2, r3
 8003230:	6879      	ldr	r1, [r7, #4]
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	202c      	movs	r0, #44	; 0x2c
 8003236:	fb00 f303 	mul.w	r3, r0, r3
 800323a:	440b      	add	r3, r1
 800323c:	334c      	adds	r3, #76	; 0x4c
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	429a      	cmp	r2, r3
 8003242:	d87a      	bhi.n	800333a <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6818      	ldr	r0, [r3, #0]
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	212c      	movs	r1, #44	; 0x2c
 800324e:	fb01 f303 	mul.w	r3, r1, r3
 8003252:	4413      	add	r3, r2
 8003254:	3344      	adds	r3, #68	; 0x44
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	b292      	uxth	r2, r2
 800325c:	4619      	mov	r1, r3
 800325e:	f002 f9af 	bl	80055c0 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	212c      	movs	r1, #44	; 0x2c
 8003268:	fb01 f303 	mul.w	r3, r1, r3
 800326c:	4413      	add	r3, r2
 800326e:	3344      	adds	r3, #68	; 0x44
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	441a      	add	r2, r3
 8003276:	6879      	ldr	r1, [r7, #4]
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	202c      	movs	r0, #44	; 0x2c
 800327c:	fb00 f303 	mul.w	r3, r0, r3
 8003280:	440b      	add	r3, r1
 8003282:	3344      	adds	r3, #68	; 0x44
 8003284:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	212c      	movs	r1, #44	; 0x2c
 800328c:	fb01 f303 	mul.w	r3, r1, r3
 8003290:	4413      	add	r3, r2
 8003292:	3350      	adds	r3, #80	; 0x50
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	441a      	add	r2, r3
 800329a:	6879      	ldr	r1, [r7, #4]
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	202c      	movs	r0, #44	; 0x2c
 80032a0:	fb00 f303 	mul.w	r3, r0, r3
 80032a4:	440b      	add	r3, r1
 80032a6:	3350      	adds	r3, #80	; 0x50
 80032a8:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	015a      	lsls	r2, r3, #5
 80032ae:	6a3b      	ldr	r3, [r7, #32]
 80032b0:	4413      	add	r3, r2
 80032b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032b6:	691b      	ldr	r3, [r3, #16]
 80032b8:	0cdb      	lsrs	r3, r3, #19
 80032ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032be:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	212c      	movs	r1, #44	; 0x2c
 80032c6:	fb01 f303 	mul.w	r3, r1, r3
 80032ca:	4413      	add	r3, r2
 80032cc:	3340      	adds	r3, #64	; 0x40
 80032ce:	881b      	ldrh	r3, [r3, #0]
 80032d0:	461a      	mov	r2, r3
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d13c      	bne.n	8003352 <HCD_RXQLVL_IRQHandler+0x19a>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d039      	beq.n	8003352 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	015a      	lsls	r2, r3, #5
 80032e2:	6a3b      	ldr	r3, [r7, #32]
 80032e4:	4413      	add	r3, r2
 80032e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80032f4:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80032fc:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	015a      	lsls	r2, r3, #5
 8003302:	6a3b      	ldr	r3, [r7, #32]
 8003304:	4413      	add	r3, r2
 8003306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800330a:	461a      	mov	r2, r3
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	212c      	movs	r1, #44	; 0x2c
 8003316:	fb01 f303 	mul.w	r3, r1, r3
 800331a:	4413      	add	r3, r2
 800331c:	3354      	adds	r3, #84	; 0x54
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	f083 0301 	eor.w	r3, r3, #1
 8003324:	b2d8      	uxtb	r0, r3
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	212c      	movs	r1, #44	; 0x2c
 800332c:	fb01 f303 	mul.w	r3, r1, r3
 8003330:	4413      	add	r3, r2
 8003332:	3354      	adds	r3, #84	; 0x54
 8003334:	4602      	mov	r2, r0
 8003336:	701a      	strb	r2, [r3, #0]
      break;
 8003338:	e00b      	b.n	8003352 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	212c      	movs	r1, #44	; 0x2c
 8003340:	fb01 f303 	mul.w	r3, r1, r3
 8003344:	4413      	add	r3, r2
 8003346:	3360      	adds	r3, #96	; 0x60
 8003348:	2204      	movs	r2, #4
 800334a:	701a      	strb	r2, [r3, #0]
      break;
 800334c:	e001      	b.n	8003352 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800334e:	bf00      	nop
 8003350:	e000      	b.n	8003354 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003352:	bf00      	nop
  }
}
 8003354:	bf00      	nop
 8003356:	3728      	adds	r7, #40	; 0x28
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003388:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	2b02      	cmp	r3, #2
 8003392:	d10b      	bne.n	80033ac <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	2b01      	cmp	r3, #1
 800339c:	d102      	bne.n	80033a4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f008 f872 	bl	800b488 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	f043 0302 	orr.w	r3, r3, #2
 80033aa:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f003 0308 	and.w	r3, r3, #8
 80033b2:	2b08      	cmp	r3, #8
 80033b4:	d132      	bne.n	800341c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	f043 0308 	orr.w	r3, r3, #8
 80033bc:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	f003 0304 	and.w	r3, r3, #4
 80033c4:	2b04      	cmp	r3, #4
 80033c6:	d126      	bne.n	8003416 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d113      	bne.n	80033f8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80033d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80033da:	d106      	bne.n	80033ea <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2102      	movs	r1, #2
 80033e2:	4618      	mov	r0, r3
 80033e4:	f002 fa4c 	bl	8005880 <USB_InitFSLSPClkSel>
 80033e8:	e011      	b.n	800340e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2101      	movs	r1, #1
 80033f0:	4618      	mov	r0, r3
 80033f2:	f002 fa45 	bl	8005880 <USB_InitFSLSPClkSel>
 80033f6:	e00a      	b.n	800340e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d106      	bne.n	800340e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003406:	461a      	mov	r2, r3
 8003408:	f64e 2360 	movw	r3, #60000	; 0xea60
 800340c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f008 f864 	bl	800b4dc <HAL_HCD_PortEnabled_Callback>
 8003414:	e002      	b.n	800341c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f008 f86e 	bl	800b4f8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f003 0320 	and.w	r3, r3, #32
 8003422:	2b20      	cmp	r3, #32
 8003424:	d103      	bne.n	800342e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	f043 0320 	orr.w	r3, r3, #32
 800342c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003434:	461a      	mov	r2, r3
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	6013      	str	r3, [r2, #0]
}
 800343a:	bf00      	nop
 800343c:	3718      	adds	r7, #24
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
	...

08003444 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e1be      	b.n	80037d4 <HAL_I2C_Init+0x390>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a9f      	ldr	r2, [pc, #636]	; (80036d8 <HAL_I2C_Init+0x294>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d00e      	beq.n	800347e <HAL_I2C_Init+0x3a>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a9d      	ldr	r2, [pc, #628]	; (80036dc <HAL_I2C_Init+0x298>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d009      	beq.n	800347e <HAL_I2C_Init+0x3a>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a9c      	ldr	r2, [pc, #624]	; (80036e0 <HAL_I2C_Init+0x29c>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d004      	beq.n	800347e <HAL_I2C_Init+0x3a>
 8003474:	f240 11bf 	movw	r1, #447	; 0x1bf
 8003478:	489a      	ldr	r0, [pc, #616]	; (80036e4 <HAL_I2C_Init+0x2a0>)
 800347a:	f7fd fbd2 	bl	8000c22 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d004      	beq.n	8003490 <HAL_I2C_Init+0x4c>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	4a97      	ldr	r2, [pc, #604]	; (80036e8 <HAL_I2C_Init+0x2a4>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d904      	bls.n	800349a <HAL_I2C_Init+0x56>
 8003490:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8003494:	4893      	ldr	r0, [pc, #588]	; (80036e4 <HAL_I2C_Init+0x2a0>)
 8003496:	f7fd fbc4 	bl	8000c22 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d009      	beq.n	80034b6 <HAL_I2C_Init+0x72>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034aa:	d004      	beq.n	80034b6 <HAL_I2C_Init+0x72>
 80034ac:	f240 11c1 	movw	r1, #449	; 0x1c1
 80034b0:	488c      	ldr	r0, [pc, #560]	; (80036e4 <HAL_I2C_Init+0x2a0>)
 80034b2:	f7fd fbb6 	bl	8000c22 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80034be:	f023 0303 	bic.w	r3, r3, #3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d004      	beq.n	80034d0 <HAL_I2C_Init+0x8c>
 80034c6:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 80034ca:	4886      	ldr	r0, [pc, #536]	; (80036e4 <HAL_I2C_Init+0x2a0>)
 80034cc:	f7fd fba9 	bl	8000c22 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034d8:	d009      	beq.n	80034ee <HAL_I2C_Init+0xaa>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80034e2:	d004      	beq.n	80034ee <HAL_I2C_Init+0xaa>
 80034e4:	f240 11c3 	movw	r1, #451	; 0x1c3
 80034e8:	487e      	ldr	r0, [pc, #504]	; (80036e4 <HAL_I2C_Init+0x2a0>)
 80034ea:	f7fd fb9a 	bl	8000c22 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d008      	beq.n	8003508 <HAL_I2C_Init+0xc4>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d004      	beq.n	8003508 <HAL_I2C_Init+0xc4>
 80034fe:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8003502:	4878      	ldr	r0, [pc, #480]	; (80036e4 <HAL_I2C_Init+0x2a0>)
 8003504:	f7fd fb8d 	bl	8000c22 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8003510:	2b00      	cmp	r3, #0
 8003512:	d004      	beq.n	800351e <HAL_I2C_Init+0xda>
 8003514:	f240 11c5 	movw	r1, #453	; 0x1c5
 8003518:	4872      	ldr	r0, [pc, #456]	; (80036e4 <HAL_I2C_Init+0x2a0>)
 800351a:	f7fd fb82 	bl	8000c22 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	69db      	ldr	r3, [r3, #28]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d008      	beq.n	8003538 <HAL_I2C_Init+0xf4>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	69db      	ldr	r3, [r3, #28]
 800352a:	2b40      	cmp	r3, #64	; 0x40
 800352c:	d004      	beq.n	8003538 <HAL_I2C_Init+0xf4>
 800352e:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8003532:	486c      	ldr	r0, [pc, #432]	; (80036e4 <HAL_I2C_Init+0x2a0>)
 8003534:	f7fd fb75 	bl	8000c22 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d008      	beq.n	8003552 <HAL_I2C_Init+0x10e>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a1b      	ldr	r3, [r3, #32]
 8003544:	2b80      	cmp	r3, #128	; 0x80
 8003546:	d004      	beq.n	8003552 <HAL_I2C_Init+0x10e>
 8003548:	f240 11c7 	movw	r1, #455	; 0x1c7
 800354c:	4865      	ldr	r0, [pc, #404]	; (80036e4 <HAL_I2C_Init+0x2a0>)
 800354e:	f7fd fb68 	bl	8000c22 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d106      	bne.n	800356c <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f7fd f96e 	bl	8000848 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2224      	movs	r2, #36	; 0x24
 8003570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 0201 	bic.w	r2, r2, #1
 8003582:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003592:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035a4:	f000 febe 	bl	8004324 <HAL_RCC_GetPCLK1Freq>
 80035a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	4a4f      	ldr	r2, [pc, #316]	; (80036ec <HAL_I2C_Init+0x2a8>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d807      	bhi.n	80035c4 <HAL_I2C_Init+0x180>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	4a4e      	ldr	r2, [pc, #312]	; (80036f0 <HAL_I2C_Init+0x2ac>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	bf94      	ite	ls
 80035bc:	2301      	movls	r3, #1
 80035be:	2300      	movhi	r3, #0
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	e006      	b.n	80035d2 <HAL_I2C_Init+0x18e>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	4a4b      	ldr	r2, [pc, #300]	; (80036f4 <HAL_I2C_Init+0x2b0>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	bf94      	ite	ls
 80035cc:	2301      	movls	r3, #1
 80035ce:	2300      	movhi	r3, #0
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e0fc      	b.n	80037d4 <HAL_I2C_Init+0x390>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	4a46      	ldr	r2, [pc, #280]	; (80036f8 <HAL_I2C_Init+0x2b4>)
 80035de:	fba2 2303 	umull	r2, r3, r2, r3
 80035e2:	0c9b      	lsrs	r3, r3, #18
 80035e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68ba      	ldr	r2, [r7, #8]
 80035f6:	430a      	orrs	r2, r1
 80035f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	6a1b      	ldr	r3, [r3, #32]
 8003600:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	4a38      	ldr	r2, [pc, #224]	; (80036ec <HAL_I2C_Init+0x2a8>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d802      	bhi.n	8003614 <HAL_I2C_Init+0x1d0>
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	3301      	adds	r3, #1
 8003612:	e009      	b.n	8003628 <HAL_I2C_Init+0x1e4>
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800361a:	fb02 f303 	mul.w	r3, r2, r3
 800361e:	4a37      	ldr	r2, [pc, #220]	; (80036fc <HAL_I2C_Init+0x2b8>)
 8003620:	fba2 2303 	umull	r2, r3, r2, r3
 8003624:	099b      	lsrs	r3, r3, #6
 8003626:	3301      	adds	r3, #1
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	6812      	ldr	r2, [r2, #0]
 800362c:	430b      	orrs	r3, r1
 800362e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	69db      	ldr	r3, [r3, #28]
 8003636:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800363a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	492a      	ldr	r1, [pc, #168]	; (80036ec <HAL_I2C_Init+0x2a8>)
 8003644:	428b      	cmp	r3, r1
 8003646:	d819      	bhi.n	800367c <HAL_I2C_Init+0x238>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	1e59      	subs	r1, r3, #1
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	fbb1 f3f3 	udiv	r3, r1, r3
 8003656:	1c59      	adds	r1, r3, #1
 8003658:	f640 73fc 	movw	r3, #4092	; 0xffc
 800365c:	400b      	ands	r3, r1
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00a      	beq.n	8003678 <HAL_I2C_Init+0x234>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	1e59      	subs	r1, r3, #1
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	005b      	lsls	r3, r3, #1
 800366c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003670:	3301      	adds	r3, #1
 8003672:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003676:	e066      	b.n	8003746 <HAL_I2C_Init+0x302>
 8003678:	2304      	movs	r3, #4
 800367a:	e064      	b.n	8003746 <HAL_I2C_Init+0x302>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d111      	bne.n	80036a8 <HAL_I2C_Init+0x264>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	1e58      	subs	r0, r3, #1
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6859      	ldr	r1, [r3, #4]
 800368c:	460b      	mov	r3, r1
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	440b      	add	r3, r1
 8003692:	fbb0 f3f3 	udiv	r3, r0, r3
 8003696:	3301      	adds	r3, #1
 8003698:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800369c:	2b00      	cmp	r3, #0
 800369e:	bf0c      	ite	eq
 80036a0:	2301      	moveq	r3, #1
 80036a2:	2300      	movne	r3, #0
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	e012      	b.n	80036ce <HAL_I2C_Init+0x28a>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	1e58      	subs	r0, r3, #1
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6859      	ldr	r1, [r3, #4]
 80036b0:	460b      	mov	r3, r1
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	440b      	add	r3, r1
 80036b6:	0099      	lsls	r1, r3, #2
 80036b8:	440b      	add	r3, r1
 80036ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80036be:	3301      	adds	r3, #1
 80036c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	bf0c      	ite	eq
 80036c8:	2301      	moveq	r3, #1
 80036ca:	2300      	movne	r3, #0
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d016      	beq.n	8003700 <HAL_I2C_Init+0x2bc>
 80036d2:	2301      	movs	r3, #1
 80036d4:	e037      	b.n	8003746 <HAL_I2C_Init+0x302>
 80036d6:	bf00      	nop
 80036d8:	40005400 	.word	0x40005400
 80036dc:	40005800 	.word	0x40005800
 80036e0:	40005c00 	.word	0x40005c00
 80036e4:	0800c490 	.word	0x0800c490
 80036e8:	00061a80 	.word	0x00061a80
 80036ec:	000186a0 	.word	0x000186a0
 80036f0:	001e847f 	.word	0x001e847f
 80036f4:	003d08ff 	.word	0x003d08ff
 80036f8:	431bde83 	.word	0x431bde83
 80036fc:	10624dd3 	.word	0x10624dd3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d10e      	bne.n	8003726 <HAL_I2C_Init+0x2e2>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	1e58      	subs	r0, r3, #1
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6859      	ldr	r1, [r3, #4]
 8003710:	460b      	mov	r3, r1
 8003712:	005b      	lsls	r3, r3, #1
 8003714:	440b      	add	r3, r1
 8003716:	fbb0 f3f3 	udiv	r3, r0, r3
 800371a:	3301      	adds	r3, #1
 800371c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003720:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003724:	e00f      	b.n	8003746 <HAL_I2C_Init+0x302>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	1e58      	subs	r0, r3, #1
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6859      	ldr	r1, [r3, #4]
 800372e:	460b      	mov	r3, r1
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	440b      	add	r3, r1
 8003734:	0099      	lsls	r1, r3, #2
 8003736:	440b      	add	r3, r1
 8003738:	fbb0 f3f3 	udiv	r3, r0, r3
 800373c:	3301      	adds	r3, #1
 800373e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003742:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003746:	6879      	ldr	r1, [r7, #4]
 8003748:	6809      	ldr	r1, [r1, #0]
 800374a:	4313      	orrs	r3, r2
 800374c:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	69da      	ldr	r2, [r3, #28]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a1b      	ldr	r3, [r3, #32]
 8003760:	431a      	orrs	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	430a      	orrs	r2, r1
 8003768:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003774:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	6911      	ldr	r1, [r2, #16]
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	68d2      	ldr	r2, [r2, #12]
 8003780:	4311      	orrs	r1, r2
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	6812      	ldr	r2, [r2, #0]
 8003786:	430b      	orrs	r3, r1
 8003788:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	695a      	ldr	r2, [r3, #20]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	431a      	orrs	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	430a      	orrs	r2, r1
 80037a4:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f042 0201 	orr.w	r2, r2, #1
 80037b4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2220      	movs	r2, #32
 80037c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3710      	adds	r7, #16
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b086      	sub	sp, #24
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e316      	b.n	8003e1c <HAL_RCC_OscConfig+0x640>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2b0f      	cmp	r3, #15
 80037f4:	d903      	bls.n	80037fe <HAL_RCC_OscConfig+0x22>
 80037f6:	21e8      	movs	r1, #232	; 0xe8
 80037f8:	48a3      	ldr	r0, [pc, #652]	; (8003a88 <HAL_RCC_OscConfig+0x2ac>)
 80037fa:	f7fd fa12 	bl	8000c22 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	2b00      	cmp	r3, #0
 8003808:	f000 8088 	beq.w	800391c <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d00d      	beq.n	8003830 <HAL_RCC_OscConfig+0x54>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800381c:	d008      	beq.n	8003830 <HAL_RCC_OscConfig+0x54>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003826:	d003      	beq.n	8003830 <HAL_RCC_OscConfig+0x54>
 8003828:	21ed      	movs	r1, #237	; 0xed
 800382a:	4897      	ldr	r0, [pc, #604]	; (8003a88 <HAL_RCC_OscConfig+0x2ac>)
 800382c:	f7fd f9f9 	bl	8000c22 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003830:	4b96      	ldr	r3, [pc, #600]	; (8003a8c <HAL_RCC_OscConfig+0x2b0>)
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	f003 030c 	and.w	r3, r3, #12
 8003838:	2b04      	cmp	r3, #4
 800383a:	d00c      	beq.n	8003856 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800383c:	4b93      	ldr	r3, [pc, #588]	; (8003a8c <HAL_RCC_OscConfig+0x2b0>)
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003844:	2b08      	cmp	r3, #8
 8003846:	d112      	bne.n	800386e <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003848:	4b90      	ldr	r3, [pc, #576]	; (8003a8c <HAL_RCC_OscConfig+0x2b0>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003850:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003854:	d10b      	bne.n	800386e <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003856:	4b8d      	ldr	r3, [pc, #564]	; (8003a8c <HAL_RCC_OscConfig+0x2b0>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d05b      	beq.n	800391a <HAL_RCC_OscConfig+0x13e>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d157      	bne.n	800391a <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e2d6      	b.n	8003e1c <HAL_RCC_OscConfig+0x640>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003876:	d106      	bne.n	8003886 <HAL_RCC_OscConfig+0xaa>
 8003878:	4b84      	ldr	r3, [pc, #528]	; (8003a8c <HAL_RCC_OscConfig+0x2b0>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a83      	ldr	r2, [pc, #524]	; (8003a8c <HAL_RCC_OscConfig+0x2b0>)
 800387e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003882:	6013      	str	r3, [r2, #0]
 8003884:	e01d      	b.n	80038c2 <HAL_RCC_OscConfig+0xe6>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800388e:	d10c      	bne.n	80038aa <HAL_RCC_OscConfig+0xce>
 8003890:	4b7e      	ldr	r3, [pc, #504]	; (8003a8c <HAL_RCC_OscConfig+0x2b0>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a7d      	ldr	r2, [pc, #500]	; (8003a8c <HAL_RCC_OscConfig+0x2b0>)
 8003896:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800389a:	6013      	str	r3, [r2, #0]
 800389c:	4b7b      	ldr	r3, [pc, #492]	; (8003a8c <HAL_RCC_OscConfig+0x2b0>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a7a      	ldr	r2, [pc, #488]	; (8003a8c <HAL_RCC_OscConfig+0x2b0>)
 80038a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038a6:	6013      	str	r3, [r2, #0]
 80038a8:	e00b      	b.n	80038c2 <HAL_RCC_OscConfig+0xe6>
 80038aa:	4b78      	ldr	r3, [pc, #480]	; (8003a8c <HAL_RCC_OscConfig+0x2b0>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a77      	ldr	r2, [pc, #476]	; (8003a8c <HAL_RCC_OscConfig+0x2b0>)
 80038b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038b4:	6013      	str	r3, [r2, #0]
 80038b6:	4b75      	ldr	r3, [pc, #468]	; (8003a8c <HAL_RCC_OscConfig+0x2b0>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a74      	ldr	r2, [pc, #464]	; (8003a8c <HAL_RCC_OscConfig+0x2b0>)
 80038bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038c0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d013      	beq.n	80038f2 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ca:	f7fd fbd9 	bl	8001080 <HAL_GetTick>
 80038ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038d0:	e008      	b.n	80038e4 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038d2:	f7fd fbd5 	bl	8001080 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	2b64      	cmp	r3, #100	; 0x64
 80038de:	d901      	bls.n	80038e4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e29b      	b.n	8003e1c <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038e4:	4b69      	ldr	r3, [pc, #420]	; (8003a8c <HAL_RCC_OscConfig+0x2b0>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d0f0      	beq.n	80038d2 <HAL_RCC_OscConfig+0xf6>
 80038f0:	e014      	b.n	800391c <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f2:	f7fd fbc5 	bl	8001080 <HAL_GetTick>
 80038f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038f8:	e008      	b.n	800390c <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038fa:	f7fd fbc1 	bl	8001080 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	2b64      	cmp	r3, #100	; 0x64
 8003906:	d901      	bls.n	800390c <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e287      	b.n	8003e1c <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800390c:	4b5f      	ldr	r3, [pc, #380]	; (8003a8c <HAL_RCC_OscConfig+0x2b0>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1f0      	bne.n	80038fa <HAL_RCC_OscConfig+0x11e>
 8003918:	e000      	b.n	800391c <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800391a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0302 	and.w	r3, r3, #2
 8003924:	2b00      	cmp	r3, #0
 8003926:	d079      	beq.n	8003a1c <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d008      	beq.n	8003942 <HAL_RCC_OscConfig+0x166>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	2b01      	cmp	r3, #1
 8003936:	d004      	beq.n	8003942 <HAL_RCC_OscConfig+0x166>
 8003938:	f240 111f 	movw	r1, #287	; 0x11f
 800393c:	4852      	ldr	r0, [pc, #328]	; (8003a88 <HAL_RCC_OscConfig+0x2ac>)
 800393e:	f7fd f970 	bl	8000c22 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	2b1f      	cmp	r3, #31
 8003948:	d904      	bls.n	8003954 <HAL_RCC_OscConfig+0x178>
 800394a:	f44f 7190 	mov.w	r1, #288	; 0x120
 800394e:	484e      	ldr	r0, [pc, #312]	; (8003a88 <HAL_RCC_OscConfig+0x2ac>)
 8003950:	f7fd f967 	bl	8000c22 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003954:	4b4d      	ldr	r3, [pc, #308]	; (8003a8c <HAL_RCC_OscConfig+0x2b0>)
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f003 030c 	and.w	r3, r3, #12
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00b      	beq.n	8003978 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003960:	4b4a      	ldr	r3, [pc, #296]	; (8003a8c <HAL_RCC_OscConfig+0x2b0>)
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003968:	2b08      	cmp	r3, #8
 800396a:	d11c      	bne.n	80039a6 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800396c:	4b47      	ldr	r3, [pc, #284]	; (8003a8c <HAL_RCC_OscConfig+0x2b0>)
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d116      	bne.n	80039a6 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003978:	4b44      	ldr	r3, [pc, #272]	; (8003a8c <HAL_RCC_OscConfig+0x2b0>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d005      	beq.n	8003990 <HAL_RCC_OscConfig+0x1b4>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d001      	beq.n	8003990 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e245      	b.n	8003e1c <HAL_RCC_OscConfig+0x640>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003990:	4b3e      	ldr	r3, [pc, #248]	; (8003a8c <HAL_RCC_OscConfig+0x2b0>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	00db      	lsls	r3, r3, #3
 800399e:	493b      	ldr	r1, [pc, #236]	; (8003a8c <HAL_RCC_OscConfig+0x2b0>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039a4:	e03a      	b.n	8003a1c <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d020      	beq.n	80039f0 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039ae:	4b38      	ldr	r3, [pc, #224]	; (8003a90 <HAL_RCC_OscConfig+0x2b4>)
 80039b0:	2201      	movs	r2, #1
 80039b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b4:	f7fd fb64 	bl	8001080 <HAL_GetTick>
 80039b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ba:	e008      	b.n	80039ce <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039bc:	f7fd fb60 	bl	8001080 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e226      	b.n	8003e1c <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ce:	4b2f      	ldr	r3, [pc, #188]	; (8003a8c <HAL_RCC_OscConfig+0x2b0>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d0f0      	beq.n	80039bc <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039da:	4b2c      	ldr	r3, [pc, #176]	; (8003a8c <HAL_RCC_OscConfig+0x2b0>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	4928      	ldr	r1, [pc, #160]	; (8003a8c <HAL_RCC_OscConfig+0x2b0>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	600b      	str	r3, [r1, #0]
 80039ee:	e015      	b.n	8003a1c <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039f0:	4b27      	ldr	r3, [pc, #156]	; (8003a90 <HAL_RCC_OscConfig+0x2b4>)
 80039f2:	2200      	movs	r2, #0
 80039f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f6:	f7fd fb43 	bl	8001080 <HAL_GetTick>
 80039fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039fc:	e008      	b.n	8003a10 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039fe:	f7fd fb3f 	bl	8001080 <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d901      	bls.n	8003a10 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	e205      	b.n	8003e1c <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a10:	4b1e      	ldr	r3, [pc, #120]	; (8003a8c <HAL_RCC_OscConfig+0x2b0>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0302 	and.w	r3, r3, #2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1f0      	bne.n	80039fe <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0308 	and.w	r3, r3, #8
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d046      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	695b      	ldr	r3, [r3, #20]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d008      	beq.n	8003a42 <HAL_RCC_OscConfig+0x266>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	695b      	ldr	r3, [r3, #20]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d004      	beq.n	8003a42 <HAL_RCC_OscConfig+0x266>
 8003a38:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8003a3c:	4812      	ldr	r0, [pc, #72]	; (8003a88 <HAL_RCC_OscConfig+0x2ac>)
 8003a3e:	f7fd f8f0 	bl	8000c22 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	695b      	ldr	r3, [r3, #20]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d016      	beq.n	8003a78 <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a4a:	4b12      	ldr	r3, [pc, #72]	; (8003a94 <HAL_RCC_OscConfig+0x2b8>)
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a50:	f7fd fb16 	bl	8001080 <HAL_GetTick>
 8003a54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a56:	e008      	b.n	8003a6a <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a58:	f7fd fb12 	bl	8001080 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e1d8      	b.n	8003e1c <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a6a:	4b08      	ldr	r3, [pc, #32]	; (8003a8c <HAL_RCC_OscConfig+0x2b0>)
 8003a6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d0f0      	beq.n	8003a58 <HAL_RCC_OscConfig+0x27c>
 8003a76:	e01e      	b.n	8003ab6 <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a78:	4b06      	ldr	r3, [pc, #24]	; (8003a94 <HAL_RCC_OscConfig+0x2b8>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a7e:	f7fd faff 	bl	8001080 <HAL_GetTick>
 8003a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a84:	e011      	b.n	8003aaa <HAL_RCC_OscConfig+0x2ce>
 8003a86:	bf00      	nop
 8003a88:	0800c4c8 	.word	0x0800c4c8
 8003a8c:	40023800 	.word	0x40023800
 8003a90:	42470000 	.word	0x42470000
 8003a94:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a98:	f7fd faf2 	bl	8001080 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e1b8      	b.n	8003e1c <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003aaa:	4b97      	ldr	r3, [pc, #604]	; (8003d08 <HAL_RCC_OscConfig+0x52c>)
 8003aac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1f0      	bne.n	8003a98 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0304 	and.w	r3, r3, #4
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	f000 80a8 	beq.w	8003c14 <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00c      	beq.n	8003aea <HAL_RCC_OscConfig+0x30e>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d008      	beq.n	8003aea <HAL_RCC_OscConfig+0x30e>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	2b05      	cmp	r3, #5
 8003ade:	d004      	beq.n	8003aea <HAL_RCC_OscConfig+0x30e>
 8003ae0:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8003ae4:	4889      	ldr	r0, [pc, #548]	; (8003d0c <HAL_RCC_OscConfig+0x530>)
 8003ae6:	f7fd f89c 	bl	8000c22 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aea:	4b87      	ldr	r3, [pc, #540]	; (8003d08 <HAL_RCC_OscConfig+0x52c>)
 8003aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d10f      	bne.n	8003b16 <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003af6:	2300      	movs	r3, #0
 8003af8:	60bb      	str	r3, [r7, #8]
 8003afa:	4b83      	ldr	r3, [pc, #524]	; (8003d08 <HAL_RCC_OscConfig+0x52c>)
 8003afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afe:	4a82      	ldr	r2, [pc, #520]	; (8003d08 <HAL_RCC_OscConfig+0x52c>)
 8003b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b04:	6413      	str	r3, [r2, #64]	; 0x40
 8003b06:	4b80      	ldr	r3, [pc, #512]	; (8003d08 <HAL_RCC_OscConfig+0x52c>)
 8003b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b0e:	60bb      	str	r3, [r7, #8]
 8003b10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b12:	2301      	movs	r3, #1
 8003b14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b16:	4b7e      	ldr	r3, [pc, #504]	; (8003d10 <HAL_RCC_OscConfig+0x534>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d118      	bne.n	8003b54 <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b22:	4b7b      	ldr	r3, [pc, #492]	; (8003d10 <HAL_RCC_OscConfig+0x534>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a7a      	ldr	r2, [pc, #488]	; (8003d10 <HAL_RCC_OscConfig+0x534>)
 8003b28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b2e:	f7fd faa7 	bl	8001080 <HAL_GetTick>
 8003b32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b34:	e008      	b.n	8003b48 <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b36:	f7fd faa3 	bl	8001080 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d901      	bls.n	8003b48 <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e169      	b.n	8003e1c <HAL_RCC_OscConfig+0x640>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b48:	4b71      	ldr	r3, [pc, #452]	; (8003d10 <HAL_RCC_OscConfig+0x534>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d0f0      	beq.n	8003b36 <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d106      	bne.n	8003b6a <HAL_RCC_OscConfig+0x38e>
 8003b5c:	4b6a      	ldr	r3, [pc, #424]	; (8003d08 <HAL_RCC_OscConfig+0x52c>)
 8003b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b60:	4a69      	ldr	r2, [pc, #420]	; (8003d08 <HAL_RCC_OscConfig+0x52c>)
 8003b62:	f043 0301 	orr.w	r3, r3, #1
 8003b66:	6713      	str	r3, [r2, #112]	; 0x70
 8003b68:	e01c      	b.n	8003ba4 <HAL_RCC_OscConfig+0x3c8>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	2b05      	cmp	r3, #5
 8003b70:	d10c      	bne.n	8003b8c <HAL_RCC_OscConfig+0x3b0>
 8003b72:	4b65      	ldr	r3, [pc, #404]	; (8003d08 <HAL_RCC_OscConfig+0x52c>)
 8003b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b76:	4a64      	ldr	r2, [pc, #400]	; (8003d08 <HAL_RCC_OscConfig+0x52c>)
 8003b78:	f043 0304 	orr.w	r3, r3, #4
 8003b7c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b7e:	4b62      	ldr	r3, [pc, #392]	; (8003d08 <HAL_RCC_OscConfig+0x52c>)
 8003b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b82:	4a61      	ldr	r2, [pc, #388]	; (8003d08 <HAL_RCC_OscConfig+0x52c>)
 8003b84:	f043 0301 	orr.w	r3, r3, #1
 8003b88:	6713      	str	r3, [r2, #112]	; 0x70
 8003b8a:	e00b      	b.n	8003ba4 <HAL_RCC_OscConfig+0x3c8>
 8003b8c:	4b5e      	ldr	r3, [pc, #376]	; (8003d08 <HAL_RCC_OscConfig+0x52c>)
 8003b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b90:	4a5d      	ldr	r2, [pc, #372]	; (8003d08 <HAL_RCC_OscConfig+0x52c>)
 8003b92:	f023 0301 	bic.w	r3, r3, #1
 8003b96:	6713      	str	r3, [r2, #112]	; 0x70
 8003b98:	4b5b      	ldr	r3, [pc, #364]	; (8003d08 <HAL_RCC_OscConfig+0x52c>)
 8003b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b9c:	4a5a      	ldr	r2, [pc, #360]	; (8003d08 <HAL_RCC_OscConfig+0x52c>)
 8003b9e:	f023 0304 	bic.w	r3, r3, #4
 8003ba2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d015      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bac:	f7fd fa68 	bl	8001080 <HAL_GetTick>
 8003bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bb2:	e00a      	b.n	8003bca <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bb4:	f7fd fa64 	bl	8001080 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e128      	b.n	8003e1c <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bca:	4b4f      	ldr	r3, [pc, #316]	; (8003d08 <HAL_RCC_OscConfig+0x52c>)
 8003bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bce:	f003 0302 	and.w	r3, r3, #2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d0ee      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x3d8>
 8003bd6:	e014      	b.n	8003c02 <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bd8:	f7fd fa52 	bl	8001080 <HAL_GetTick>
 8003bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bde:	e00a      	b.n	8003bf6 <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003be0:	f7fd fa4e 	bl	8001080 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e112      	b.n	8003e1c <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bf6:	4b44      	ldr	r3, [pc, #272]	; (8003d08 <HAL_RCC_OscConfig+0x52c>)
 8003bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1ee      	bne.n	8003be0 <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c02:	7dfb      	ldrb	r3, [r7, #23]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d105      	bne.n	8003c14 <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c08:	4b3f      	ldr	r3, [pc, #252]	; (8003d08 <HAL_RCC_OscConfig+0x52c>)
 8003c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0c:	4a3e      	ldr	r2, [pc, #248]	; (8003d08 <HAL_RCC_OscConfig+0x52c>)
 8003c0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c12:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00c      	beq.n	8003c36 <HAL_RCC_OscConfig+0x45a>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d008      	beq.n	8003c36 <HAL_RCC_OscConfig+0x45a>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	699b      	ldr	r3, [r3, #24]
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d004      	beq.n	8003c36 <HAL_RCC_OscConfig+0x45a>
 8003c2c:	f240 11cf 	movw	r1, #463	; 0x1cf
 8003c30:	4836      	ldr	r0, [pc, #216]	; (8003d0c <HAL_RCC_OscConfig+0x530>)
 8003c32:	f7fc fff6 	bl	8000c22 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	f000 80ed 	beq.w	8003e1a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c40:	4b31      	ldr	r3, [pc, #196]	; (8003d08 <HAL_RCC_OscConfig+0x52c>)
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f003 030c 	and.w	r3, r3, #12
 8003c48:	2b08      	cmp	r3, #8
 8003c4a:	f000 80ae 	beq.w	8003daa <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	f040 8092 	bne.w	8003d7c <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	69db      	ldr	r3, [r3, #28]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d009      	beq.n	8003c74 <HAL_RCC_OscConfig+0x498>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	69db      	ldr	r3, [r3, #28]
 8003c64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c68:	d004      	beq.n	8003c74 <HAL_RCC_OscConfig+0x498>
 8003c6a:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8003c6e:	4827      	ldr	r0, [pc, #156]	; (8003d0c <HAL_RCC_OscConfig+0x530>)
 8003c70:	f7fc ffd7 	bl	8000c22 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a1b      	ldr	r3, [r3, #32]
 8003c78:	2b3f      	cmp	r3, #63	; 0x3f
 8003c7a:	d904      	bls.n	8003c86 <HAL_RCC_OscConfig+0x4aa>
 8003c7c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8003c80:	4822      	ldr	r0, [pc, #136]	; (8003d0c <HAL_RCC_OscConfig+0x530>)
 8003c82:	f7fc ffce 	bl	8000c22 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8a:	2b31      	cmp	r3, #49	; 0x31
 8003c8c:	d904      	bls.n	8003c98 <HAL_RCC_OscConfig+0x4bc>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c92:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8003c96:	d904      	bls.n	8003ca2 <HAL_RCC_OscConfig+0x4c6>
 8003c98:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8003c9c:	481b      	ldr	r0, [pc, #108]	; (8003d0c <HAL_RCC_OscConfig+0x530>)
 8003c9e:	f7fc ffc0 	bl	8000c22 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d010      	beq.n	8003ccc <HAL_RCC_OscConfig+0x4f0>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cae:	2b04      	cmp	r3, #4
 8003cb0:	d00c      	beq.n	8003ccc <HAL_RCC_OscConfig+0x4f0>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb6:	2b06      	cmp	r3, #6
 8003cb8:	d008      	beq.n	8003ccc <HAL_RCC_OscConfig+0x4f0>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cbe:	2b08      	cmp	r3, #8
 8003cc0:	d004      	beq.n	8003ccc <HAL_RCC_OscConfig+0x4f0>
 8003cc2:	f240 11db 	movw	r1, #475	; 0x1db
 8003cc6:	4811      	ldr	r0, [pc, #68]	; (8003d0c <HAL_RCC_OscConfig+0x530>)
 8003cc8:	f7fc ffab 	bl	8000c22 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d903      	bls.n	8003cdc <HAL_RCC_OscConfig+0x500>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd8:	2b0f      	cmp	r3, #15
 8003cda:	d904      	bls.n	8003ce6 <HAL_RCC_OscConfig+0x50a>
 8003cdc:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8003ce0:	480a      	ldr	r0, [pc, #40]	; (8003d0c <HAL_RCC_OscConfig+0x530>)
 8003ce2:	f7fc ff9e 	bl	8000c22 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ce6:	4b0b      	ldr	r3, [pc, #44]	; (8003d14 <HAL_RCC_OscConfig+0x538>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cec:	f7fd f9c8 	bl	8001080 <HAL_GetTick>
 8003cf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cf2:	e011      	b.n	8003d18 <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cf4:	f7fd f9c4 	bl	8001080 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d90a      	bls.n	8003d18 <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e08a      	b.n	8003e1c <HAL_RCC_OscConfig+0x640>
 8003d06:	bf00      	nop
 8003d08:	40023800 	.word	0x40023800
 8003d0c:	0800c4c8 	.word	0x0800c4c8
 8003d10:	40007000 	.word	0x40007000
 8003d14:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d18:	4b42      	ldr	r3, [pc, #264]	; (8003e24 <HAL_RCC_OscConfig+0x648>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d1e7      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	69da      	ldr	r2, [r3, #28]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a1b      	ldr	r3, [r3, #32]
 8003d2c:	431a      	orrs	r2, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d32:	019b      	lsls	r3, r3, #6
 8003d34:	431a      	orrs	r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d3a:	085b      	lsrs	r3, r3, #1
 8003d3c:	3b01      	subs	r3, #1
 8003d3e:	041b      	lsls	r3, r3, #16
 8003d40:	431a      	orrs	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d46:	061b      	lsls	r3, r3, #24
 8003d48:	4936      	ldr	r1, [pc, #216]	; (8003e24 <HAL_RCC_OscConfig+0x648>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d4e:	4b36      	ldr	r3, [pc, #216]	; (8003e28 <HAL_RCC_OscConfig+0x64c>)
 8003d50:	2201      	movs	r2, #1
 8003d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d54:	f7fd f994 	bl	8001080 <HAL_GetTick>
 8003d58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d5a:	e008      	b.n	8003d6e <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d5c:	f7fd f990 	bl	8001080 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d901      	bls.n	8003d6e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e056      	b.n	8003e1c <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d6e:	4b2d      	ldr	r3, [pc, #180]	; (8003e24 <HAL_RCC_OscConfig+0x648>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d0f0      	beq.n	8003d5c <HAL_RCC_OscConfig+0x580>
 8003d7a:	e04e      	b.n	8003e1a <HAL_RCC_OscConfig+0x63e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d7c:	4b2a      	ldr	r3, [pc, #168]	; (8003e28 <HAL_RCC_OscConfig+0x64c>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d82:	f7fd f97d 	bl	8001080 <HAL_GetTick>
 8003d86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d88:	e008      	b.n	8003d9c <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d8a:	f7fd f979 	bl	8001080 <HAL_GetTick>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d901      	bls.n	8003d9c <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e03f      	b.n	8003e1c <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d9c:	4b21      	ldr	r3, [pc, #132]	; (8003e24 <HAL_RCC_OscConfig+0x648>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1f0      	bne.n	8003d8a <HAL_RCC_OscConfig+0x5ae>
 8003da8:	e037      	b.n	8003e1a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d101      	bne.n	8003db6 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e032      	b.n	8003e1c <HAL_RCC_OscConfig+0x640>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003db6:	4b1b      	ldr	r3, [pc, #108]	; (8003e24 <HAL_RCC_OscConfig+0x648>)
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d028      	beq.n	8003e16 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d121      	bne.n	8003e16 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d11a      	bne.n	8003e16 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003de6:	4013      	ands	r3, r2
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003dec:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d111      	bne.n	8003e16 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfc:	085b      	lsrs	r3, r3, #1
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d107      	bne.n	8003e16 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e10:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d001      	beq.n	8003e1a <HAL_RCC_OscConfig+0x63e>
#endif
        {
          return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e000      	b.n	8003e1c <HAL_RCC_OscConfig+0x640>
        }
      }
    }
  }
  return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3718      	adds	r7, #24
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	40023800 	.word	0x40023800
 8003e28:	42470060 	.word	0x42470060

08003e2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d101      	bne.n	8003e40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e174      	b.n	800412a <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d003      	beq.n	8003e50 <HAL_RCC_ClockConfig+0x24>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2b0f      	cmp	r3, #15
 8003e4e:	d904      	bls.n	8003e5a <HAL_RCC_ClockConfig+0x2e>
 8003e50:	f44f 7117 	mov.w	r1, #604	; 0x25c
 8003e54:	487b      	ldr	r0, [pc, #492]	; (8004044 <HAL_RCC_ClockConfig+0x218>)
 8003e56:	f7fc fee4 	bl	8000c22 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d019      	beq.n	8003e94 <HAL_RCC_ClockConfig+0x68>
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d016      	beq.n	8003e94 <HAL_RCC_ClockConfig+0x68>
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d013      	beq.n	8003e94 <HAL_RCC_ClockConfig+0x68>
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	2b03      	cmp	r3, #3
 8003e70:	d010      	beq.n	8003e94 <HAL_RCC_ClockConfig+0x68>
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	2b04      	cmp	r3, #4
 8003e76:	d00d      	beq.n	8003e94 <HAL_RCC_ClockConfig+0x68>
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	2b05      	cmp	r3, #5
 8003e7c:	d00a      	beq.n	8003e94 <HAL_RCC_ClockConfig+0x68>
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	2b06      	cmp	r3, #6
 8003e82:	d007      	beq.n	8003e94 <HAL_RCC_ClockConfig+0x68>
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	2b07      	cmp	r3, #7
 8003e88:	d004      	beq.n	8003e94 <HAL_RCC_ClockConfig+0x68>
 8003e8a:	f240 215d 	movw	r1, #605	; 0x25d
 8003e8e:	486d      	ldr	r0, [pc, #436]	; (8004044 <HAL_RCC_ClockConfig+0x218>)
 8003e90:	f7fc fec7 	bl	8000c22 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e94:	4b6c      	ldr	r3, [pc, #432]	; (8004048 <HAL_RCC_ClockConfig+0x21c>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0307 	and.w	r3, r3, #7
 8003e9c:	683a      	ldr	r2, [r7, #0]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d90c      	bls.n	8003ebc <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ea2:	4b69      	ldr	r3, [pc, #420]	; (8004048 <HAL_RCC_ClockConfig+0x21c>)
 8003ea4:	683a      	ldr	r2, [r7, #0]
 8003ea6:	b2d2      	uxtb	r2, r2
 8003ea8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eaa:	4b67      	ldr	r3, [pc, #412]	; (8004048 <HAL_RCC_ClockConfig+0x21c>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0307 	and.w	r3, r3, #7
 8003eb2:	683a      	ldr	r2, [r7, #0]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d001      	beq.n	8003ebc <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e136      	b.n	800412a <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0302 	and.w	r3, r3, #2
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d049      	beq.n	8003f5c <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0304 	and.w	r3, r3, #4
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d005      	beq.n	8003ee0 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ed4:	4b5d      	ldr	r3, [pc, #372]	; (800404c <HAL_RCC_ClockConfig+0x220>)
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	4a5c      	ldr	r2, [pc, #368]	; (800404c <HAL_RCC_ClockConfig+0x220>)
 8003eda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ede:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0308 	and.w	r3, r3, #8
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d005      	beq.n	8003ef8 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003eec:	4b57      	ldr	r3, [pc, #348]	; (800404c <HAL_RCC_ClockConfig+0x220>)
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	4a56      	ldr	r2, [pc, #344]	; (800404c <HAL_RCC_ClockConfig+0x220>)
 8003ef2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ef6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d024      	beq.n	8003f4a <HAL_RCC_ClockConfig+0x11e>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	2b80      	cmp	r3, #128	; 0x80
 8003f06:	d020      	beq.n	8003f4a <HAL_RCC_ClockConfig+0x11e>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	2b90      	cmp	r3, #144	; 0x90
 8003f0e:	d01c      	beq.n	8003f4a <HAL_RCC_ClockConfig+0x11e>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	2ba0      	cmp	r3, #160	; 0xa0
 8003f16:	d018      	beq.n	8003f4a <HAL_RCC_ClockConfig+0x11e>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	2bb0      	cmp	r3, #176	; 0xb0
 8003f1e:	d014      	beq.n	8003f4a <HAL_RCC_ClockConfig+0x11e>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	2bc0      	cmp	r3, #192	; 0xc0
 8003f26:	d010      	beq.n	8003f4a <HAL_RCC_ClockConfig+0x11e>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	2bd0      	cmp	r3, #208	; 0xd0
 8003f2e:	d00c      	beq.n	8003f4a <HAL_RCC_ClockConfig+0x11e>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	2be0      	cmp	r3, #224	; 0xe0
 8003f36:	d008      	beq.n	8003f4a <HAL_RCC_ClockConfig+0x11e>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	2bf0      	cmp	r3, #240	; 0xf0
 8003f3e:	d004      	beq.n	8003f4a <HAL_RCC_ClockConfig+0x11e>
 8003f40:	f44f 7120 	mov.w	r1, #640	; 0x280
 8003f44:	483f      	ldr	r0, [pc, #252]	; (8004044 <HAL_RCC_ClockConfig+0x218>)
 8003f46:	f7fc fe6c 	bl	8000c22 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f4a:	4b40      	ldr	r3, [pc, #256]	; (800404c <HAL_RCC_ClockConfig+0x220>)
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	493d      	ldr	r1, [pc, #244]	; (800404c <HAL_RCC_ClockConfig+0x220>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0301 	and.w	r3, r3, #1
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d059      	beq.n	800401c <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d010      	beq.n	8003f92 <HAL_RCC_ClockConfig+0x166>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d00c      	beq.n	8003f92 <HAL_RCC_ClockConfig+0x166>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d008      	beq.n	8003f92 <HAL_RCC_ClockConfig+0x166>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	2b03      	cmp	r3, #3
 8003f86:	d004      	beq.n	8003f92 <HAL_RCC_ClockConfig+0x166>
 8003f88:	f240 2187 	movw	r1, #647	; 0x287
 8003f8c:	482d      	ldr	r0, [pc, #180]	; (8004044 <HAL_RCC_ClockConfig+0x218>)
 8003f8e:	f7fc fe48 	bl	8000c22 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d107      	bne.n	8003faa <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f9a:	4b2c      	ldr	r3, [pc, #176]	; (800404c <HAL_RCC_ClockConfig+0x220>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d119      	bne.n	8003fda <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e0bf      	b.n	800412a <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d003      	beq.n	8003fba <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fb6:	2b03      	cmp	r3, #3
 8003fb8:	d107      	bne.n	8003fca <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fba:	4b24      	ldr	r3, [pc, #144]	; (800404c <HAL_RCC_ClockConfig+0x220>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d109      	bne.n	8003fda <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e0af      	b.n	800412a <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fca:	4b20      	ldr	r3, [pc, #128]	; (800404c <HAL_RCC_ClockConfig+0x220>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e0a7      	b.n	800412a <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fda:	4b1c      	ldr	r3, [pc, #112]	; (800404c <HAL_RCC_ClockConfig+0x220>)
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f023 0203 	bic.w	r2, r3, #3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	4919      	ldr	r1, [pc, #100]	; (800404c <HAL_RCC_ClockConfig+0x220>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fec:	f7fd f848 	bl	8001080 <HAL_GetTick>
 8003ff0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ff2:	e00a      	b.n	800400a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ff4:	f7fd f844 	bl	8001080 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004002:	4293      	cmp	r3, r2
 8004004:	d901      	bls.n	800400a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e08f      	b.n	800412a <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800400a:	4b10      	ldr	r3, [pc, #64]	; (800404c <HAL_RCC_ClockConfig+0x220>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f003 020c 	and.w	r2, r3, #12
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	429a      	cmp	r2, r3
 800401a:	d1eb      	bne.n	8003ff4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800401c:	4b0a      	ldr	r3, [pc, #40]	; (8004048 <HAL_RCC_ClockConfig+0x21c>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0307 	and.w	r3, r3, #7
 8004024:	683a      	ldr	r2, [r7, #0]
 8004026:	429a      	cmp	r2, r3
 8004028:	d212      	bcs.n	8004050 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800402a:	4b07      	ldr	r3, [pc, #28]	; (8004048 <HAL_RCC_ClockConfig+0x21c>)
 800402c:	683a      	ldr	r2, [r7, #0]
 800402e:	b2d2      	uxtb	r2, r2
 8004030:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004032:	4b05      	ldr	r3, [pc, #20]	; (8004048 <HAL_RCC_ClockConfig+0x21c>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0307 	and.w	r3, r3, #7
 800403a:	683a      	ldr	r2, [r7, #0]
 800403c:	429a      	cmp	r2, r3
 800403e:	d007      	beq.n	8004050 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e072      	b.n	800412a <HAL_RCC_ClockConfig+0x2fe>
 8004044:	0800c4c8 	.word	0x0800c4c8
 8004048:	40023c00 	.word	0x40023c00
 800404c:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0304 	and.w	r3, r3, #4
 8004058:	2b00      	cmp	r3, #0
 800405a:	d025      	beq.n	80040a8 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d018      	beq.n	8004096 <HAL_RCC_ClockConfig+0x26a>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800406c:	d013      	beq.n	8004096 <HAL_RCC_ClockConfig+0x26a>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004076:	d00e      	beq.n	8004096 <HAL_RCC_ClockConfig+0x26a>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004080:	d009      	beq.n	8004096 <HAL_RCC_ClockConfig+0x26a>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800408a:	d004      	beq.n	8004096 <HAL_RCC_ClockConfig+0x26a>
 800408c:	f240 21c5 	movw	r1, #709	; 0x2c5
 8004090:	4828      	ldr	r0, [pc, #160]	; (8004134 <HAL_RCC_ClockConfig+0x308>)
 8004092:	f7fc fdc6 	bl	8000c22 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004096:	4b28      	ldr	r3, [pc, #160]	; (8004138 <HAL_RCC_ClockConfig+0x30c>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	4925      	ldr	r1, [pc, #148]	; (8004138 <HAL_RCC_ClockConfig+0x30c>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0308 	and.w	r3, r3, #8
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d026      	beq.n	8004102 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d018      	beq.n	80040ee <HAL_RCC_ClockConfig+0x2c2>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040c4:	d013      	beq.n	80040ee <HAL_RCC_ClockConfig+0x2c2>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80040ce:	d00e      	beq.n	80040ee <HAL_RCC_ClockConfig+0x2c2>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80040d8:	d009      	beq.n	80040ee <HAL_RCC_ClockConfig+0x2c2>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80040e2:	d004      	beq.n	80040ee <HAL_RCC_ClockConfig+0x2c2>
 80040e4:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80040e8:	4812      	ldr	r0, [pc, #72]	; (8004134 <HAL_RCC_ClockConfig+0x308>)
 80040ea:	f7fc fd9a 	bl	8000c22 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040ee:	4b12      	ldr	r3, [pc, #72]	; (8004138 <HAL_RCC_ClockConfig+0x30c>)
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	00db      	lsls	r3, r3, #3
 80040fc:	490e      	ldr	r1, [pc, #56]	; (8004138 <HAL_RCC_ClockConfig+0x30c>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004102:	f000 f821 	bl	8004148 <HAL_RCC_GetSysClockFreq>
 8004106:	4602      	mov	r2, r0
 8004108:	4b0b      	ldr	r3, [pc, #44]	; (8004138 <HAL_RCC_ClockConfig+0x30c>)
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	091b      	lsrs	r3, r3, #4
 800410e:	f003 030f 	and.w	r3, r3, #15
 8004112:	490a      	ldr	r1, [pc, #40]	; (800413c <HAL_RCC_ClockConfig+0x310>)
 8004114:	5ccb      	ldrb	r3, [r1, r3]
 8004116:	fa22 f303 	lsr.w	r3, r2, r3
 800411a:	4a09      	ldr	r2, [pc, #36]	; (8004140 <HAL_RCC_ClockConfig+0x314>)
 800411c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800411e:	4b09      	ldr	r3, [pc, #36]	; (8004144 <HAL_RCC_ClockConfig+0x318>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4618      	mov	r0, r3
 8004124:	f7fc ff68 	bl	8000ff8 <HAL_InitTick>

  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3710      	adds	r7, #16
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	0800c4c8 	.word	0x0800c4c8
 8004138:	40023800 	.word	0x40023800
 800413c:	0800c5bc 	.word	0x0800c5bc
 8004140:	20000000 	.word	0x20000000
 8004144:	20000004 	.word	0x20000004

08004148 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004148:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800414c:	b084      	sub	sp, #16
 800414e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004150:	2300      	movs	r3, #0
 8004152:	607b      	str	r3, [r7, #4]
 8004154:	2300      	movs	r3, #0
 8004156:	60fb      	str	r3, [r7, #12]
 8004158:	2300      	movs	r3, #0
 800415a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800415c:	2300      	movs	r3, #0
 800415e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004160:	4b67      	ldr	r3, [pc, #412]	; (8004300 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f003 030c 	and.w	r3, r3, #12
 8004168:	2b08      	cmp	r3, #8
 800416a:	d00d      	beq.n	8004188 <HAL_RCC_GetSysClockFreq+0x40>
 800416c:	2b08      	cmp	r3, #8
 800416e:	f200 80bd 	bhi.w	80042ec <HAL_RCC_GetSysClockFreq+0x1a4>
 8004172:	2b00      	cmp	r3, #0
 8004174:	d002      	beq.n	800417c <HAL_RCC_GetSysClockFreq+0x34>
 8004176:	2b04      	cmp	r3, #4
 8004178:	d003      	beq.n	8004182 <HAL_RCC_GetSysClockFreq+0x3a>
 800417a:	e0b7      	b.n	80042ec <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800417c:	4b61      	ldr	r3, [pc, #388]	; (8004304 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800417e:	60bb      	str	r3, [r7, #8]
       break;
 8004180:	e0b7      	b.n	80042f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004182:	4b61      	ldr	r3, [pc, #388]	; (8004308 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004184:	60bb      	str	r3, [r7, #8]
      break;
 8004186:	e0b4      	b.n	80042f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004188:	4b5d      	ldr	r3, [pc, #372]	; (8004300 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004190:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004192:	4b5b      	ldr	r3, [pc, #364]	; (8004300 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d04d      	beq.n	800423a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800419e:	4b58      	ldr	r3, [pc, #352]	; (8004300 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	099b      	lsrs	r3, r3, #6
 80041a4:	461a      	mov	r2, r3
 80041a6:	f04f 0300 	mov.w	r3, #0
 80041aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80041ae:	f04f 0100 	mov.w	r1, #0
 80041b2:	ea02 0800 	and.w	r8, r2, r0
 80041b6:	ea03 0901 	and.w	r9, r3, r1
 80041ba:	4640      	mov	r0, r8
 80041bc:	4649      	mov	r1, r9
 80041be:	f04f 0200 	mov.w	r2, #0
 80041c2:	f04f 0300 	mov.w	r3, #0
 80041c6:	014b      	lsls	r3, r1, #5
 80041c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80041cc:	0142      	lsls	r2, r0, #5
 80041ce:	4610      	mov	r0, r2
 80041d0:	4619      	mov	r1, r3
 80041d2:	ebb0 0008 	subs.w	r0, r0, r8
 80041d6:	eb61 0109 	sbc.w	r1, r1, r9
 80041da:	f04f 0200 	mov.w	r2, #0
 80041de:	f04f 0300 	mov.w	r3, #0
 80041e2:	018b      	lsls	r3, r1, #6
 80041e4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80041e8:	0182      	lsls	r2, r0, #6
 80041ea:	1a12      	subs	r2, r2, r0
 80041ec:	eb63 0301 	sbc.w	r3, r3, r1
 80041f0:	f04f 0000 	mov.w	r0, #0
 80041f4:	f04f 0100 	mov.w	r1, #0
 80041f8:	00d9      	lsls	r1, r3, #3
 80041fa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80041fe:	00d0      	lsls	r0, r2, #3
 8004200:	4602      	mov	r2, r0
 8004202:	460b      	mov	r3, r1
 8004204:	eb12 0208 	adds.w	r2, r2, r8
 8004208:	eb43 0309 	adc.w	r3, r3, r9
 800420c:	f04f 0000 	mov.w	r0, #0
 8004210:	f04f 0100 	mov.w	r1, #0
 8004214:	0259      	lsls	r1, r3, #9
 8004216:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800421a:	0250      	lsls	r0, r2, #9
 800421c:	4602      	mov	r2, r0
 800421e:	460b      	mov	r3, r1
 8004220:	4610      	mov	r0, r2
 8004222:	4619      	mov	r1, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	461a      	mov	r2, r3
 8004228:	f04f 0300 	mov.w	r3, #0
 800422c:	f7fc f830 	bl	8000290 <__aeabi_uldivmod>
 8004230:	4602      	mov	r2, r0
 8004232:	460b      	mov	r3, r1
 8004234:	4613      	mov	r3, r2
 8004236:	60fb      	str	r3, [r7, #12]
 8004238:	e04a      	b.n	80042d0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800423a:	4b31      	ldr	r3, [pc, #196]	; (8004300 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	099b      	lsrs	r3, r3, #6
 8004240:	461a      	mov	r2, r3
 8004242:	f04f 0300 	mov.w	r3, #0
 8004246:	f240 10ff 	movw	r0, #511	; 0x1ff
 800424a:	f04f 0100 	mov.w	r1, #0
 800424e:	ea02 0400 	and.w	r4, r2, r0
 8004252:	ea03 0501 	and.w	r5, r3, r1
 8004256:	4620      	mov	r0, r4
 8004258:	4629      	mov	r1, r5
 800425a:	f04f 0200 	mov.w	r2, #0
 800425e:	f04f 0300 	mov.w	r3, #0
 8004262:	014b      	lsls	r3, r1, #5
 8004264:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004268:	0142      	lsls	r2, r0, #5
 800426a:	4610      	mov	r0, r2
 800426c:	4619      	mov	r1, r3
 800426e:	1b00      	subs	r0, r0, r4
 8004270:	eb61 0105 	sbc.w	r1, r1, r5
 8004274:	f04f 0200 	mov.w	r2, #0
 8004278:	f04f 0300 	mov.w	r3, #0
 800427c:	018b      	lsls	r3, r1, #6
 800427e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004282:	0182      	lsls	r2, r0, #6
 8004284:	1a12      	subs	r2, r2, r0
 8004286:	eb63 0301 	sbc.w	r3, r3, r1
 800428a:	f04f 0000 	mov.w	r0, #0
 800428e:	f04f 0100 	mov.w	r1, #0
 8004292:	00d9      	lsls	r1, r3, #3
 8004294:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004298:	00d0      	lsls	r0, r2, #3
 800429a:	4602      	mov	r2, r0
 800429c:	460b      	mov	r3, r1
 800429e:	1912      	adds	r2, r2, r4
 80042a0:	eb45 0303 	adc.w	r3, r5, r3
 80042a4:	f04f 0000 	mov.w	r0, #0
 80042a8:	f04f 0100 	mov.w	r1, #0
 80042ac:	0299      	lsls	r1, r3, #10
 80042ae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80042b2:	0290      	lsls	r0, r2, #10
 80042b4:	4602      	mov	r2, r0
 80042b6:	460b      	mov	r3, r1
 80042b8:	4610      	mov	r0, r2
 80042ba:	4619      	mov	r1, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	461a      	mov	r2, r3
 80042c0:	f04f 0300 	mov.w	r3, #0
 80042c4:	f7fb ffe4 	bl	8000290 <__aeabi_uldivmod>
 80042c8:	4602      	mov	r2, r0
 80042ca:	460b      	mov	r3, r1
 80042cc:	4613      	mov	r3, r2
 80042ce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80042d0:	4b0b      	ldr	r3, [pc, #44]	; (8004300 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	0c1b      	lsrs	r3, r3, #16
 80042d6:	f003 0303 	and.w	r3, r3, #3
 80042da:	3301      	adds	r3, #1
 80042dc:	005b      	lsls	r3, r3, #1
 80042de:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80042e0:	68fa      	ldr	r2, [r7, #12]
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e8:	60bb      	str	r3, [r7, #8]
      break;
 80042ea:	e002      	b.n	80042f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042ec:	4b05      	ldr	r3, [pc, #20]	; (8004304 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80042ee:	60bb      	str	r3, [r7, #8]
      break;
 80042f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042f2:	68bb      	ldr	r3, [r7, #8]
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3710      	adds	r7, #16
 80042f8:	46bd      	mov	sp, r7
 80042fa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80042fe:	bf00      	nop
 8004300:	40023800 	.word	0x40023800
 8004304:	00f42400 	.word	0x00f42400
 8004308:	007a1200 	.word	0x007a1200

0800430c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800430c:	b480      	push	{r7}
 800430e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004310:	4b03      	ldr	r3, [pc, #12]	; (8004320 <HAL_RCC_GetHCLKFreq+0x14>)
 8004312:	681b      	ldr	r3, [r3, #0]
}
 8004314:	4618      	mov	r0, r3
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	20000000 	.word	0x20000000

08004324 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004328:	f7ff fff0 	bl	800430c <HAL_RCC_GetHCLKFreq>
 800432c:	4602      	mov	r2, r0
 800432e:	4b05      	ldr	r3, [pc, #20]	; (8004344 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	0a9b      	lsrs	r3, r3, #10
 8004334:	f003 0307 	and.w	r3, r3, #7
 8004338:	4903      	ldr	r1, [pc, #12]	; (8004348 <HAL_RCC_GetPCLK1Freq+0x24>)
 800433a:	5ccb      	ldrb	r3, [r1, r3]
 800433c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004340:	4618      	mov	r0, r3
 8004342:	bd80      	pop	{r7, pc}
 8004344:	40023800 	.word	0x40023800
 8004348:	0800c5cc 	.word	0x0800c5cc

0800434c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004350:	f7ff ffdc 	bl	800430c <HAL_RCC_GetHCLKFreq>
 8004354:	4602      	mov	r2, r0
 8004356:	4b05      	ldr	r3, [pc, #20]	; (800436c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	0b5b      	lsrs	r3, r3, #13
 800435c:	f003 0307 	and.w	r3, r3, #7
 8004360:	4903      	ldr	r1, [pc, #12]	; (8004370 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004362:	5ccb      	ldrb	r3, [r1, r3]
 8004364:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004368:	4618      	mov	r0, r3
 800436a:	bd80      	pop	{r7, pc}
 800436c:	40023800 	.word	0x40023800
 8004370:	0800c5cc 	.word	0x0800c5cc

08004374 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d101      	bne.n	8004386 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e18c      	b.n	80046a0 <HAL_SPI_Init+0x32c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a75      	ldr	r2, [pc, #468]	; (8004560 <HAL_SPI_Init+0x1ec>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d018      	beq.n	80043c2 <HAL_SPI_Init+0x4e>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a73      	ldr	r2, [pc, #460]	; (8004564 <HAL_SPI_Init+0x1f0>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d013      	beq.n	80043c2 <HAL_SPI_Init+0x4e>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a72      	ldr	r2, [pc, #456]	; (8004568 <HAL_SPI_Init+0x1f4>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d00e      	beq.n	80043c2 <HAL_SPI_Init+0x4e>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a70      	ldr	r2, [pc, #448]	; (800456c <HAL_SPI_Init+0x1f8>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d009      	beq.n	80043c2 <HAL_SPI_Init+0x4e>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a6f      	ldr	r2, [pc, #444]	; (8004570 <HAL_SPI_Init+0x1fc>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d004      	beq.n	80043c2 <HAL_SPI_Init+0x4e>
 80043b8:	f44f 71a1 	mov.w	r1, #322	; 0x142
 80043bc:	486d      	ldr	r0, [pc, #436]	; (8004574 <HAL_SPI_Init+0x200>)
 80043be:	f7fc fc30 	bl	8000c22 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d009      	beq.n	80043de <HAL_SPI_Init+0x6a>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043d2:	d004      	beq.n	80043de <HAL_SPI_Init+0x6a>
 80043d4:	f240 1143 	movw	r1, #323	; 0x143
 80043d8:	4866      	ldr	r0, [pc, #408]	; (8004574 <HAL_SPI_Init+0x200>)
 80043da:	f7fc fc22 	bl	8000c22 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00e      	beq.n	8004404 <HAL_SPI_Init+0x90>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043ee:	d009      	beq.n	8004404 <HAL_SPI_Init+0x90>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043f8:	d004      	beq.n	8004404 <HAL_SPI_Init+0x90>
 80043fa:	f44f 71a2 	mov.w	r1, #324	; 0x144
 80043fe:	485d      	ldr	r0, [pc, #372]	; (8004574 <HAL_SPI_Init+0x200>)
 8004400:	f7fc fc0f 	bl	8000c22 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800440c:	d008      	beq.n	8004420 <HAL_SPI_Init+0xac>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d004      	beq.n	8004420 <HAL_SPI_Init+0xac>
 8004416:	f240 1145 	movw	r1, #325	; 0x145
 800441a:	4856      	ldr	r0, [pc, #344]	; (8004574 <HAL_SPI_Init+0x200>)
 800441c:	f7fc fc01 	bl	8000c22 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004428:	d00d      	beq.n	8004446 <HAL_SPI_Init+0xd2>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d009      	beq.n	8004446 <HAL_SPI_Init+0xd2>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800443a:	d004      	beq.n	8004446 <HAL_SPI_Init+0xd2>
 800443c:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8004440:	484c      	ldr	r0, [pc, #304]	; (8004574 <HAL_SPI_Init+0x200>)
 8004442:	f7fc fbee 	bl	8000c22 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	69db      	ldr	r3, [r3, #28]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d020      	beq.n	8004490 <HAL_SPI_Init+0x11c>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	69db      	ldr	r3, [r3, #28]
 8004452:	2b08      	cmp	r3, #8
 8004454:	d01c      	beq.n	8004490 <HAL_SPI_Init+0x11c>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	69db      	ldr	r3, [r3, #28]
 800445a:	2b10      	cmp	r3, #16
 800445c:	d018      	beq.n	8004490 <HAL_SPI_Init+0x11c>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	69db      	ldr	r3, [r3, #28]
 8004462:	2b18      	cmp	r3, #24
 8004464:	d014      	beq.n	8004490 <HAL_SPI_Init+0x11c>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	69db      	ldr	r3, [r3, #28]
 800446a:	2b20      	cmp	r3, #32
 800446c:	d010      	beq.n	8004490 <HAL_SPI_Init+0x11c>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	69db      	ldr	r3, [r3, #28]
 8004472:	2b28      	cmp	r3, #40	; 0x28
 8004474:	d00c      	beq.n	8004490 <HAL_SPI_Init+0x11c>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	69db      	ldr	r3, [r3, #28]
 800447a:	2b30      	cmp	r3, #48	; 0x30
 800447c:	d008      	beq.n	8004490 <HAL_SPI_Init+0x11c>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	69db      	ldr	r3, [r3, #28]
 8004482:	2b38      	cmp	r3, #56	; 0x38
 8004484:	d004      	beq.n	8004490 <HAL_SPI_Init+0x11c>
 8004486:	f240 1147 	movw	r1, #327	; 0x147
 800448a:	483a      	ldr	r0, [pc, #232]	; (8004574 <HAL_SPI_Init+0x200>)
 800448c:	f7fc fbc9 	bl	8000c22 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a1b      	ldr	r3, [r3, #32]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d008      	beq.n	80044aa <HAL_SPI_Init+0x136>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a1b      	ldr	r3, [r3, #32]
 800449c:	2b80      	cmp	r3, #128	; 0x80
 800449e:	d004      	beq.n	80044aa <HAL_SPI_Init+0x136>
 80044a0:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80044a4:	4833      	ldr	r0, [pc, #204]	; (8004574 <HAL_SPI_Init+0x200>)
 80044a6:	f7fc fbbc 	bl	8000c22 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d008      	beq.n	80044c4 <HAL_SPI_Init+0x150>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b6:	2b10      	cmp	r3, #16
 80044b8:	d004      	beq.n	80044c4 <HAL_SPI_Init+0x150>
 80044ba:	f240 1149 	movw	r1, #329	; 0x149
 80044be:	482d      	ldr	r0, [pc, #180]	; (8004574 <HAL_SPI_Init+0x200>)
 80044c0:	f7fc fbaf 	bl	8000c22 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d155      	bne.n	8004578 <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d008      	beq.n	80044e6 <HAL_SPI_Init+0x172>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d004      	beq.n	80044e6 <HAL_SPI_Init+0x172>
 80044dc:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 80044e0:	4824      	ldr	r0, [pc, #144]	; (8004574 <HAL_SPI_Init+0x200>)
 80044e2:	f7fc fb9e 	bl	8000c22 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d008      	beq.n	8004500 <HAL_SPI_Init+0x18c>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d004      	beq.n	8004500 <HAL_SPI_Init+0x18c>
 80044f6:	f240 114d 	movw	r1, #333	; 0x14d
 80044fa:	481e      	ldr	r0, [pc, #120]	; (8004574 <HAL_SPI_Init+0x200>)
 80044fc:	f7fc fb91 	bl	8000c22 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004508:	d125      	bne.n	8004556 <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	69db      	ldr	r3, [r3, #28]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d05d      	beq.n	80045ce <HAL_SPI_Init+0x25a>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	69db      	ldr	r3, [r3, #28]
 8004516:	2b08      	cmp	r3, #8
 8004518:	d059      	beq.n	80045ce <HAL_SPI_Init+0x25a>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	69db      	ldr	r3, [r3, #28]
 800451e:	2b10      	cmp	r3, #16
 8004520:	d055      	beq.n	80045ce <HAL_SPI_Init+0x25a>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	69db      	ldr	r3, [r3, #28]
 8004526:	2b18      	cmp	r3, #24
 8004528:	d051      	beq.n	80045ce <HAL_SPI_Init+0x25a>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	69db      	ldr	r3, [r3, #28]
 800452e:	2b20      	cmp	r3, #32
 8004530:	d04d      	beq.n	80045ce <HAL_SPI_Init+0x25a>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	69db      	ldr	r3, [r3, #28]
 8004536:	2b28      	cmp	r3, #40	; 0x28
 8004538:	d049      	beq.n	80045ce <HAL_SPI_Init+0x25a>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	69db      	ldr	r3, [r3, #28]
 800453e:	2b30      	cmp	r3, #48	; 0x30
 8004540:	d045      	beq.n	80045ce <HAL_SPI_Init+0x25a>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	69db      	ldr	r3, [r3, #28]
 8004546:	2b38      	cmp	r3, #56	; 0x38
 8004548:	d041      	beq.n	80045ce <HAL_SPI_Init+0x25a>
 800454a:	f240 1151 	movw	r1, #337	; 0x151
 800454e:	4809      	ldr	r0, [pc, #36]	; (8004574 <HAL_SPI_Init+0x200>)
 8004550:	f7fc fb67 	bl	8000c22 <assert_failed>
 8004554:	e03b      	b.n	80045ce <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	61da      	str	r2, [r3, #28]
 800455c:	e037      	b.n	80045ce <HAL_SPI_Init+0x25a>
 800455e:	bf00      	nop
 8004560:	40013000 	.word	0x40013000
 8004564:	40003800 	.word	0x40003800
 8004568:	40003c00 	.word	0x40003c00
 800456c:	40013400 	.word	0x40013400
 8004570:	40015000 	.word	0x40015000
 8004574:	0800c500 	.word	0x0800c500
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	69db      	ldr	r3, [r3, #28]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d020      	beq.n	80045c2 <HAL_SPI_Init+0x24e>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	69db      	ldr	r3, [r3, #28]
 8004584:	2b08      	cmp	r3, #8
 8004586:	d01c      	beq.n	80045c2 <HAL_SPI_Init+0x24e>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	69db      	ldr	r3, [r3, #28]
 800458c:	2b10      	cmp	r3, #16
 800458e:	d018      	beq.n	80045c2 <HAL_SPI_Init+0x24e>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	69db      	ldr	r3, [r3, #28]
 8004594:	2b18      	cmp	r3, #24
 8004596:	d014      	beq.n	80045c2 <HAL_SPI_Init+0x24e>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	69db      	ldr	r3, [r3, #28]
 800459c:	2b20      	cmp	r3, #32
 800459e:	d010      	beq.n	80045c2 <HAL_SPI_Init+0x24e>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	69db      	ldr	r3, [r3, #28]
 80045a4:	2b28      	cmp	r3, #40	; 0x28
 80045a6:	d00c      	beq.n	80045c2 <HAL_SPI_Init+0x24e>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	69db      	ldr	r3, [r3, #28]
 80045ac:	2b30      	cmp	r3, #48	; 0x30
 80045ae:	d008      	beq.n	80045c2 <HAL_SPI_Init+0x24e>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	69db      	ldr	r3, [r3, #28]
 80045b4:	2b38      	cmp	r3, #56	; 0x38
 80045b6:	d004      	beq.n	80045c2 <HAL_SPI_Init+0x24e>
 80045b8:	f240 115b 	movw	r1, #347	; 0x15b
 80045bc:	483a      	ldr	r0, [pc, #232]	; (80046a8 <HAL_SPI_Init+0x334>)
 80045be:	f7fc fb30 	bl	8000c22 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d106      	bne.n	80045ee <HAL_SPI_Init+0x27a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f7fc fb5b 	bl	8000ca4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2202      	movs	r2, #2
 80045f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004604:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004616:	431a      	orrs	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004620:	431a      	orrs	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	f003 0302 	and.w	r3, r3, #2
 800462a:	431a      	orrs	r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	695b      	ldr	r3, [r3, #20]
 8004630:	f003 0301 	and.w	r3, r3, #1
 8004634:	431a      	orrs	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800463e:	431a      	orrs	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	69db      	ldr	r3, [r3, #28]
 8004644:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004648:	431a      	orrs	r2, r3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a1b      	ldr	r3, [r3, #32]
 800464e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004652:	ea42 0103 	orr.w	r1, r2, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800465a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	430a      	orrs	r2, r1
 8004664:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	0c1b      	lsrs	r3, r3, #16
 800466c:	f003 0104 	and.w	r1, r3, #4
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004674:	f003 0210 	and.w	r2, r3, #16
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	430a      	orrs	r2, r1
 800467e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	69da      	ldr	r2, [r3, #28]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800468e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2201      	movs	r2, #1
 800469a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3708      	adds	r7, #8
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	0800c500 	.word	0x0800c500

080046ac <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b08c      	sub	sp, #48	; 0x30
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	607a      	str	r2, [r7, #4]
 80046b8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80046ba:	2301      	movs	r3, #1
 80046bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80046be:	2300      	movs	r3, #0
 80046c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d004      	beq.n	80046d6 <HAL_SPI_TransmitReceive+0x2a>
 80046cc:	f240 417e 	movw	r1, #1150	; 0x47e
 80046d0:	4884      	ldr	r0, [pc, #528]	; (80048e4 <HAL_SPI_TransmitReceive+0x238>)
 80046d2:	f7fc faa6 	bl	8000c22 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d101      	bne.n	80046e4 <HAL_SPI_TransmitReceive+0x38>
 80046e0:	2302      	movs	r3, #2
 80046e2:	e18d      	b.n	8004a00 <HAL_SPI_TransmitReceive+0x354>
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046ec:	f7fc fcc8 	bl	8001080 <HAL_GetTick>
 80046f0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004702:	887b      	ldrh	r3, [r7, #2]
 8004704:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004706:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800470a:	2b01      	cmp	r3, #1
 800470c:	d00f      	beq.n	800472e <HAL_SPI_TransmitReceive+0x82>
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004714:	d107      	bne.n	8004726 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d103      	bne.n	8004726 <HAL_SPI_TransmitReceive+0x7a>
 800471e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004722:	2b04      	cmp	r3, #4
 8004724:	d003      	beq.n	800472e <HAL_SPI_TransmitReceive+0x82>
  {
    errorcode = HAL_BUSY;
 8004726:	2302      	movs	r3, #2
 8004728:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800472c:	e15e      	b.n	80049ec <HAL_SPI_TransmitReceive+0x340>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d005      	beq.n	8004740 <HAL_SPI_TransmitReceive+0x94>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d002      	beq.n	8004740 <HAL_SPI_TransmitReceive+0x94>
 800473a:	887b      	ldrh	r3, [r7, #2]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d103      	bne.n	8004748 <HAL_SPI_TransmitReceive+0x9c>
  {
    errorcode = HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004746:	e151      	b.n	80049ec <HAL_SPI_TransmitReceive+0x340>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800474e:	b2db      	uxtb	r3, r3
 8004750:	2b04      	cmp	r3, #4
 8004752:	d003      	beq.n	800475c <HAL_SPI_TransmitReceive+0xb0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2205      	movs	r2, #5
 8004758:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	887a      	ldrh	r2, [r7, #2]
 800476c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	887a      	ldrh	r2, [r7, #2]
 8004772:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	68ba      	ldr	r2, [r7, #8]
 8004778:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	887a      	ldrh	r2, [r7, #2]
 800477e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	887a      	ldrh	r2, [r7, #2]
 8004784:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2200      	movs	r2, #0
 800478a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2200      	movs	r2, #0
 8004790:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800479c:	2b40      	cmp	r3, #64	; 0x40
 800479e:	d007      	beq.n	80047b0 <HAL_SPI_TransmitReceive+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047b8:	d178      	bne.n	80048ac <HAL_SPI_TransmitReceive+0x200>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d002      	beq.n	80047c8 <HAL_SPI_TransmitReceive+0x11c>
 80047c2:	8b7b      	ldrh	r3, [r7, #26]
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d166      	bne.n	8004896 <HAL_SPI_TransmitReceive+0x1ea>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047cc:	881a      	ldrh	r2, [r3, #0]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d8:	1c9a      	adds	r2, r3, #2
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	3b01      	subs	r3, #1
 80047e6:	b29a      	uxth	r2, r3
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047ec:	e053      	b.n	8004896 <HAL_SPI_TransmitReceive+0x1ea>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f003 0302 	and.w	r3, r3, #2
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d11b      	bne.n	8004834 <HAL_SPI_TransmitReceive+0x188>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004800:	b29b      	uxth	r3, r3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d016      	beq.n	8004834 <HAL_SPI_TransmitReceive+0x188>
 8004806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004808:	2b01      	cmp	r3, #1
 800480a:	d113      	bne.n	8004834 <HAL_SPI_TransmitReceive+0x188>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004810:	881a      	ldrh	r2, [r3, #0]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481c:	1c9a      	adds	r2, r3, #2
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004826:	b29b      	uxth	r3, r3
 8004828:	3b01      	subs	r3, #1
 800482a:	b29a      	uxth	r2, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004830:	2300      	movs	r3, #0
 8004832:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	2b01      	cmp	r3, #1
 8004840:	d119      	bne.n	8004876 <HAL_SPI_TransmitReceive+0x1ca>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004846:	b29b      	uxth	r3, r3
 8004848:	2b00      	cmp	r3, #0
 800484a:	d014      	beq.n	8004876 <HAL_SPI_TransmitReceive+0x1ca>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68da      	ldr	r2, [r3, #12]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004856:	b292      	uxth	r2, r2
 8004858:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485e:	1c9a      	adds	r2, r3, #2
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004868:	b29b      	uxth	r3, r3
 800486a:	3b01      	subs	r3, #1
 800486c:	b29a      	uxth	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004872:	2301      	movs	r3, #1
 8004874:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004876:	f7fc fc03 	bl	8001080 <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004882:	429a      	cmp	r2, r3
 8004884:	d807      	bhi.n	8004896 <HAL_SPI_TransmitReceive+0x1ea>
 8004886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800488c:	d003      	beq.n	8004896 <HAL_SPI_TransmitReceive+0x1ea>
      {
        errorcode = HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004894:	e0aa      	b.n	80049ec <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800489a:	b29b      	uxth	r3, r3
 800489c:	2b00      	cmp	r3, #0
 800489e:	d1a6      	bne.n	80047ee <HAL_SPI_TransmitReceive+0x142>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d1a1      	bne.n	80047ee <HAL_SPI_TransmitReceive+0x142>
 80048aa:	e07f      	b.n	80049ac <HAL_SPI_TransmitReceive+0x300>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d002      	beq.n	80048ba <HAL_SPI_TransmitReceive+0x20e>
 80048b4:	8b7b      	ldrh	r3, [r7, #26]
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d16e      	bne.n	8004998 <HAL_SPI_TransmitReceive+0x2ec>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	330c      	adds	r3, #12
 80048c4:	7812      	ldrb	r2, [r2, #0]
 80048c6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048cc:	1c5a      	adds	r2, r3, #1
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	3b01      	subs	r3, #1
 80048da:	b29a      	uxth	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048e0:	e05a      	b.n	8004998 <HAL_SPI_TransmitReceive+0x2ec>
 80048e2:	bf00      	nop
 80048e4:	0800c500 	.word	0x0800c500
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d11c      	bne.n	8004930 <HAL_SPI_TransmitReceive+0x284>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d017      	beq.n	8004930 <HAL_SPI_TransmitReceive+0x284>
 8004900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004902:	2b01      	cmp	r3, #1
 8004904:	d114      	bne.n	8004930 <HAL_SPI_TransmitReceive+0x284>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	330c      	adds	r3, #12
 8004910:	7812      	ldrb	r2, [r2, #0]
 8004912:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004918:	1c5a      	adds	r2, r3, #1
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004922:	b29b      	uxth	r3, r3
 8004924:	3b01      	subs	r3, #1
 8004926:	b29a      	uxth	r2, r3
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800492c:	2300      	movs	r3, #0
 800492e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	2b01      	cmp	r3, #1
 800493c:	d119      	bne.n	8004972 <HAL_SPI_TransmitReceive+0x2c6>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004942:	b29b      	uxth	r3, r3
 8004944:	2b00      	cmp	r3, #0
 8004946:	d014      	beq.n	8004972 <HAL_SPI_TransmitReceive+0x2c6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68da      	ldr	r2, [r3, #12]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004952:	b2d2      	uxtb	r2, r2
 8004954:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800495a:	1c5a      	adds	r2, r3, #1
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004964:	b29b      	uxth	r3, r3
 8004966:	3b01      	subs	r3, #1
 8004968:	b29a      	uxth	r2, r3
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800496e:	2301      	movs	r3, #1
 8004970:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004972:	f7fc fb85 	bl	8001080 <HAL_GetTick>
 8004976:	4602      	mov	r2, r0
 8004978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800497e:	429a      	cmp	r2, r3
 8004980:	d803      	bhi.n	800498a <HAL_SPI_TransmitReceive+0x2de>
 8004982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004988:	d102      	bne.n	8004990 <HAL_SPI_TransmitReceive+0x2e4>
 800498a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800498c:	2b00      	cmp	r3, #0
 800498e:	d103      	bne.n	8004998 <HAL_SPI_TransmitReceive+0x2ec>
      {
        errorcode = HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004996:	e029      	b.n	80049ec <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800499c:	b29b      	uxth	r3, r3
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1a2      	bne.n	80048e8 <HAL_SPI_TransmitReceive+0x23c>
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d19d      	bne.n	80048e8 <HAL_SPI_TransmitReceive+0x23c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80049b0:	68f8      	ldr	r0, [r7, #12]
 80049b2:	f000 f8b1 	bl	8004b18 <SPI_EndRxTxTransaction>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d006      	beq.n	80049ca <HAL_SPI_TransmitReceive+0x31e>
  {
    errorcode = HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2220      	movs	r2, #32
 80049c6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80049c8:	e010      	b.n	80049ec <HAL_SPI_TransmitReceive+0x340>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d10b      	bne.n	80049ea <HAL_SPI_TransmitReceive+0x33e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80049d2:	2300      	movs	r3, #0
 80049d4:	617b      	str	r3, [r7, #20]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	617b      	str	r3, [r7, #20]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	617b      	str	r3, [r7, #20]
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	e000      	b.n	80049ec <HAL_SPI_TransmitReceive+0x340>
  }

error :
 80049ea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80049fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3730      	adds	r7, #48	; 0x30
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b088      	sub	sp, #32
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	603b      	str	r3, [r7, #0]
 8004a14:	4613      	mov	r3, r2
 8004a16:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004a18:	f7fc fb32 	bl	8001080 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a20:	1a9b      	subs	r3, r3, r2
 8004a22:	683a      	ldr	r2, [r7, #0]
 8004a24:	4413      	add	r3, r2
 8004a26:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004a28:	f7fc fb2a 	bl	8001080 <HAL_GetTick>
 8004a2c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004a2e:	4b39      	ldr	r3, [pc, #228]	; (8004b14 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	015b      	lsls	r3, r3, #5
 8004a34:	0d1b      	lsrs	r3, r3, #20
 8004a36:	69fa      	ldr	r2, [r7, #28]
 8004a38:	fb02 f303 	mul.w	r3, r2, r3
 8004a3c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a3e:	e054      	b.n	8004aea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a46:	d050      	beq.n	8004aea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a48:	f7fc fb1a 	bl	8001080 <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	69fa      	ldr	r2, [r7, #28]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d902      	bls.n	8004a5e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d13d      	bne.n	8004ada <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	685a      	ldr	r2, [r3, #4]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004a6c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a76:	d111      	bne.n	8004a9c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a80:	d004      	beq.n	8004a8c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a8a:	d107      	bne.n	8004a9c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a9a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004aa4:	d10f      	bne.n	8004ac6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ab4:	601a      	str	r2, [r3, #0]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ac4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e017      	b.n	8004b0a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d101      	bne.n	8004ae4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	689a      	ldr	r2, [r3, #8]
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	4013      	ands	r3, r2
 8004af4:	68ba      	ldr	r2, [r7, #8]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	bf0c      	ite	eq
 8004afa:	2301      	moveq	r3, #1
 8004afc:	2300      	movne	r3, #0
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	461a      	mov	r2, r3
 8004b02:	79fb      	ldrb	r3, [r7, #7]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d19b      	bne.n	8004a40 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3720      	adds	r7, #32
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	20000000 	.word	0x20000000

08004b18 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b088      	sub	sp, #32
 8004b1c:	af02      	add	r7, sp, #8
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004b24:	4b1b      	ldr	r3, [pc, #108]	; (8004b94 <SPI_EndRxTxTransaction+0x7c>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a1b      	ldr	r2, [pc, #108]	; (8004b98 <SPI_EndRxTxTransaction+0x80>)
 8004b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b2e:	0d5b      	lsrs	r3, r3, #21
 8004b30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004b34:	fb02 f303 	mul.w	r3, r2, r3
 8004b38:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b42:	d112      	bne.n	8004b6a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	9300      	str	r3, [sp, #0]
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	2180      	movs	r1, #128	; 0x80
 8004b4e:	68f8      	ldr	r0, [r7, #12]
 8004b50:	f7ff ff5a 	bl	8004a08 <SPI_WaitFlagStateUntilTimeout>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d016      	beq.n	8004b88 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b5e:	f043 0220 	orr.w	r2, r3, #32
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e00f      	b.n	8004b8a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00a      	beq.n	8004b86 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	3b01      	subs	r3, #1
 8004b74:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b80:	2b80      	cmp	r3, #128	; 0x80
 8004b82:	d0f2      	beq.n	8004b6a <SPI_EndRxTxTransaction+0x52>
 8004b84:	e000      	b.n	8004b88 <SPI_EndRxTxTransaction+0x70>
        break;
 8004b86:	bf00      	nop
  }

  return HAL_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3718      	adds	r7, #24
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	20000000 	.word	0x20000000
 8004b98:	165e9f81 	.word	0x165e9f81

08004b9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d101      	bne.n	8004bae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e0a0      	b.n	8004cf0 <HAL_UART_Init+0x154>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d02c      	beq.n	8004c10 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a4f      	ldr	r2, [pc, #316]	; (8004cf8 <HAL_UART_Init+0x15c>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d00e      	beq.n	8004bde <HAL_UART_Init+0x42>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a4d      	ldr	r2, [pc, #308]	; (8004cfc <HAL_UART_Init+0x160>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d009      	beq.n	8004bde <HAL_UART_Init+0x42>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a4c      	ldr	r2, [pc, #304]	; (8004d00 <HAL_UART_Init+0x164>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d004      	beq.n	8004bde <HAL_UART_Init+0x42>
 8004bd4:	f44f 71b9 	mov.w	r1, #370	; 0x172
 8004bd8:	484a      	ldr	r0, [pc, #296]	; (8004d04 <HAL_UART_Init+0x168>)
 8004bda:	f7fc f822 	bl	8000c22 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d028      	beq.n	8004c38 <HAL_UART_Init+0x9c>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	699b      	ldr	r3, [r3, #24]
 8004bea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bee:	d023      	beq.n	8004c38 <HAL_UART_Init+0x9c>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	699b      	ldr	r3, [r3, #24]
 8004bf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bf8:	d01e      	beq.n	8004c38 <HAL_UART_Init+0x9c>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	699b      	ldr	r3, [r3, #24]
 8004bfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c02:	d019      	beq.n	8004c38 <HAL_UART_Init+0x9c>
 8004c04:	f240 1173 	movw	r1, #371	; 0x173
 8004c08:	483e      	ldr	r0, [pc, #248]	; (8004d04 <HAL_UART_Init+0x168>)
 8004c0a:	f7fc f80a 	bl	8000c22 <assert_failed>
 8004c0e:	e013      	b.n	8004c38 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a38      	ldr	r2, [pc, #224]	; (8004cf8 <HAL_UART_Init+0x15c>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d00e      	beq.n	8004c38 <HAL_UART_Init+0x9c>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a37      	ldr	r2, [pc, #220]	; (8004cfc <HAL_UART_Init+0x160>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d009      	beq.n	8004c38 <HAL_UART_Init+0x9c>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a35      	ldr	r2, [pc, #212]	; (8004d00 <HAL_UART_Init+0x164>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d004      	beq.n	8004c38 <HAL_UART_Init+0x9c>
 8004c2e:	f240 1177 	movw	r1, #375	; 0x177
 8004c32:	4834      	ldr	r0, [pc, #208]	; (8004d04 <HAL_UART_Init+0x168>)
 8004c34:	f7fb fff5 	bl	8000c22 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d009      	beq.n	8004c54 <HAL_UART_Init+0xb8>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c48:	d004      	beq.n	8004c54 <HAL_UART_Init+0xb8>
 8004c4a:	f240 1179 	movw	r1, #377	; 0x179
 8004c4e:	482d      	ldr	r0, [pc, #180]	; (8004d04 <HAL_UART_Init+0x168>)
 8004c50:	f7fb ffe7 	bl	8000c22 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	69db      	ldr	r3, [r3, #28]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d009      	beq.n	8004c70 <HAL_UART_Init+0xd4>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	69db      	ldr	r3, [r3, #28]
 8004c60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c64:	d004      	beq.n	8004c70 <HAL_UART_Init+0xd4>
 8004c66:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8004c6a:	4826      	ldr	r0, [pc, #152]	; (8004d04 <HAL_UART_Init+0x168>)
 8004c6c:	f7fb ffd9 	bl	8000c22 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d106      	bne.n	8004c8a <HAL_UART_Init+0xee>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f7fc f923 	bl	8000ed0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2224      	movs	r2, #36	; 0x24
 8004c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	68da      	ldr	r2, [r3, #12]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ca0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 f930 	bl	8004f08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	691a      	ldr	r2, [r3, #16]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004cb6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	695a      	ldr	r2, [r3, #20]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cc6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68da      	ldr	r2, [r3, #12]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004cd6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2220      	movs	r2, #32
 8004ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2220      	movs	r2, #32
 8004cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3708      	adds	r7, #8
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	40011000 	.word	0x40011000
 8004cfc:	40004400 	.word	0x40004400
 8004d00:	40011400 	.word	0x40011400
 8004d04:	0800c538 	.word	0x0800c538

08004d08 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b08a      	sub	sp, #40	; 0x28
 8004d0c:	af02      	add	r7, sp, #8
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	603b      	str	r3, [r7, #0]
 8004d14:	4613      	mov	r3, r2
 8004d16:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	2b20      	cmp	r3, #32
 8004d26:	d17c      	bne.n	8004e22 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d002      	beq.n	8004d34 <HAL_UART_Transmit+0x2c>
 8004d2e:	88fb      	ldrh	r3, [r7, #6]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d101      	bne.n	8004d38 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e075      	b.n	8004e24 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d101      	bne.n	8004d46 <HAL_UART_Transmit+0x3e>
 8004d42:	2302      	movs	r3, #2
 8004d44:	e06e      	b.n	8004e24 <HAL_UART_Transmit+0x11c>
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2200      	movs	r2, #0
 8004d52:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2221      	movs	r2, #33	; 0x21
 8004d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d5c:	f7fc f990 	bl	8001080 <HAL_GetTick>
 8004d60:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	88fa      	ldrh	r2, [r7, #6]
 8004d66:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	88fa      	ldrh	r2, [r7, #6]
 8004d6c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d76:	d108      	bne.n	8004d8a <HAL_UART_Transmit+0x82>
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d104      	bne.n	8004d8a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004d80:	2300      	movs	r3, #0
 8004d82:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	61bb      	str	r3, [r7, #24]
 8004d88:	e003      	b.n	8004d92 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004d9a:	e02a      	b.n	8004df2 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	9300      	str	r3, [sp, #0]
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	2200      	movs	r2, #0
 8004da4:	2180      	movs	r1, #128	; 0x80
 8004da6:	68f8      	ldr	r0, [r7, #12]
 8004da8:	f000 f840 	bl	8004e2c <UART_WaitOnFlagUntilTimeout>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d001      	beq.n	8004db6 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e036      	b.n	8004e24 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d10b      	bne.n	8004dd4 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	881b      	ldrh	r3, [r3, #0]
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004dca:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	3302      	adds	r3, #2
 8004dd0:	61bb      	str	r3, [r7, #24]
 8004dd2:	e007      	b.n	8004de4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	781a      	ldrb	r2, [r3, #0]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	3301      	adds	r3, #1
 8004de2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	3b01      	subs	r3, #1
 8004dec:	b29a      	uxth	r2, r3
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d1cf      	bne.n	8004d9c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	9300      	str	r3, [sp, #0]
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	2200      	movs	r2, #0
 8004e04:	2140      	movs	r1, #64	; 0x40
 8004e06:	68f8      	ldr	r0, [r7, #12]
 8004e08:	f000 f810 	bl	8004e2c <UART_WaitOnFlagUntilTimeout>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d001      	beq.n	8004e16 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e006      	b.n	8004e24 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2220      	movs	r2, #32
 8004e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	e000      	b.n	8004e24 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004e22:	2302      	movs	r3, #2
  }
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3720      	adds	r7, #32
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b090      	sub	sp, #64	; 0x40
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	603b      	str	r3, [r7, #0]
 8004e38:	4613      	mov	r3, r2
 8004e3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e3c:	e050      	b.n	8004ee0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e44:	d04c      	beq.n	8004ee0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004e46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d007      	beq.n	8004e5c <UART_WaitOnFlagUntilTimeout+0x30>
 8004e4c:	f7fc f918 	bl	8001080 <HAL_GetTick>
 8004e50:	4602      	mov	r2, r0
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d241      	bcs.n	8004ee0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	330c      	adds	r3, #12
 8004e62:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e66:	e853 3f00 	ldrex	r3, [r3]
 8004e6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	330c      	adds	r3, #12
 8004e7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e7c:	637a      	str	r2, [r7, #52]	; 0x34
 8004e7e:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e84:	e841 2300 	strex	r3, r2, [r1]
 8004e88:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d1e5      	bne.n	8004e5c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	3314      	adds	r3, #20
 8004e96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	e853 3f00 	ldrex	r3, [r3]
 8004e9e:	613b      	str	r3, [r7, #16]
   return(result);
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	f023 0301 	bic.w	r3, r3, #1
 8004ea6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	3314      	adds	r3, #20
 8004eae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004eb0:	623a      	str	r2, [r7, #32]
 8004eb2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb4:	69f9      	ldr	r1, [r7, #28]
 8004eb6:	6a3a      	ldr	r2, [r7, #32]
 8004eb8:	e841 2300 	strex	r3, r2, [r1]
 8004ebc:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d1e5      	bne.n	8004e90 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2220      	movs	r2, #32
 8004ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2220      	movs	r2, #32
 8004ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	e00f      	b.n	8004f00 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	4013      	ands	r3, r2
 8004eea:	68ba      	ldr	r2, [r7, #8]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	bf0c      	ite	eq
 8004ef0:	2301      	moveq	r3, #1
 8004ef2:	2300      	movne	r3, #0
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	79fb      	ldrb	r3, [r7, #7]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d09f      	beq.n	8004e3e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3740      	adds	r7, #64	; 0x40
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f0c:	b09f      	sub	sp, #124	; 0x7c
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	66f8      	str	r0, [r7, #108]	; 0x6c
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8004f12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f14:	685a      	ldr	r2, [r3, #4]
 8004f16:	4b9b      	ldr	r3, [pc, #620]	; (8005184 <UART_SetConfig+0x27c>)
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d904      	bls.n	8004f26 <UART_SetConfig+0x1e>
 8004f1c:	f640 6156 	movw	r1, #3670	; 0xe56
 8004f20:	4899      	ldr	r0, [pc, #612]	; (8005188 <UART_SetConfig+0x280>)
 8004f22:	f7fb fe7e 	bl	8000c22 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8004f26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d009      	beq.n	8004f42 <UART_SetConfig+0x3a>
 8004f2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f36:	d004      	beq.n	8004f42 <UART_SetConfig+0x3a>
 8004f38:	f640 6157 	movw	r1, #3671	; 0xe57
 8004f3c:	4892      	ldr	r0, [pc, #584]	; (8005188 <UART_SetConfig+0x280>)
 8004f3e:	f7fb fe70 	bl	8000c22 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8004f42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00e      	beq.n	8004f68 <UART_SetConfig+0x60>
 8004f4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f52:	d009      	beq.n	8004f68 <UART_SetConfig+0x60>
 8004f54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004f5c:	d004      	beq.n	8004f68 <UART_SetConfig+0x60>
 8004f5e:	f640 6158 	movw	r1, #3672	; 0xe58
 8004f62:	4889      	ldr	r0, [pc, #548]	; (8005188 <UART_SetConfig+0x280>)
 8004f64:	f7fb fe5d 	bl	8000c22 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8004f68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f6a:	695a      	ldr	r2, [r3, #20]
 8004f6c:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8004f70:	4013      	ands	r3, r2
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d103      	bne.n	8004f7e <UART_SetConfig+0x76>
 8004f76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f78:	695b      	ldr	r3, [r3, #20]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d104      	bne.n	8004f88 <UART_SetConfig+0x80>
 8004f7e:	f640 6159 	movw	r1, #3673	; 0xe59
 8004f82:	4881      	ldr	r0, [pc, #516]	; (8005188 <UART_SetConfig+0x280>)
 8004f84:	f7fb fe4d 	bl	8000c22 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004f92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f94:	68d9      	ldr	r1, [r3, #12]
 8004f96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	ea40 0301 	orr.w	r3, r0, r1
 8004f9e:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004fa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fa2:	689a      	ldr	r2, [r3, #8]
 8004fa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	431a      	orrs	r2, r3
 8004faa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fac:	695b      	ldr	r3, [r3, #20]
 8004fae:	431a      	orrs	r2, r3
 8004fb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fb2:	69db      	ldr	r3, [r3, #28]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004fb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004fc2:	f021 010c 	bic.w	r1, r1, #12
 8004fc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004fcc:	430b      	orrs	r3, r1
 8004fce:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004fd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	695b      	ldr	r3, [r3, #20]
 8004fd6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004fda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fdc:	6999      	ldr	r1, [r3, #24]
 8004fde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	ea40 0301 	orr.w	r3, r0, r1
 8004fe6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004fe8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	4b67      	ldr	r3, [pc, #412]	; (800518c <UART_SetConfig+0x284>)
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d004      	beq.n	8004ffc <UART_SetConfig+0xf4>
 8004ff2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	4b66      	ldr	r3, [pc, #408]	; (8005190 <UART_SetConfig+0x288>)
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d103      	bne.n	8005004 <UART_SetConfig+0xfc>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ffc:	f7ff f9a6 	bl	800434c <HAL_RCC_GetPCLK2Freq>
 8005000:	6778      	str	r0, [r7, #116]	; 0x74
 8005002:	e002      	b.n	800500a <UART_SetConfig+0x102>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005004:	f7ff f98e 	bl	8004324 <HAL_RCC_GetPCLK1Freq>
 8005008:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800500a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800500c:	69db      	ldr	r3, [r3, #28]
 800500e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005012:	f040 80c1 	bne.w	8005198 <UART_SetConfig+0x290>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005016:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005018:	461c      	mov	r4, r3
 800501a:	f04f 0500 	mov.w	r5, #0
 800501e:	4622      	mov	r2, r4
 8005020:	462b      	mov	r3, r5
 8005022:	1891      	adds	r1, r2, r2
 8005024:	6439      	str	r1, [r7, #64]	; 0x40
 8005026:	415b      	adcs	r3, r3
 8005028:	647b      	str	r3, [r7, #68]	; 0x44
 800502a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800502e:	1912      	adds	r2, r2, r4
 8005030:	eb45 0303 	adc.w	r3, r5, r3
 8005034:	f04f 0000 	mov.w	r0, #0
 8005038:	f04f 0100 	mov.w	r1, #0
 800503c:	00d9      	lsls	r1, r3, #3
 800503e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005042:	00d0      	lsls	r0, r2, #3
 8005044:	4602      	mov	r2, r0
 8005046:	460b      	mov	r3, r1
 8005048:	1911      	adds	r1, r2, r4
 800504a:	6639      	str	r1, [r7, #96]	; 0x60
 800504c:	416b      	adcs	r3, r5
 800504e:	667b      	str	r3, [r7, #100]	; 0x64
 8005050:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	461a      	mov	r2, r3
 8005056:	f04f 0300 	mov.w	r3, #0
 800505a:	1891      	adds	r1, r2, r2
 800505c:	63b9      	str	r1, [r7, #56]	; 0x38
 800505e:	415b      	adcs	r3, r3
 8005060:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005062:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005066:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800506a:	f7fb f911 	bl	8000290 <__aeabi_uldivmod>
 800506e:	4602      	mov	r2, r0
 8005070:	460b      	mov	r3, r1
 8005072:	4b48      	ldr	r3, [pc, #288]	; (8005194 <UART_SetConfig+0x28c>)
 8005074:	fba3 2302 	umull	r2, r3, r3, r2
 8005078:	095b      	lsrs	r3, r3, #5
 800507a:	011e      	lsls	r6, r3, #4
 800507c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800507e:	461c      	mov	r4, r3
 8005080:	f04f 0500 	mov.w	r5, #0
 8005084:	4622      	mov	r2, r4
 8005086:	462b      	mov	r3, r5
 8005088:	1891      	adds	r1, r2, r2
 800508a:	6339      	str	r1, [r7, #48]	; 0x30
 800508c:	415b      	adcs	r3, r3
 800508e:	637b      	str	r3, [r7, #52]	; 0x34
 8005090:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005094:	1912      	adds	r2, r2, r4
 8005096:	eb45 0303 	adc.w	r3, r5, r3
 800509a:	f04f 0000 	mov.w	r0, #0
 800509e:	f04f 0100 	mov.w	r1, #0
 80050a2:	00d9      	lsls	r1, r3, #3
 80050a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80050a8:	00d0      	lsls	r0, r2, #3
 80050aa:	4602      	mov	r2, r0
 80050ac:	460b      	mov	r3, r1
 80050ae:	1911      	adds	r1, r2, r4
 80050b0:	65b9      	str	r1, [r7, #88]	; 0x58
 80050b2:	416b      	adcs	r3, r5
 80050b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	461a      	mov	r2, r3
 80050bc:	f04f 0300 	mov.w	r3, #0
 80050c0:	1891      	adds	r1, r2, r2
 80050c2:	62b9      	str	r1, [r7, #40]	; 0x28
 80050c4:	415b      	adcs	r3, r3
 80050c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80050cc:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80050d0:	f7fb f8de 	bl	8000290 <__aeabi_uldivmod>
 80050d4:	4602      	mov	r2, r0
 80050d6:	460b      	mov	r3, r1
 80050d8:	4b2e      	ldr	r3, [pc, #184]	; (8005194 <UART_SetConfig+0x28c>)
 80050da:	fba3 1302 	umull	r1, r3, r3, r2
 80050de:	095b      	lsrs	r3, r3, #5
 80050e0:	2164      	movs	r1, #100	; 0x64
 80050e2:	fb01 f303 	mul.w	r3, r1, r3
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	00db      	lsls	r3, r3, #3
 80050ea:	3332      	adds	r3, #50	; 0x32
 80050ec:	4a29      	ldr	r2, [pc, #164]	; (8005194 <UART_SetConfig+0x28c>)
 80050ee:	fba2 2303 	umull	r2, r3, r2, r3
 80050f2:	095b      	lsrs	r3, r3, #5
 80050f4:	005b      	lsls	r3, r3, #1
 80050f6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80050fa:	441e      	add	r6, r3
 80050fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050fe:	4618      	mov	r0, r3
 8005100:	f04f 0100 	mov.w	r1, #0
 8005104:	4602      	mov	r2, r0
 8005106:	460b      	mov	r3, r1
 8005108:	1894      	adds	r4, r2, r2
 800510a:	623c      	str	r4, [r7, #32]
 800510c:	415b      	adcs	r3, r3
 800510e:	627b      	str	r3, [r7, #36]	; 0x24
 8005110:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005114:	1812      	adds	r2, r2, r0
 8005116:	eb41 0303 	adc.w	r3, r1, r3
 800511a:	f04f 0400 	mov.w	r4, #0
 800511e:	f04f 0500 	mov.w	r5, #0
 8005122:	00dd      	lsls	r5, r3, #3
 8005124:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005128:	00d4      	lsls	r4, r2, #3
 800512a:	4622      	mov	r2, r4
 800512c:	462b      	mov	r3, r5
 800512e:	1814      	adds	r4, r2, r0
 8005130:	653c      	str	r4, [r7, #80]	; 0x50
 8005132:	414b      	adcs	r3, r1
 8005134:	657b      	str	r3, [r7, #84]	; 0x54
 8005136:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	461a      	mov	r2, r3
 800513c:	f04f 0300 	mov.w	r3, #0
 8005140:	1891      	adds	r1, r2, r2
 8005142:	61b9      	str	r1, [r7, #24]
 8005144:	415b      	adcs	r3, r3
 8005146:	61fb      	str	r3, [r7, #28]
 8005148:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800514c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005150:	f7fb f89e 	bl	8000290 <__aeabi_uldivmod>
 8005154:	4602      	mov	r2, r0
 8005156:	460b      	mov	r3, r1
 8005158:	4b0e      	ldr	r3, [pc, #56]	; (8005194 <UART_SetConfig+0x28c>)
 800515a:	fba3 1302 	umull	r1, r3, r3, r2
 800515e:	095b      	lsrs	r3, r3, #5
 8005160:	2164      	movs	r1, #100	; 0x64
 8005162:	fb01 f303 	mul.w	r3, r1, r3
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	00db      	lsls	r3, r3, #3
 800516a:	3332      	adds	r3, #50	; 0x32
 800516c:	4a09      	ldr	r2, [pc, #36]	; (8005194 <UART_SetConfig+0x28c>)
 800516e:	fba2 2303 	umull	r2, r3, r2, r3
 8005172:	095b      	lsrs	r3, r3, #5
 8005174:	f003 0207 	and.w	r2, r3, #7
 8005178:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4432      	add	r2, r6
 800517e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005180:	e0c4      	b.n	800530c <UART_SetConfig+0x404>
 8005182:	bf00      	nop
 8005184:	00a037a0 	.word	0x00a037a0
 8005188:	0800c538 	.word	0x0800c538
 800518c:	40011000 	.word	0x40011000
 8005190:	40011400 	.word	0x40011400
 8005194:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005198:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800519a:	461c      	mov	r4, r3
 800519c:	f04f 0500 	mov.w	r5, #0
 80051a0:	4622      	mov	r2, r4
 80051a2:	462b      	mov	r3, r5
 80051a4:	1891      	adds	r1, r2, r2
 80051a6:	6139      	str	r1, [r7, #16]
 80051a8:	415b      	adcs	r3, r3
 80051aa:	617b      	str	r3, [r7, #20]
 80051ac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80051b0:	1912      	adds	r2, r2, r4
 80051b2:	eb45 0303 	adc.w	r3, r5, r3
 80051b6:	f04f 0000 	mov.w	r0, #0
 80051ba:	f04f 0100 	mov.w	r1, #0
 80051be:	00d9      	lsls	r1, r3, #3
 80051c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80051c4:	00d0      	lsls	r0, r2, #3
 80051c6:	4602      	mov	r2, r0
 80051c8:	460b      	mov	r3, r1
 80051ca:	eb12 0804 	adds.w	r8, r2, r4
 80051ce:	eb43 0905 	adc.w	r9, r3, r5
 80051d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	4618      	mov	r0, r3
 80051d8:	f04f 0100 	mov.w	r1, #0
 80051dc:	f04f 0200 	mov.w	r2, #0
 80051e0:	f04f 0300 	mov.w	r3, #0
 80051e4:	008b      	lsls	r3, r1, #2
 80051e6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80051ea:	0082      	lsls	r2, r0, #2
 80051ec:	4640      	mov	r0, r8
 80051ee:	4649      	mov	r1, r9
 80051f0:	f7fb f84e 	bl	8000290 <__aeabi_uldivmod>
 80051f4:	4602      	mov	r2, r0
 80051f6:	460b      	mov	r3, r1
 80051f8:	4b47      	ldr	r3, [pc, #284]	; (8005318 <UART_SetConfig+0x410>)
 80051fa:	fba3 2302 	umull	r2, r3, r3, r2
 80051fe:	095b      	lsrs	r3, r3, #5
 8005200:	011e      	lsls	r6, r3, #4
 8005202:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005204:	4618      	mov	r0, r3
 8005206:	f04f 0100 	mov.w	r1, #0
 800520a:	4602      	mov	r2, r0
 800520c:	460b      	mov	r3, r1
 800520e:	1894      	adds	r4, r2, r2
 8005210:	60bc      	str	r4, [r7, #8]
 8005212:	415b      	adcs	r3, r3
 8005214:	60fb      	str	r3, [r7, #12]
 8005216:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800521a:	1812      	adds	r2, r2, r0
 800521c:	eb41 0303 	adc.w	r3, r1, r3
 8005220:	f04f 0400 	mov.w	r4, #0
 8005224:	f04f 0500 	mov.w	r5, #0
 8005228:	00dd      	lsls	r5, r3, #3
 800522a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800522e:	00d4      	lsls	r4, r2, #3
 8005230:	4622      	mov	r2, r4
 8005232:	462b      	mov	r3, r5
 8005234:	1814      	adds	r4, r2, r0
 8005236:	64bc      	str	r4, [r7, #72]	; 0x48
 8005238:	414b      	adcs	r3, r1
 800523a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800523c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	4618      	mov	r0, r3
 8005242:	f04f 0100 	mov.w	r1, #0
 8005246:	f04f 0200 	mov.w	r2, #0
 800524a:	f04f 0300 	mov.w	r3, #0
 800524e:	008b      	lsls	r3, r1, #2
 8005250:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005254:	0082      	lsls	r2, r0, #2
 8005256:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800525a:	f7fb f819 	bl	8000290 <__aeabi_uldivmod>
 800525e:	4602      	mov	r2, r0
 8005260:	460b      	mov	r3, r1
 8005262:	4b2d      	ldr	r3, [pc, #180]	; (8005318 <UART_SetConfig+0x410>)
 8005264:	fba3 1302 	umull	r1, r3, r3, r2
 8005268:	095b      	lsrs	r3, r3, #5
 800526a:	2164      	movs	r1, #100	; 0x64
 800526c:	fb01 f303 	mul.w	r3, r1, r3
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	011b      	lsls	r3, r3, #4
 8005274:	3332      	adds	r3, #50	; 0x32
 8005276:	4a28      	ldr	r2, [pc, #160]	; (8005318 <UART_SetConfig+0x410>)
 8005278:	fba2 2303 	umull	r2, r3, r2, r3
 800527c:	095b      	lsrs	r3, r3, #5
 800527e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005282:	441e      	add	r6, r3
 8005284:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005286:	4618      	mov	r0, r3
 8005288:	f04f 0100 	mov.w	r1, #0
 800528c:	4602      	mov	r2, r0
 800528e:	460b      	mov	r3, r1
 8005290:	1894      	adds	r4, r2, r2
 8005292:	603c      	str	r4, [r7, #0]
 8005294:	415b      	adcs	r3, r3
 8005296:	607b      	str	r3, [r7, #4]
 8005298:	e9d7 2300 	ldrd	r2, r3, [r7]
 800529c:	1812      	adds	r2, r2, r0
 800529e:	eb41 0303 	adc.w	r3, r1, r3
 80052a2:	f04f 0400 	mov.w	r4, #0
 80052a6:	f04f 0500 	mov.w	r5, #0
 80052aa:	00dd      	lsls	r5, r3, #3
 80052ac:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80052b0:	00d4      	lsls	r4, r2, #3
 80052b2:	4622      	mov	r2, r4
 80052b4:	462b      	mov	r3, r5
 80052b6:	eb12 0a00 	adds.w	sl, r2, r0
 80052ba:	eb43 0b01 	adc.w	fp, r3, r1
 80052be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	4618      	mov	r0, r3
 80052c4:	f04f 0100 	mov.w	r1, #0
 80052c8:	f04f 0200 	mov.w	r2, #0
 80052cc:	f04f 0300 	mov.w	r3, #0
 80052d0:	008b      	lsls	r3, r1, #2
 80052d2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80052d6:	0082      	lsls	r2, r0, #2
 80052d8:	4650      	mov	r0, sl
 80052da:	4659      	mov	r1, fp
 80052dc:	f7fa ffd8 	bl	8000290 <__aeabi_uldivmod>
 80052e0:	4602      	mov	r2, r0
 80052e2:	460b      	mov	r3, r1
 80052e4:	4b0c      	ldr	r3, [pc, #48]	; (8005318 <UART_SetConfig+0x410>)
 80052e6:	fba3 1302 	umull	r1, r3, r3, r2
 80052ea:	095b      	lsrs	r3, r3, #5
 80052ec:	2164      	movs	r1, #100	; 0x64
 80052ee:	fb01 f303 	mul.w	r3, r1, r3
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	011b      	lsls	r3, r3, #4
 80052f6:	3332      	adds	r3, #50	; 0x32
 80052f8:	4a07      	ldr	r2, [pc, #28]	; (8005318 <UART_SetConfig+0x410>)
 80052fa:	fba2 2303 	umull	r2, r3, r2, r3
 80052fe:	095b      	lsrs	r3, r3, #5
 8005300:	f003 020f 	and.w	r2, r3, #15
 8005304:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4432      	add	r2, r6
 800530a:	609a      	str	r2, [r3, #8]
}
 800530c:	bf00      	nop
 800530e:	377c      	adds	r7, #124	; 0x7c
 8005310:	46bd      	mov	sp, r7
 8005312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005316:	bf00      	nop
 8005318:	51eb851f 	.word	0x51eb851f

0800531c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800531c:	b084      	sub	sp, #16
 800531e:	b580      	push	{r7, lr}
 8005320:	b084      	sub	sp, #16
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
 8005326:	f107 001c 	add.w	r0, r7, #28
 800532a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800532e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005330:	2b01      	cmp	r3, #1
 8005332:	d122      	bne.n	800537a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005338:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005348:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800535c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800535e:	2b01      	cmp	r3, #1
 8005360:	d105      	bne.n	800536e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 f9a0 	bl	80056b4 <USB_CoreReset>
 8005374:	4603      	mov	r3, r0
 8005376:	73fb      	strb	r3, [r7, #15]
 8005378:	e01a      	b.n	80053b0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 f994 	bl	80056b4 <USB_CoreReset>
 800538c:	4603      	mov	r3, r0
 800538e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005390:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005392:	2b00      	cmp	r3, #0
 8005394:	d106      	bne.n	80053a4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	639a      	str	r2, [r3, #56]	; 0x38
 80053a2:	e005      	b.n	80053b0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80053b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d10b      	bne.n	80053ce <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f043 0206 	orr.w	r2, r3, #6
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	f043 0220 	orr.w	r2, r3, #32
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80053ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3710      	adds	r7, #16
 80053d4:	46bd      	mov	sp, r7
 80053d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053da:	b004      	add	sp, #16
 80053dc:	4770      	bx	lr

080053de <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80053de:	b480      	push	{r7}
 80053e0:	b083      	sub	sp, #12
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	f043 0201 	orr.w	r2, r3, #1
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80053f2:	2300      	movs	r3, #0
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	370c      	adds	r7, #12
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	f023 0201 	bic.w	r2, r3, #1
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	370c      	adds	r7, #12
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr

08005422 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005422:	b580      	push	{r7, lr}
 8005424:	b084      	sub	sp, #16
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
 800542a:	460b      	mov	r3, r1
 800542c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800542e:	2300      	movs	r3, #0
 8005430:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800543e:	78fb      	ldrb	r3, [r7, #3]
 8005440:	2b01      	cmp	r3, #1
 8005442:	d115      	bne.n	8005470 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005450:	2001      	movs	r0, #1
 8005452:	f7fb fe21 	bl	8001098 <HAL_Delay>
      ms++;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	3301      	adds	r3, #1
 800545a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 f91a 	bl	8005696 <USB_GetMode>
 8005462:	4603      	mov	r3, r0
 8005464:	2b01      	cmp	r3, #1
 8005466:	d01e      	beq.n	80054a6 <USB_SetCurrentMode+0x84>
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2b31      	cmp	r3, #49	; 0x31
 800546c:	d9f0      	bls.n	8005450 <USB_SetCurrentMode+0x2e>
 800546e:	e01a      	b.n	80054a6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005470:	78fb      	ldrb	r3, [r7, #3]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d115      	bne.n	80054a2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005482:	2001      	movs	r0, #1
 8005484:	f7fb fe08 	bl	8001098 <HAL_Delay>
      ms++;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	3301      	adds	r3, #1
 800548c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 f901 	bl	8005696 <USB_GetMode>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d005      	beq.n	80054a6 <USB_SetCurrentMode+0x84>
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2b31      	cmp	r3, #49	; 0x31
 800549e:	d9f0      	bls.n	8005482 <USB_SetCurrentMode+0x60>
 80054a0:	e001      	b.n	80054a6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e005      	b.n	80054b2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2b32      	cmp	r3, #50	; 0x32
 80054aa:	d101      	bne.n	80054b0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e000      	b.n	80054b2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3710      	adds	r7, #16
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
	...

080054bc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80054bc:	b480      	push	{r7}
 80054be:	b085      	sub	sp, #20
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80054c6:	2300      	movs	r3, #0
 80054c8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	019b      	lsls	r3, r3, #6
 80054ce:	f043 0220 	orr.w	r2, r3, #32
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	3301      	adds	r3, #1
 80054da:	60fb      	str	r3, [r7, #12]
 80054dc:	4a08      	ldr	r2, [pc, #32]	; (8005500 <USB_FlushTxFifo+0x44>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d901      	bls.n	80054e6 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	e006      	b.n	80054f4 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	f003 0320 	and.w	r3, r3, #32
 80054ee:	2b20      	cmp	r3, #32
 80054f0:	d0f1      	beq.n	80054d6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80054f2:	2300      	movs	r3, #0
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3714      	adds	r7, #20
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr
 8005500:	00030d40 	.word	0x00030d40

08005504 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005504:	b480      	push	{r7}
 8005506:	b085      	sub	sp, #20
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800550c:	2300      	movs	r3, #0
 800550e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2210      	movs	r2, #16
 8005514:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	3301      	adds	r3, #1
 800551a:	60fb      	str	r3, [r7, #12]
 800551c:	4a08      	ldr	r2, [pc, #32]	; (8005540 <USB_FlushRxFifo+0x3c>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d901      	bls.n	8005526 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e006      	b.n	8005534 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	f003 0310 	and.w	r3, r3, #16
 800552e:	2b10      	cmp	r3, #16
 8005530:	d0f1      	beq.n	8005516 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005532:	2300      	movs	r3, #0
}
 8005534:	4618      	mov	r0, r3
 8005536:	3714      	adds	r7, #20
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr
 8005540:	00030d40 	.word	0x00030d40

08005544 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005544:	b480      	push	{r7}
 8005546:	b089      	sub	sp, #36	; 0x24
 8005548:	af00      	add	r7, sp, #0
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	4611      	mov	r1, r2
 8005550:	461a      	mov	r2, r3
 8005552:	460b      	mov	r3, r1
 8005554:	71fb      	strb	r3, [r7, #7]
 8005556:	4613      	mov	r3, r2
 8005558:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005562:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005566:	2b00      	cmp	r3, #0
 8005568:	d123      	bne.n	80055b2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800556a:	88bb      	ldrh	r3, [r7, #4]
 800556c:	3303      	adds	r3, #3
 800556e:	089b      	lsrs	r3, r3, #2
 8005570:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005572:	2300      	movs	r3, #0
 8005574:	61bb      	str	r3, [r7, #24]
 8005576:	e018      	b.n	80055aa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005578:	79fb      	ldrb	r3, [r7, #7]
 800557a:	031a      	lsls	r2, r3, #12
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	4413      	add	r3, r2
 8005580:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005584:	461a      	mov	r2, r3
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	3301      	adds	r3, #1
 8005590:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	3301      	adds	r3, #1
 8005596:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	3301      	adds	r3, #1
 800559c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	3301      	adds	r3, #1
 80055a2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	3301      	adds	r3, #1
 80055a8:	61bb      	str	r3, [r7, #24]
 80055aa:	69ba      	ldr	r2, [r7, #24]
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d3e2      	bcc.n	8005578 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3724      	adds	r7, #36	; 0x24
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b08b      	sub	sp, #44	; 0x2c
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	60b9      	str	r1, [r7, #8]
 80055ca:	4613      	mov	r3, r2
 80055cc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80055d6:	88fb      	ldrh	r3, [r7, #6]
 80055d8:	089b      	lsrs	r3, r3, #2
 80055da:	b29b      	uxth	r3, r3
 80055dc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80055de:	88fb      	ldrh	r3, [r7, #6]
 80055e0:	f003 0303 	and.w	r3, r3, #3
 80055e4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80055e6:	2300      	movs	r3, #0
 80055e8:	623b      	str	r3, [r7, #32]
 80055ea:	e014      	b.n	8005616 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f6:	601a      	str	r2, [r3, #0]
    pDest++;
 80055f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fa:	3301      	adds	r3, #1
 80055fc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80055fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005600:	3301      	adds	r3, #1
 8005602:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005606:	3301      	adds	r3, #1
 8005608:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800560a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560c:	3301      	adds	r3, #1
 800560e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005610:	6a3b      	ldr	r3, [r7, #32]
 8005612:	3301      	adds	r3, #1
 8005614:	623b      	str	r3, [r7, #32]
 8005616:	6a3a      	ldr	r2, [r7, #32]
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	429a      	cmp	r2, r3
 800561c:	d3e6      	bcc.n	80055ec <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800561e:	8bfb      	ldrh	r3, [r7, #30]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d01e      	beq.n	8005662 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005624:	2300      	movs	r3, #0
 8005626:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800562e:	461a      	mov	r2, r3
 8005630:	f107 0310 	add.w	r3, r7, #16
 8005634:	6812      	ldr	r2, [r2, #0]
 8005636:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005638:	693a      	ldr	r2, [r7, #16]
 800563a:	6a3b      	ldr	r3, [r7, #32]
 800563c:	b2db      	uxtb	r3, r3
 800563e:	00db      	lsls	r3, r3, #3
 8005640:	fa22 f303 	lsr.w	r3, r2, r3
 8005644:	b2da      	uxtb	r2, r3
 8005646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005648:	701a      	strb	r2, [r3, #0]
      i++;
 800564a:	6a3b      	ldr	r3, [r7, #32]
 800564c:	3301      	adds	r3, #1
 800564e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005652:	3301      	adds	r3, #1
 8005654:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005656:	8bfb      	ldrh	r3, [r7, #30]
 8005658:	3b01      	subs	r3, #1
 800565a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800565c:	8bfb      	ldrh	r3, [r7, #30]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d1ea      	bne.n	8005638 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005664:	4618      	mov	r0, r3
 8005666:	372c      	adds	r7, #44	; 0x2c
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005670:	b480      	push	{r7}
 8005672:	b085      	sub	sp, #20
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	695b      	ldr	r3, [r3, #20]
 800567c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	699b      	ldr	r3, [r3, #24]
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	4013      	ands	r3, r2
 8005686:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005688:	68fb      	ldr	r3, [r7, #12]
}
 800568a:	4618      	mov	r0, r3
 800568c:	3714      	adds	r7, #20
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr

08005696 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005696:	b480      	push	{r7}
 8005698:	b083      	sub	sp, #12
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	695b      	ldr	r3, [r3, #20]
 80056a2:	f003 0301 	and.w	r3, r3, #1
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	370c      	adds	r7, #12
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr
	...

080056b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b085      	sub	sp, #20
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80056bc:	2300      	movs	r3, #0
 80056be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	3301      	adds	r3, #1
 80056c4:	60fb      	str	r3, [r7, #12]
 80056c6:	4a13      	ldr	r2, [pc, #76]	; (8005714 <USB_CoreReset+0x60>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d901      	bls.n	80056d0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80056cc:	2303      	movs	r3, #3
 80056ce:	e01a      	b.n	8005706 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	691b      	ldr	r3, [r3, #16]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	daf3      	bge.n	80056c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80056d8:	2300      	movs	r3, #0
 80056da:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	f043 0201 	orr.w	r2, r3, #1
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	3301      	adds	r3, #1
 80056ec:	60fb      	str	r3, [r7, #12]
 80056ee:	4a09      	ldr	r2, [pc, #36]	; (8005714 <USB_CoreReset+0x60>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d901      	bls.n	80056f8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80056f4:	2303      	movs	r3, #3
 80056f6:	e006      	b.n	8005706 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	f003 0301 	and.w	r3, r3, #1
 8005700:	2b01      	cmp	r3, #1
 8005702:	d0f1      	beq.n	80056e8 <USB_CoreReset+0x34>

  return HAL_OK;
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	3714      	adds	r7, #20
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
 8005712:	bf00      	nop
 8005714:	00030d40 	.word	0x00030d40

08005718 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005718:	b084      	sub	sp, #16
 800571a:	b580      	push	{r7, lr}
 800571c:	b084      	sub	sp, #16
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
 8005722:	f107 001c 	add.w	r0, r7, #28
 8005726:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005734:	461a      	mov	r2, r3
 8005736:	2300      	movs	r3, #0
 8005738:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800574a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005756:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005766:	2b00      	cmp	r3, #0
 8005768:	d018      	beq.n	800579c <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800576a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576c:	2b01      	cmp	r3, #1
 800576e:	d10a      	bne.n	8005786 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68ba      	ldr	r2, [r7, #8]
 800577a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800577e:	f043 0304 	orr.w	r3, r3, #4
 8005782:	6013      	str	r3, [r2, #0]
 8005784:	e014      	b.n	80057b0 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68ba      	ldr	r2, [r7, #8]
 8005790:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005794:	f023 0304 	bic.w	r3, r3, #4
 8005798:	6013      	str	r3, [r2, #0]
 800579a:	e009      	b.n	80057b0 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68ba      	ldr	r2, [r7, #8]
 80057a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80057aa:	f023 0304 	bic.w	r3, r3, #4
 80057ae:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80057b0:	2110      	movs	r1, #16
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f7ff fe82 	bl	80054bc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f7ff fea3 	bl	8005504 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80057be:	2300      	movs	r3, #0
 80057c0:	60fb      	str	r3, [r7, #12]
 80057c2:	e015      	b.n	80057f0 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	015a      	lsls	r2, r3, #5
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	4413      	add	r3, r2
 80057cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057d0:	461a      	mov	r2, r3
 80057d2:	f04f 33ff 	mov.w	r3, #4294967295
 80057d6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	015a      	lsls	r2, r3, #5
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	4413      	add	r3, r2
 80057e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057e4:	461a      	mov	r2, r3
 80057e6:	2300      	movs	r3, #0
 80057e8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	3301      	adds	r3, #1
 80057ee:	60fb      	str	r3, [r7, #12]
 80057f0:	6a3b      	ldr	r3, [r7, #32]
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d3e5      	bcc.n	80057c4 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f04f 32ff 	mov.w	r2, #4294967295
 8005804:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800580a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800580e:	2b00      	cmp	r3, #0
 8005810:	d00b      	beq.n	800582a <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005818:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a13      	ldr	r2, [pc, #76]	; (800586c <USB_HostInit+0x154>)
 800581e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a13      	ldr	r2, [pc, #76]	; (8005870 <USB_HostInit+0x158>)
 8005824:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005828:	e009      	b.n	800583e <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2280      	movs	r2, #128	; 0x80
 800582e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a10      	ldr	r2, [pc, #64]	; (8005874 <USB_HostInit+0x15c>)
 8005834:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a0f      	ldr	r2, [pc, #60]	; (8005878 <USB_HostInit+0x160>)
 800583a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800583e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005840:	2b00      	cmp	r3, #0
 8005842:	d105      	bne.n	8005850 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	699b      	ldr	r3, [r3, #24]
 8005848:	f043 0210 	orr.w	r2, r3, #16
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	699a      	ldr	r2, [r3, #24]
 8005854:	4b09      	ldr	r3, [pc, #36]	; (800587c <USB_HostInit+0x164>)
 8005856:	4313      	orrs	r3, r2
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800585c:	2300      	movs	r3, #0
}
 800585e:	4618      	mov	r0, r3
 8005860:	3710      	adds	r7, #16
 8005862:	46bd      	mov	sp, r7
 8005864:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005868:	b004      	add	sp, #16
 800586a:	4770      	bx	lr
 800586c:	01000200 	.word	0x01000200
 8005870:	00e00300 	.word	0x00e00300
 8005874:	00600080 	.word	0x00600080
 8005878:	004000e0 	.word	0x004000e0
 800587c:	a3200008 	.word	0xa3200008

08005880 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005880:	b480      	push	{r7}
 8005882:	b085      	sub	sp, #20
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	460b      	mov	r3, r1
 800588a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800589e:	f023 0303 	bic.w	r3, r3, #3
 80058a2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	78fb      	ldrb	r3, [r7, #3]
 80058ae:	f003 0303 	and.w	r3, r3, #3
 80058b2:	68f9      	ldr	r1, [r7, #12]
 80058b4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80058b8:	4313      	orrs	r3, r2
 80058ba:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80058bc:	78fb      	ldrb	r3, [r7, #3]
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d107      	bne.n	80058d2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058c8:	461a      	mov	r2, r3
 80058ca:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80058ce:	6053      	str	r3, [r2, #4]
 80058d0:	e009      	b.n	80058e6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80058d2:	78fb      	ldrb	r3, [r7, #3]
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d106      	bne.n	80058e6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058de:	461a      	mov	r2, r3
 80058e0:	f241 7370 	movw	r3, #6000	; 0x1770
 80058e4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80058e6:	2300      	movs	r3, #0
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3714      	adds	r7, #20
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005900:	2300      	movs	r3, #0
 8005902:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005914:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	68fa      	ldr	r2, [r7, #12]
 800591a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800591e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005922:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005924:	2064      	movs	r0, #100	; 0x64
 8005926:	f7fb fbb7 	bl	8001098 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005932:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005936:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005938:	200a      	movs	r0, #10
 800593a:	f7fb fbad 	bl	8001098 <HAL_Delay>

  return HAL_OK;
 800593e:	2300      	movs	r3, #0
}
 8005940:	4618      	mov	r0, r3
 8005942:	3710      	adds	r7, #16
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005948:	b480      	push	{r7}
 800594a:	b085      	sub	sp, #20
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	460b      	mov	r3, r1
 8005952:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005958:	2300      	movs	r3, #0
 800595a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800596c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005974:	2b00      	cmp	r3, #0
 8005976:	d109      	bne.n	800598c <USB_DriveVbus+0x44>
 8005978:	78fb      	ldrb	r3, [r7, #3]
 800597a:	2b01      	cmp	r3, #1
 800597c:	d106      	bne.n	800598c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005986:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800598a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005992:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005996:	d109      	bne.n	80059ac <USB_DriveVbus+0x64>
 8005998:	78fb      	ldrb	r3, [r7, #3]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d106      	bne.n	80059ac <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80059a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059aa:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3714      	adds	r7, #20
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr

080059ba <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80059ba:	b480      	push	{r7}
 80059bc:	b085      	sub	sp, #20
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80059c6:	2300      	movs	r3, #0
 80059c8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	0c5b      	lsrs	r3, r3, #17
 80059d8:	f003 0303 	and.w	r3, r3, #3
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3714      	adds	r7, #20
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b085      	sub	sp, #20
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	b29b      	uxth	r3, r3
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3714      	adds	r7, #20
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr
	...

08005a0c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b088      	sub	sp, #32
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	4608      	mov	r0, r1
 8005a16:	4611      	mov	r1, r2
 8005a18:	461a      	mov	r2, r3
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	70fb      	strb	r3, [r7, #3]
 8005a1e:	460b      	mov	r3, r1
 8005a20:	70bb      	strb	r3, [r7, #2]
 8005a22:	4613      	mov	r3, r2
 8005a24:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005a26:	2300      	movs	r3, #0
 8005a28:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005a2e:	78fb      	ldrb	r3, [r7, #3]
 8005a30:	015a      	lsls	r2, r3, #5
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	4413      	add	r3, r2
 8005a36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8005a40:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005a42:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005a46:	2b03      	cmp	r3, #3
 8005a48:	d87e      	bhi.n	8005b48 <USB_HC_Init+0x13c>
 8005a4a:	a201      	add	r2, pc, #4	; (adr r2, 8005a50 <USB_HC_Init+0x44>)
 8005a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a50:	08005a61 	.word	0x08005a61
 8005a54:	08005b0b 	.word	0x08005b0b
 8005a58:	08005a61 	.word	0x08005a61
 8005a5c:	08005acd 	.word	0x08005acd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005a60:	78fb      	ldrb	r3, [r7, #3]
 8005a62:	015a      	lsls	r2, r3, #5
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	4413      	add	r3, r2
 8005a68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	f240 439d 	movw	r3, #1181	; 0x49d
 8005a72:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005a74:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	da10      	bge.n	8005a9e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005a7c:	78fb      	ldrb	r3, [r7, #3]
 8005a7e:	015a      	lsls	r2, r3, #5
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	4413      	add	r3, r2
 8005a84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	78fa      	ldrb	r2, [r7, #3]
 8005a8c:	0151      	lsls	r1, r2, #5
 8005a8e:	693a      	ldr	r2, [r7, #16]
 8005a90:	440a      	add	r2, r1
 8005a92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a9a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005a9c:	e057      	b.n	8005b4e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d051      	beq.n	8005b4e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005aaa:	78fb      	ldrb	r3, [r7, #3]
 8005aac:	015a      	lsls	r2, r3, #5
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	78fa      	ldrb	r2, [r7, #3]
 8005aba:	0151      	lsls	r1, r2, #5
 8005abc:	693a      	ldr	r2, [r7, #16]
 8005abe:	440a      	add	r2, r1
 8005ac0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ac4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005ac8:	60d3      	str	r3, [r2, #12]
      break;
 8005aca:	e040      	b.n	8005b4e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005acc:	78fb      	ldrb	r3, [r7, #3]
 8005ace:	015a      	lsls	r2, r3, #5
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ad8:	461a      	mov	r2, r3
 8005ada:	f240 639d 	movw	r3, #1693	; 0x69d
 8005ade:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005ae0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	da34      	bge.n	8005b52 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005ae8:	78fb      	ldrb	r3, [r7, #3]
 8005aea:	015a      	lsls	r2, r3, #5
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	4413      	add	r3, r2
 8005af0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	78fa      	ldrb	r2, [r7, #3]
 8005af8:	0151      	lsls	r1, r2, #5
 8005afa:	693a      	ldr	r2, [r7, #16]
 8005afc:	440a      	add	r2, r1
 8005afe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b06:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005b08:	e023      	b.n	8005b52 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005b0a:	78fb      	ldrb	r3, [r7, #3]
 8005b0c:	015a      	lsls	r2, r3, #5
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	4413      	add	r3, r2
 8005b12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b16:	461a      	mov	r2, r3
 8005b18:	f240 2325 	movw	r3, #549	; 0x225
 8005b1c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005b1e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	da17      	bge.n	8005b56 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005b26:	78fb      	ldrb	r3, [r7, #3]
 8005b28:	015a      	lsls	r2, r3, #5
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	78fa      	ldrb	r2, [r7, #3]
 8005b36:	0151      	lsls	r1, r2, #5
 8005b38:	693a      	ldr	r2, [r7, #16]
 8005b3a:	440a      	add	r2, r1
 8005b3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b40:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005b44:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005b46:	e006      	b.n	8005b56 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	77fb      	strb	r3, [r7, #31]
      break;
 8005b4c:	e004      	b.n	8005b58 <USB_HC_Init+0x14c>
      break;
 8005b4e:	bf00      	nop
 8005b50:	e002      	b.n	8005b58 <USB_HC_Init+0x14c>
      break;
 8005b52:	bf00      	nop
 8005b54:	e000      	b.n	8005b58 <USB_HC_Init+0x14c>
      break;
 8005b56:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b5e:	699a      	ldr	r2, [r3, #24]
 8005b60:	78fb      	ldrb	r3, [r7, #3]
 8005b62:	f003 030f 	and.w	r3, r3, #15
 8005b66:	2101      	movs	r1, #1
 8005b68:	fa01 f303 	lsl.w	r3, r1, r3
 8005b6c:	6939      	ldr	r1, [r7, #16]
 8005b6e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005b72:	4313      	orrs	r3, r2
 8005b74:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	699b      	ldr	r3, [r3, #24]
 8005b7a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005b82:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	da03      	bge.n	8005b92 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005b8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b8e:	61bb      	str	r3, [r7, #24]
 8005b90:	e001      	b.n	8005b96 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8005b92:	2300      	movs	r3, #0
 8005b94:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f7ff ff0f 	bl	80059ba <USB_GetHostSpeed>
 8005b9c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005b9e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	d106      	bne.n	8005bb4 <USB_HC_Init+0x1a8>
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	d003      	beq.n	8005bb4 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005bac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005bb0:	617b      	str	r3, [r7, #20]
 8005bb2:	e001      	b.n	8005bb8 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005bb8:	787b      	ldrb	r3, [r7, #1]
 8005bba:	059b      	lsls	r3, r3, #22
 8005bbc:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005bc0:	78bb      	ldrb	r3, [r7, #2]
 8005bc2:	02db      	lsls	r3, r3, #11
 8005bc4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005bc8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005bca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005bce:	049b      	lsls	r3, r3, #18
 8005bd0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005bd4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005bd6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005bd8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005bdc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005be2:	78fb      	ldrb	r3, [r7, #3]
 8005be4:	0159      	lsls	r1, r3, #5
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	440b      	add	r3, r1
 8005bea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bee:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005bf4:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005bf6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005bfa:	2b03      	cmp	r3, #3
 8005bfc:	d10f      	bne.n	8005c1e <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005bfe:	78fb      	ldrb	r3, [r7, #3]
 8005c00:	015a      	lsls	r2, r3, #5
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	4413      	add	r3, r2
 8005c06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	78fa      	ldrb	r2, [r7, #3]
 8005c0e:	0151      	lsls	r1, r2, #5
 8005c10:	693a      	ldr	r2, [r7, #16]
 8005c12:	440a      	add	r2, r1
 8005c14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c18:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c1c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005c1e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3720      	adds	r7, #32
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b08c      	sub	sp, #48	; 0x30
 8005c2c:	af02      	add	r7, sp, #8
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	60b9      	str	r1, [r7, #8]
 8005c32:	4613      	mov	r3, r2
 8005c34:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	785b      	ldrb	r3, [r3, #1]
 8005c3e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005c40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c44:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d02d      	beq.n	8005cae <USB_HC_StartXfer+0x86>
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	791b      	ldrb	r3, [r3, #4]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d129      	bne.n	8005cae <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005c5a:	79fb      	ldrb	r3, [r7, #7]
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d117      	bne.n	8005c90 <USB_HC_StartXfer+0x68>
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	79db      	ldrb	r3, [r3, #7]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d003      	beq.n	8005c70 <USB_HC_StartXfer+0x48>
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	79db      	ldrb	r3, [r3, #7]
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d10f      	bne.n	8005c90 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	015a      	lsls	r2, r3, #5
 8005c74:	6a3b      	ldr	r3, [r7, #32]
 8005c76:	4413      	add	r3, r2
 8005c78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	69fa      	ldr	r2, [r7, #28]
 8005c80:	0151      	lsls	r1, r2, #5
 8005c82:	6a3a      	ldr	r2, [r7, #32]
 8005c84:	440a      	add	r2, r1
 8005c86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c8e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005c90:	79fb      	ldrb	r3, [r7, #7]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d10b      	bne.n	8005cae <USB_HC_StartXfer+0x86>
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	795b      	ldrb	r3, [r3, #5]
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d107      	bne.n	8005cae <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	785b      	ldrb	r3, [r3, #1]
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	68f8      	ldr	r0, [r7, #12]
 8005ca6:	f000 fa2f 	bl	8006108 <USB_DoPing>
      return HAL_OK;
 8005caa:	2300      	movs	r3, #0
 8005cac:	e0f8      	b.n	8005ea0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	695b      	ldr	r3, [r3, #20]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d018      	beq.n	8005ce8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	695b      	ldr	r3, [r3, #20]
 8005cba:	68ba      	ldr	r2, [r7, #8]
 8005cbc:	8912      	ldrh	r2, [r2, #8]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	3b01      	subs	r3, #1
 8005cc2:	68ba      	ldr	r2, [r7, #8]
 8005cc4:	8912      	ldrh	r2, [r2, #8]
 8005cc6:	fbb3 f3f2 	udiv	r3, r3, r2
 8005cca:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005ccc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005cce:	8b7b      	ldrh	r3, [r7, #26]
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d90b      	bls.n	8005cec <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005cd4:	8b7b      	ldrh	r3, [r7, #26]
 8005cd6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005cd8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005cda:	68ba      	ldr	r2, [r7, #8]
 8005cdc:	8912      	ldrh	r2, [r2, #8]
 8005cde:	fb02 f203 	mul.w	r2, r2, r3
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	611a      	str	r2, [r3, #16]
 8005ce6:	e001      	b.n	8005cec <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	78db      	ldrb	r3, [r3, #3]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d007      	beq.n	8005d04 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005cf4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005cf6:	68ba      	ldr	r2, [r7, #8]
 8005cf8:	8912      	ldrh	r2, [r2, #8]
 8005cfa:	fb02 f203 	mul.w	r2, r2, r3
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	611a      	str	r2, [r3, #16]
 8005d02:	e003      	b.n	8005d0c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	695a      	ldr	r2, [r3, #20]
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005d14:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005d16:	04d9      	lsls	r1, r3, #19
 8005d18:	4b63      	ldr	r3, [pc, #396]	; (8005ea8 <USB_HC_StartXfer+0x280>)
 8005d1a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005d1c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	7a9b      	ldrb	r3, [r3, #10]
 8005d22:	075b      	lsls	r3, r3, #29
 8005d24:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005d28:	69f9      	ldr	r1, [r7, #28]
 8005d2a:	0148      	lsls	r0, r1, #5
 8005d2c:	6a39      	ldr	r1, [r7, #32]
 8005d2e:	4401      	add	r1, r0
 8005d30:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005d34:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005d36:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005d38:	79fb      	ldrb	r3, [r7, #7]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d009      	beq.n	8005d52 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	68d9      	ldr	r1, [r3, #12]
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	015a      	lsls	r2, r3, #5
 8005d46:	6a3b      	ldr	r3, [r7, #32]
 8005d48:	4413      	add	r3, r2
 8005d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d4e:	460a      	mov	r2, r1
 8005d50:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005d52:	6a3b      	ldr	r3, [r7, #32]
 8005d54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	f003 0301 	and.w	r3, r3, #1
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	bf0c      	ite	eq
 8005d62:	2301      	moveq	r3, #1
 8005d64:	2300      	movne	r3, #0
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	015a      	lsls	r2, r3, #5
 8005d6e:	6a3b      	ldr	r3, [r7, #32]
 8005d70:	4413      	add	r3, r2
 8005d72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	69fa      	ldr	r2, [r7, #28]
 8005d7a:	0151      	lsls	r1, r2, #5
 8005d7c:	6a3a      	ldr	r2, [r7, #32]
 8005d7e:	440a      	add	r2, r1
 8005d80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d84:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005d88:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	015a      	lsls	r2, r3, #5
 8005d8e:	6a3b      	ldr	r3, [r7, #32]
 8005d90:	4413      	add	r3, r2
 8005d92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	7e7b      	ldrb	r3, [r7, #25]
 8005d9a:	075b      	lsls	r3, r3, #29
 8005d9c:	69f9      	ldr	r1, [r7, #28]
 8005d9e:	0148      	lsls	r0, r1, #5
 8005da0:	6a39      	ldr	r1, [r7, #32]
 8005da2:	4401      	add	r1, r0
 8005da4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005da8:	4313      	orrs	r3, r2
 8005daa:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005dac:	69fb      	ldr	r3, [r7, #28]
 8005dae:	015a      	lsls	r2, r3, #5
 8005db0:	6a3b      	ldr	r3, [r7, #32]
 8005db2:	4413      	add	r3, r2
 8005db4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005dc2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	78db      	ldrb	r3, [r3, #3]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d004      	beq.n	8005dd6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dd2:	613b      	str	r3, [r7, #16]
 8005dd4:	e003      	b.n	8005dde <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ddc:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005de4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	015a      	lsls	r2, r3, #5
 8005dea:	6a3b      	ldr	r3, [r7, #32]
 8005dec:	4413      	add	r3, r2
 8005dee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005df2:	461a      	mov	r2, r3
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005df8:	79fb      	ldrb	r3, [r7, #7]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d001      	beq.n	8005e02 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	e04e      	b.n	8005ea0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	78db      	ldrb	r3, [r3, #3]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d149      	bne.n	8005e9e <USB_HC_StartXfer+0x276>
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	695b      	ldr	r3, [r3, #20]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d045      	beq.n	8005e9e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	79db      	ldrb	r3, [r3, #7]
 8005e16:	2b03      	cmp	r3, #3
 8005e18:	d830      	bhi.n	8005e7c <USB_HC_StartXfer+0x254>
 8005e1a:	a201      	add	r2, pc, #4	; (adr r2, 8005e20 <USB_HC_StartXfer+0x1f8>)
 8005e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e20:	08005e31 	.word	0x08005e31
 8005e24:	08005e55 	.word	0x08005e55
 8005e28:	08005e31 	.word	0x08005e31
 8005e2c:	08005e55 	.word	0x08005e55
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	695b      	ldr	r3, [r3, #20]
 8005e34:	3303      	adds	r3, #3
 8005e36:	089b      	lsrs	r3, r3, #2
 8005e38:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005e3a:	8afa      	ldrh	r2, [r7, #22]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d91c      	bls.n	8005e80 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	699b      	ldr	r3, [r3, #24]
 8005e4a:	f043 0220 	orr.w	r2, r3, #32
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	619a      	str	r2, [r3, #24]
        }
        break;
 8005e52:	e015      	b.n	8005e80 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	695b      	ldr	r3, [r3, #20]
 8005e58:	3303      	adds	r3, #3
 8005e5a:	089b      	lsrs	r3, r3, #2
 8005e5c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005e5e:	8afa      	ldrh	r2, [r7, #22]
 8005e60:	6a3b      	ldr	r3, [r7, #32]
 8005e62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d90a      	bls.n	8005e84 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	699b      	ldr	r3, [r3, #24]
 8005e72:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	619a      	str	r2, [r3, #24]
        }
        break;
 8005e7a:	e003      	b.n	8005e84 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005e7c:	bf00      	nop
 8005e7e:	e002      	b.n	8005e86 <USB_HC_StartXfer+0x25e>
        break;
 8005e80:	bf00      	nop
 8005e82:	e000      	b.n	8005e86 <USB_HC_StartXfer+0x25e>
        break;
 8005e84:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	68d9      	ldr	r1, [r3, #12]
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	785a      	ldrb	r2, [r3, #1]
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	695b      	ldr	r3, [r3, #20]
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	2000      	movs	r0, #0
 8005e96:	9000      	str	r0, [sp, #0]
 8005e98:	68f8      	ldr	r0, [r7, #12]
 8005e9a:	f7ff fb53 	bl	8005544 <USB_WritePacket>
  }

  return HAL_OK;
 8005e9e:	2300      	movs	r3, #0
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3728      	adds	r7, #40	; 0x28
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}
 8005ea8:	1ff80000 	.word	0x1ff80000

08005eac <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b085      	sub	sp, #20
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ebe:	695b      	ldr	r3, [r3, #20]
 8005ec0:	b29b      	uxth	r3, r3
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3714      	adds	r7, #20
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr

08005ece <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005ece:	b480      	push	{r7}
 8005ed0:	b089      	sub	sp, #36	; 0x24
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
 8005ed6:	460b      	mov	r3, r1
 8005ed8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8005ede:	78fb      	ldrb	r3, [r7, #3]
 8005ee0:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	015a      	lsls	r2, r3, #5
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	4413      	add	r3, r2
 8005eee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	0c9b      	lsrs	r3, r3, #18
 8005ef6:	f003 0303 	and.w	r3, r3, #3
 8005efa:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	015a      	lsls	r2, r3, #5
 8005f00:	69bb      	ldr	r3, [r7, #24]
 8005f02:	4413      	add	r3, r2
 8005f04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	0fdb      	lsrs	r3, r3, #31
 8005f0c:	f003 0301 	and.w	r3, r3, #1
 8005f10:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	f003 0320 	and.w	r3, r3, #32
 8005f1a:	2b20      	cmp	r3, #32
 8005f1c:	d104      	bne.n	8005f28 <USB_HC_Halt+0x5a>
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d101      	bne.n	8005f28 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005f24:	2300      	movs	r3, #0
 8005f26:	e0e8      	b.n	80060fa <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d002      	beq.n	8005f34 <USB_HC_Halt+0x66>
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	2b02      	cmp	r3, #2
 8005f32:	d173      	bne.n	800601c <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	015a      	lsls	r2, r3, #5
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	4413      	add	r3, r2
 8005f3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	697a      	ldr	r2, [r7, #20]
 8005f44:	0151      	lsls	r1, r2, #5
 8005f46:	69ba      	ldr	r2, [r7, #24]
 8005f48:	440a      	add	r2, r1
 8005f4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f52:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	f003 0320 	and.w	r3, r3, #32
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	f040 80cb 	bne.w	80060f8 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f66:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d143      	bne.n	8005ff6 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	015a      	lsls	r2, r3, #5
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	4413      	add	r3, r2
 8005f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	697a      	ldr	r2, [r7, #20]
 8005f7e:	0151      	lsls	r1, r2, #5
 8005f80:	69ba      	ldr	r2, [r7, #24]
 8005f82:	440a      	add	r2, r1
 8005f84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f8c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	015a      	lsls	r2, r3, #5
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	4413      	add	r3, r2
 8005f96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	697a      	ldr	r2, [r7, #20]
 8005f9e:	0151      	lsls	r1, r2, #5
 8005fa0:	69ba      	ldr	r2, [r7, #24]
 8005fa2:	440a      	add	r2, r1
 8005fa4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fa8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005fac:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	015a      	lsls	r2, r3, #5
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	4413      	add	r3, r2
 8005fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	697a      	ldr	r2, [r7, #20]
 8005fbe:	0151      	lsls	r1, r2, #5
 8005fc0:	69ba      	ldr	r2, [r7, #24]
 8005fc2:	440a      	add	r2, r1
 8005fc4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fc8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005fcc:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	61fb      	str	r3, [r7, #28]
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fda:	d81d      	bhi.n	8006018 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	015a      	lsls	r2, r3, #5
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	4413      	add	r3, r2
 8005fe4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ff2:	d0ec      	beq.n	8005fce <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005ff4:	e080      	b.n	80060f8 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	015a      	lsls	r2, r3, #5
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	697a      	ldr	r2, [r7, #20]
 8006006:	0151      	lsls	r1, r2, #5
 8006008:	69ba      	ldr	r2, [r7, #24]
 800600a:	440a      	add	r2, r1
 800600c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006010:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006014:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006016:	e06f      	b.n	80060f8 <USB_HC_Halt+0x22a>
            break;
 8006018:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800601a:	e06d      	b.n	80060f8 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	015a      	lsls	r2, r3, #5
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	4413      	add	r3, r2
 8006024:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	697a      	ldr	r2, [r7, #20]
 800602c:	0151      	lsls	r1, r2, #5
 800602e:	69ba      	ldr	r2, [r7, #24]
 8006030:	440a      	add	r2, r1
 8006032:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006036:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800603a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006042:	691b      	ldr	r3, [r3, #16]
 8006044:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006048:	2b00      	cmp	r3, #0
 800604a:	d143      	bne.n	80060d4 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	015a      	lsls	r2, r3, #5
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	4413      	add	r3, r2
 8006054:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	697a      	ldr	r2, [r7, #20]
 800605c:	0151      	lsls	r1, r2, #5
 800605e:	69ba      	ldr	r2, [r7, #24]
 8006060:	440a      	add	r2, r1
 8006062:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006066:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800606a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	015a      	lsls	r2, r3, #5
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	4413      	add	r3, r2
 8006074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	697a      	ldr	r2, [r7, #20]
 800607c:	0151      	lsls	r1, r2, #5
 800607e:	69ba      	ldr	r2, [r7, #24]
 8006080:	440a      	add	r2, r1
 8006082:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006086:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800608a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	015a      	lsls	r2, r3, #5
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	4413      	add	r3, r2
 8006094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	697a      	ldr	r2, [r7, #20]
 800609c:	0151      	lsls	r1, r2, #5
 800609e:	69ba      	ldr	r2, [r7, #24]
 80060a0:	440a      	add	r2, r1
 80060a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060a6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80060aa:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80060ac:	69fb      	ldr	r3, [r7, #28]
 80060ae:	3301      	adds	r3, #1
 80060b0:	61fb      	str	r3, [r7, #28]
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060b8:	d81d      	bhi.n	80060f6 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	015a      	lsls	r2, r3, #5
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	4413      	add	r3, r2
 80060c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060d0:	d0ec      	beq.n	80060ac <USB_HC_Halt+0x1de>
 80060d2:	e011      	b.n	80060f8 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	015a      	lsls	r2, r3, #5
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	4413      	add	r3, r2
 80060dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	697a      	ldr	r2, [r7, #20]
 80060e4:	0151      	lsls	r1, r2, #5
 80060e6:	69ba      	ldr	r2, [r7, #24]
 80060e8:	440a      	add	r2, r1
 80060ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80060f2:	6013      	str	r3, [r2, #0]
 80060f4:	e000      	b.n	80060f8 <USB_HC_Halt+0x22a>
          break;
 80060f6:	bf00      	nop
    }
  }

  return HAL_OK;
 80060f8:	2300      	movs	r3, #0
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3724      	adds	r7, #36	; 0x24
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr
	...

08006108 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006108:	b480      	push	{r7}
 800610a:	b087      	sub	sp, #28
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	460b      	mov	r3, r1
 8006112:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006118:	78fb      	ldrb	r3, [r7, #3]
 800611a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800611c:	2301      	movs	r3, #1
 800611e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	04da      	lsls	r2, r3, #19
 8006124:	4b15      	ldr	r3, [pc, #84]	; (800617c <USB_DoPing+0x74>)
 8006126:	4013      	ands	r3, r2
 8006128:	693a      	ldr	r2, [r7, #16]
 800612a:	0151      	lsls	r1, r2, #5
 800612c:	697a      	ldr	r2, [r7, #20]
 800612e:	440a      	add	r2, r1
 8006130:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006134:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006138:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	015a      	lsls	r2, r3, #5
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	4413      	add	r3, r2
 8006142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006150:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006158:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	015a      	lsls	r2, r3, #5
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	4413      	add	r3, r2
 8006162:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006166:	461a      	mov	r2, r3
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	371c      	adds	r7, #28
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr
 800617a:	bf00      	nop
 800617c:	1ff80000 	.word	0x1ff80000

08006180 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b086      	sub	sp, #24
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800618c:	2300      	movs	r3, #0
 800618e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f7ff f935 	bl	8005400 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006196:	2110      	movs	r1, #16
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f7ff f98f 	bl	80054bc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f7ff f9b0 	bl	8005504 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80061a4:	2300      	movs	r3, #0
 80061a6:	613b      	str	r3, [r7, #16]
 80061a8:	e01f      	b.n	80061ea <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	015a      	lsls	r2, r3, #5
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	4413      	add	r3, r2
 80061b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061c0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80061c8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80061d0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	015a      	lsls	r2, r3, #5
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	4413      	add	r3, r2
 80061da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061de:	461a      	mov	r2, r3
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	3301      	adds	r3, #1
 80061e8:	613b      	str	r3, [r7, #16]
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	2b0f      	cmp	r3, #15
 80061ee:	d9dc      	bls.n	80061aa <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80061f0:	2300      	movs	r3, #0
 80061f2:	613b      	str	r3, [r7, #16]
 80061f4:	e034      	b.n	8006260 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	015a      	lsls	r2, r3, #5
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	4413      	add	r3, r2
 80061fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800620c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006214:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800621c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	015a      	lsls	r2, r3, #5
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	4413      	add	r3, r2
 8006226:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800622a:	461a      	mov	r2, r3
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	3301      	adds	r3, #1
 8006234:	617b      	str	r3, [r7, #20]
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800623c:	d80c      	bhi.n	8006258 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	015a      	lsls	r2, r3, #5
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	4413      	add	r3, r2
 8006246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006250:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006254:	d0ec      	beq.n	8006230 <USB_StopHost+0xb0>
 8006256:	e000      	b.n	800625a <USB_StopHost+0xda>
        break;
 8006258:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	3301      	adds	r3, #1
 800625e:	613b      	str	r3, [r7, #16]
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	2b0f      	cmp	r3, #15
 8006264:	d9c7      	bls.n	80061f6 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800626c:	461a      	mov	r2, r3
 800626e:	f04f 33ff 	mov.w	r3, #4294967295
 8006272:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f04f 32ff 	mov.w	r2, #4294967295
 800627a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f7ff f8ae 	bl	80053de <USB_EnableGlobalInt>

  return HAL_OK;
 8006282:	2300      	movs	r3, #0
}
 8006284:	4618      	mov	r0, r3
 8006286:	3718      	adds	r7, #24
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006290:	4904      	ldr	r1, [pc, #16]	; (80062a4 <MX_FATFS_Init+0x18>)
 8006292:	4805      	ldr	r0, [pc, #20]	; (80062a8 <MX_FATFS_Init+0x1c>)
 8006294:	f005 f81a 	bl	800b2cc <FATFS_LinkDriver>
 8006298:	4603      	mov	r3, r0
 800629a:	461a      	mov	r2, r3
 800629c:	4b03      	ldr	r3, [pc, #12]	; (80062ac <MX_FATFS_Init+0x20>)
 800629e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80062a0:	bf00      	nop
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	20000300 	.word	0x20000300
 80062a8:	2000000c 	.word	0x2000000c
 80062ac:	20000304 	.word	0x20000304

080062b0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80062b0:	b480      	push	{r7}
 80062b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80062b4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b082      	sub	sp, #8
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	4603      	mov	r3, r0
 80062c8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 80062ca:	79fb      	ldrb	r3, [r7, #7]
 80062cc:	4618      	mov	r0, r3
 80062ce:	f000 f9d9 	bl	8006684 <USER_SPI_initialize>
 80062d2:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3708      	adds	r7, #8
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	4603      	mov	r3, r0
 80062e4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 80062e6:	79fb      	ldrb	r3, [r7, #7]
 80062e8:	4618      	mov	r0, r3
 80062ea:	f000 fab7 	bl	800685c <USER_SPI_status>
 80062ee:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3708      	adds	r7, #8
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	60b9      	str	r1, [r7, #8]
 8006300:	607a      	str	r2, [r7, #4]
 8006302:	603b      	str	r3, [r7, #0]
 8006304:	4603      	mov	r3, r0
 8006306:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8006308:	7bf8      	ldrb	r0, [r7, #15]
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	68b9      	ldr	r1, [r7, #8]
 8006310:	f000 faba 	bl	8006888 <USER_SPI_read>
 8006314:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8006316:	4618      	mov	r0, r3
 8006318:	3710      	adds	r7, #16
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}

0800631e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800631e:	b580      	push	{r7, lr}
 8006320:	b084      	sub	sp, #16
 8006322:	af00      	add	r7, sp, #0
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	607a      	str	r2, [r7, #4]
 8006328:	603b      	str	r3, [r7, #0]
 800632a:	4603      	mov	r3, r0
 800632c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800632e:	7bf8      	ldrb	r0, [r7, #15]
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	68b9      	ldr	r1, [r7, #8]
 8006336:	f000 fb0d 	bl	8006954 <USER_SPI_write>
 800633a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800633c:	4618      	mov	r0, r3
 800633e:	3710      	adds	r7, #16
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b082      	sub	sp, #8
 8006348:	af00      	add	r7, sp, #0
 800634a:	4603      	mov	r3, r0
 800634c:	603a      	str	r2, [r7, #0]
 800634e:	71fb      	strb	r3, [r7, #7]
 8006350:	460b      	mov	r3, r1
 8006352:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8006354:	79b9      	ldrb	r1, [r7, #6]
 8006356:	79fb      	ldrb	r3, [r7, #7]
 8006358:	683a      	ldr	r2, [r7, #0]
 800635a:	4618      	mov	r0, r3
 800635c:	f000 fb76 	bl	8006a4c <USER_SPI_ioctl>
 8006360:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8006362:	4618      	mov	r0, r3
 8006364:	3708      	adds	r7, #8
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
	...

0800636c <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800636c:	b580      	push	{r7, lr}
 800636e:	b082      	sub	sp, #8
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8006374:	f7fa fe84 	bl	8001080 <HAL_GetTick>
 8006378:	4603      	mov	r3, r0
 800637a:	4a04      	ldr	r2, [pc, #16]	; (800638c <SPI_Timer_On+0x20>)
 800637c:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800637e:	4a04      	ldr	r2, [pc, #16]	; (8006390 <SPI_Timer_On+0x24>)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6013      	str	r3, [r2, #0]
}
 8006384:	bf00      	nop
 8006386:	3708      	adds	r7, #8
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}
 800638c:	20000768 	.word	0x20000768
 8006390:	2000076c 	.word	0x2000076c

08006394 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8006394:	b580      	push	{r7, lr}
 8006396:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8006398:	f7fa fe72 	bl	8001080 <HAL_GetTick>
 800639c:	4602      	mov	r2, r0
 800639e:	4b06      	ldr	r3, [pc, #24]	; (80063b8 <SPI_Timer_Status+0x24>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	1ad2      	subs	r2, r2, r3
 80063a4:	4b05      	ldr	r3, [pc, #20]	; (80063bc <SPI_Timer_Status+0x28>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	429a      	cmp	r2, r3
 80063aa:	bf34      	ite	cc
 80063ac:	2301      	movcc	r3, #1
 80063ae:	2300      	movcs	r3, #0
 80063b0:	b2db      	uxtb	r3, r3
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop
 80063b8:	20000768 	.word	0x20000768
 80063bc:	2000076c 	.word	0x2000076c

080063c0 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b086      	sub	sp, #24
 80063c4:	af02      	add	r7, sp, #8
 80063c6:	4603      	mov	r3, r0
 80063c8:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80063ca:	f107 020f 	add.w	r2, r7, #15
 80063ce:	1df9      	adds	r1, r7, #7
 80063d0:	2332      	movs	r3, #50	; 0x32
 80063d2:	9300      	str	r3, [sp, #0]
 80063d4:	2301      	movs	r3, #1
 80063d6:	4804      	ldr	r0, [pc, #16]	; (80063e8 <xchg_spi+0x28>)
 80063d8:	f7fe f968 	bl	80046ac <HAL_SPI_TransmitReceive>
    return rxDat;
 80063dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3710      	adds	r7, #16
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop
 80063e8:	20000260 	.word	0x20000260

080063ec <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80063ec:	b590      	push	{r4, r7, lr}
 80063ee:	b085      	sub	sp, #20
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80063f6:	2300      	movs	r3, #0
 80063f8:	60fb      	str	r3, [r7, #12]
 80063fa:	e00a      	b.n	8006412 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	18d4      	adds	r4, r2, r3
 8006402:	20ff      	movs	r0, #255	; 0xff
 8006404:	f7ff ffdc 	bl	80063c0 <xchg_spi>
 8006408:	4603      	mov	r3, r0
 800640a:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	3301      	adds	r3, #1
 8006410:	60fb      	str	r3, [r7, #12]
 8006412:	68fa      	ldr	r2, [r7, #12]
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	429a      	cmp	r2, r3
 8006418:	d3f0      	bcc.n	80063fc <rcvr_spi_multi+0x10>
	}
}
 800641a:	bf00      	nop
 800641c:	bf00      	nop
 800641e:	3714      	adds	r7, #20
 8006420:	46bd      	mov	sp, r7
 8006422:	bd90      	pop	{r4, r7, pc}

08006424 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 800642e:	2300      	movs	r3, #0
 8006430:	60fb      	str	r3, [r7, #12]
 8006432:	e009      	b.n	8006448 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	4413      	add	r3, r2
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	4618      	mov	r0, r3
 800643e:	f7ff ffbf 	bl	80063c0 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	3301      	adds	r3, #1
 8006446:	60fb      	str	r3, [r7, #12]
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	429a      	cmp	r2, r3
 800644e:	d3f1      	bcc.n	8006434 <xmit_spi_multi+0x10>
	}
}
 8006450:	bf00      	nop
 8006452:	bf00      	nop
 8006454:	3710      	adds	r7, #16
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}

0800645a <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800645a:	b580      	push	{r7, lr}
 800645c:	b086      	sub	sp, #24
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8006462:	f7fa fe0d 	bl	8001080 <HAL_GetTick>
 8006466:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800646c:	20ff      	movs	r0, #255	; 0xff
 800646e:	f7ff ffa7 	bl	80063c0 <xchg_spi>
 8006472:	4603      	mov	r3, r0
 8006474:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8006476:	7bfb      	ldrb	r3, [r7, #15]
 8006478:	2bff      	cmp	r3, #255	; 0xff
 800647a:	d007      	beq.n	800648c <wait_ready+0x32>
 800647c:	f7fa fe00 	bl	8001080 <HAL_GetTick>
 8006480:	4602      	mov	r2, r0
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	1ad3      	subs	r3, r2, r3
 8006486:	693a      	ldr	r2, [r7, #16]
 8006488:	429a      	cmp	r2, r3
 800648a:	d8ef      	bhi.n	800646c <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800648c:	7bfb      	ldrb	r3, [r7, #15]
 800648e:	2bff      	cmp	r3, #255	; 0xff
 8006490:	bf0c      	ite	eq
 8006492:	2301      	moveq	r3, #1
 8006494:	2300      	movne	r3, #0
 8006496:	b2db      	uxtb	r3, r3
}
 8006498:	4618      	mov	r0, r3
 800649a:	3718      	adds	r7, #24
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80064a4:	2201      	movs	r2, #1
 80064a6:	2102      	movs	r1, #2
 80064a8:	4803      	ldr	r0, [pc, #12]	; (80064b8 <despiselect+0x18>)
 80064aa:	f7fb f9f5 	bl	8001898 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80064ae:	20ff      	movs	r0, #255	; 0xff
 80064b0:	f7ff ff86 	bl	80063c0 <xchg_spi>

}
 80064b4:	bf00      	nop
 80064b6:	bd80      	pop	{r7, pc}
 80064b8:	40020400 	.word	0x40020400

080064bc <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80064c0:	2200      	movs	r2, #0
 80064c2:	2102      	movs	r1, #2
 80064c4:	4809      	ldr	r0, [pc, #36]	; (80064ec <spiselect+0x30>)
 80064c6:	f7fb f9e7 	bl	8001898 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80064ca:	20ff      	movs	r0, #255	; 0xff
 80064cc:	f7ff ff78 	bl	80063c0 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80064d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80064d4:	f7ff ffc1 	bl	800645a <wait_ready>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d001      	beq.n	80064e2 <spiselect+0x26>
 80064de:	2301      	movs	r3, #1
 80064e0:	e002      	b.n	80064e8 <spiselect+0x2c>

	despiselect();
 80064e2:	f7ff ffdd 	bl	80064a0 <despiselect>
	return 0;	/* Timeout */
 80064e6:	2300      	movs	r3, #0
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	40020400 	.word	0x40020400

080064f0 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b084      	sub	sp, #16
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80064fa:	20c8      	movs	r0, #200	; 0xc8
 80064fc:	f7ff ff36 	bl	800636c <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8006500:	20ff      	movs	r0, #255	; 0xff
 8006502:	f7ff ff5d 	bl	80063c0 <xchg_spi>
 8006506:	4603      	mov	r3, r0
 8006508:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800650a:	7bfb      	ldrb	r3, [r7, #15]
 800650c:	2bff      	cmp	r3, #255	; 0xff
 800650e:	d104      	bne.n	800651a <rcvr_datablock+0x2a>
 8006510:	f7ff ff40 	bl	8006394 <SPI_Timer_Status>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d1f2      	bne.n	8006500 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800651a:	7bfb      	ldrb	r3, [r7, #15]
 800651c:	2bfe      	cmp	r3, #254	; 0xfe
 800651e:	d001      	beq.n	8006524 <rcvr_datablock+0x34>
 8006520:	2300      	movs	r3, #0
 8006522:	e00a      	b.n	800653a <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8006524:	6839      	ldr	r1, [r7, #0]
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f7ff ff60 	bl	80063ec <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800652c:	20ff      	movs	r0, #255	; 0xff
 800652e:	f7ff ff47 	bl	80063c0 <xchg_spi>
 8006532:	20ff      	movs	r0, #255	; 0xff
 8006534:	f7ff ff44 	bl	80063c0 <xchg_spi>

	return 1;						/* Function succeeded */
 8006538:	2301      	movs	r3, #1
}
 800653a:	4618      	mov	r0, r3
 800653c:	3710      	adds	r7, #16
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}

08006542 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8006542:	b580      	push	{r7, lr}
 8006544:	b084      	sub	sp, #16
 8006546:	af00      	add	r7, sp, #0
 8006548:	6078      	str	r0, [r7, #4]
 800654a:	460b      	mov	r3, r1
 800654c:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800654e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006552:	f7ff ff82 	bl	800645a <wait_ready>
 8006556:	4603      	mov	r3, r0
 8006558:	2b00      	cmp	r3, #0
 800655a:	d101      	bne.n	8006560 <xmit_datablock+0x1e>
 800655c:	2300      	movs	r3, #0
 800655e:	e01e      	b.n	800659e <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8006560:	78fb      	ldrb	r3, [r7, #3]
 8006562:	4618      	mov	r0, r3
 8006564:	f7ff ff2c 	bl	80063c0 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8006568:	78fb      	ldrb	r3, [r7, #3]
 800656a:	2bfd      	cmp	r3, #253	; 0xfd
 800656c:	d016      	beq.n	800659c <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800656e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f7ff ff56 	bl	8006424 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8006578:	20ff      	movs	r0, #255	; 0xff
 800657a:	f7ff ff21 	bl	80063c0 <xchg_spi>
 800657e:	20ff      	movs	r0, #255	; 0xff
 8006580:	f7ff ff1e 	bl	80063c0 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8006584:	20ff      	movs	r0, #255	; 0xff
 8006586:	f7ff ff1b 	bl	80063c0 <xchg_spi>
 800658a:	4603      	mov	r3, r0
 800658c:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800658e:	7bfb      	ldrb	r3, [r7, #15]
 8006590:	f003 031f 	and.w	r3, r3, #31
 8006594:	2b05      	cmp	r3, #5
 8006596:	d001      	beq.n	800659c <xmit_datablock+0x5a>
 8006598:	2300      	movs	r3, #0
 800659a:	e000      	b.n	800659e <xmit_datablock+0x5c>
	}
	return 1;
 800659c:	2301      	movs	r3, #1
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3710      	adds	r7, #16
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}

080065a6 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80065a6:	b580      	push	{r7, lr}
 80065a8:	b084      	sub	sp, #16
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	4603      	mov	r3, r0
 80065ae:	6039      	str	r1, [r7, #0]
 80065b0:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80065b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	da0e      	bge.n	80065d8 <send_cmd+0x32>
		cmd &= 0x7F;
 80065ba:	79fb      	ldrb	r3, [r7, #7]
 80065bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065c0:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80065c2:	2100      	movs	r1, #0
 80065c4:	2037      	movs	r0, #55	; 0x37
 80065c6:	f7ff ffee 	bl	80065a6 <send_cmd>
 80065ca:	4603      	mov	r3, r0
 80065cc:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80065ce:	7bbb      	ldrb	r3, [r7, #14]
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d901      	bls.n	80065d8 <send_cmd+0x32>
 80065d4:	7bbb      	ldrb	r3, [r7, #14]
 80065d6:	e051      	b.n	800667c <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80065d8:	79fb      	ldrb	r3, [r7, #7]
 80065da:	2b0c      	cmp	r3, #12
 80065dc:	d008      	beq.n	80065f0 <send_cmd+0x4a>
		despiselect();
 80065de:	f7ff ff5f 	bl	80064a0 <despiselect>
		if (!spiselect()) return 0xFF;
 80065e2:	f7ff ff6b 	bl	80064bc <spiselect>
 80065e6:	4603      	mov	r3, r0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d101      	bne.n	80065f0 <send_cmd+0x4a>
 80065ec:	23ff      	movs	r3, #255	; 0xff
 80065ee:	e045      	b.n	800667c <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80065f0:	79fb      	ldrb	r3, [r7, #7]
 80065f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	4618      	mov	r0, r3
 80065fa:	f7ff fee1 	bl	80063c0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	0e1b      	lsrs	r3, r3, #24
 8006602:	b2db      	uxtb	r3, r3
 8006604:	4618      	mov	r0, r3
 8006606:	f7ff fedb 	bl	80063c0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	0c1b      	lsrs	r3, r3, #16
 800660e:	b2db      	uxtb	r3, r3
 8006610:	4618      	mov	r0, r3
 8006612:	f7ff fed5 	bl	80063c0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	0a1b      	lsrs	r3, r3, #8
 800661a:	b2db      	uxtb	r3, r3
 800661c:	4618      	mov	r0, r3
 800661e:	f7ff fecf 	bl	80063c0 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	b2db      	uxtb	r3, r3
 8006626:	4618      	mov	r0, r3
 8006628:	f7ff feca 	bl	80063c0 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800662c:	2301      	movs	r3, #1
 800662e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8006630:	79fb      	ldrb	r3, [r7, #7]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d101      	bne.n	800663a <send_cmd+0x94>
 8006636:	2395      	movs	r3, #149	; 0x95
 8006638:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800663a:	79fb      	ldrb	r3, [r7, #7]
 800663c:	2b08      	cmp	r3, #8
 800663e:	d101      	bne.n	8006644 <send_cmd+0x9e>
 8006640:	2387      	movs	r3, #135	; 0x87
 8006642:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8006644:	7bfb      	ldrb	r3, [r7, #15]
 8006646:	4618      	mov	r0, r3
 8006648:	f7ff feba 	bl	80063c0 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800664c:	79fb      	ldrb	r3, [r7, #7]
 800664e:	2b0c      	cmp	r3, #12
 8006650:	d102      	bne.n	8006658 <send_cmd+0xb2>
 8006652:	20ff      	movs	r0, #255	; 0xff
 8006654:	f7ff feb4 	bl	80063c0 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8006658:	230a      	movs	r3, #10
 800665a:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800665c:	20ff      	movs	r0, #255	; 0xff
 800665e:	f7ff feaf 	bl	80063c0 <xchg_spi>
 8006662:	4603      	mov	r3, r0
 8006664:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8006666:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800666a:	2b00      	cmp	r3, #0
 800666c:	da05      	bge.n	800667a <send_cmd+0xd4>
 800666e:	7bfb      	ldrb	r3, [r7, #15]
 8006670:	3b01      	subs	r3, #1
 8006672:	73fb      	strb	r3, [r7, #15]
 8006674:	7bfb      	ldrb	r3, [r7, #15]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d1f0      	bne.n	800665c <send_cmd+0xb6>

	return res;							/* Return received response */
 800667a:	7bbb      	ldrb	r3, [r7, #14]
}
 800667c:	4618      	mov	r0, r3
 800667e:	3710      	adds	r7, #16
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}

08006684 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8006684:	b590      	push	{r4, r7, lr}
 8006686:	b085      	sub	sp, #20
 8006688:	af00      	add	r7, sp, #0
 800668a:	4603      	mov	r3, r0
 800668c:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800668e:	79fb      	ldrb	r3, [r7, #7]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d001      	beq.n	8006698 <USER_SPI_initialize+0x14>
 8006694:	2301      	movs	r3, #1
 8006696:	e0d6      	b.n	8006846 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8006698:	4b6d      	ldr	r3, [pc, #436]	; (8006850 <USER_SPI_initialize+0x1cc>)
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	b2db      	uxtb	r3, r3
 800669e:	f003 0302 	and.w	r3, r3, #2
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d003      	beq.n	80066ae <USER_SPI_initialize+0x2a>
 80066a6:	4b6a      	ldr	r3, [pc, #424]	; (8006850 <USER_SPI_initialize+0x1cc>)
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	e0cb      	b.n	8006846 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 80066ae:	4b69      	ldr	r3, [pc, #420]	; (8006854 <USER_SPI_initialize+0x1d0>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80066b8:	4b66      	ldr	r3, [pc, #408]	; (8006854 <USER_SPI_initialize+0x1d0>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80066c0:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80066c2:	230a      	movs	r3, #10
 80066c4:	73fb      	strb	r3, [r7, #15]
 80066c6:	e005      	b.n	80066d4 <USER_SPI_initialize+0x50>
 80066c8:	20ff      	movs	r0, #255	; 0xff
 80066ca:	f7ff fe79 	bl	80063c0 <xchg_spi>
 80066ce:	7bfb      	ldrb	r3, [r7, #15]
 80066d0:	3b01      	subs	r3, #1
 80066d2:	73fb      	strb	r3, [r7, #15]
 80066d4:	7bfb      	ldrb	r3, [r7, #15]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d1f6      	bne.n	80066c8 <USER_SPI_initialize+0x44>

	ty = 0;
 80066da:	2300      	movs	r3, #0
 80066dc:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80066de:	2100      	movs	r1, #0
 80066e0:	2000      	movs	r0, #0
 80066e2:	f7ff ff60 	bl	80065a6 <send_cmd>
 80066e6:	4603      	mov	r3, r0
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	f040 808b 	bne.w	8006804 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80066ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80066f2:	f7ff fe3b 	bl	800636c <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80066f6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80066fa:	2008      	movs	r0, #8
 80066fc:	f7ff ff53 	bl	80065a6 <send_cmd>
 8006700:	4603      	mov	r3, r0
 8006702:	2b01      	cmp	r3, #1
 8006704:	d151      	bne.n	80067aa <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8006706:	2300      	movs	r3, #0
 8006708:	73fb      	strb	r3, [r7, #15]
 800670a:	e00d      	b.n	8006728 <USER_SPI_initialize+0xa4>
 800670c:	7bfc      	ldrb	r4, [r7, #15]
 800670e:	20ff      	movs	r0, #255	; 0xff
 8006710:	f7ff fe56 	bl	80063c0 <xchg_spi>
 8006714:	4603      	mov	r3, r0
 8006716:	461a      	mov	r2, r3
 8006718:	f107 0310 	add.w	r3, r7, #16
 800671c:	4423      	add	r3, r4
 800671e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8006722:	7bfb      	ldrb	r3, [r7, #15]
 8006724:	3301      	adds	r3, #1
 8006726:	73fb      	strb	r3, [r7, #15]
 8006728:	7bfb      	ldrb	r3, [r7, #15]
 800672a:	2b03      	cmp	r3, #3
 800672c:	d9ee      	bls.n	800670c <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800672e:	7abb      	ldrb	r3, [r7, #10]
 8006730:	2b01      	cmp	r3, #1
 8006732:	d167      	bne.n	8006804 <USER_SPI_initialize+0x180>
 8006734:	7afb      	ldrb	r3, [r7, #11]
 8006736:	2baa      	cmp	r3, #170	; 0xaa
 8006738:	d164      	bne.n	8006804 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800673a:	bf00      	nop
 800673c:	f7ff fe2a 	bl	8006394 <SPI_Timer_Status>
 8006740:	4603      	mov	r3, r0
 8006742:	2b00      	cmp	r3, #0
 8006744:	d007      	beq.n	8006756 <USER_SPI_initialize+0xd2>
 8006746:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800674a:	20a9      	movs	r0, #169	; 0xa9
 800674c:	f7ff ff2b 	bl	80065a6 <send_cmd>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d1f2      	bne.n	800673c <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8006756:	f7ff fe1d 	bl	8006394 <SPI_Timer_Status>
 800675a:	4603      	mov	r3, r0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d051      	beq.n	8006804 <USER_SPI_initialize+0x180>
 8006760:	2100      	movs	r1, #0
 8006762:	203a      	movs	r0, #58	; 0x3a
 8006764:	f7ff ff1f 	bl	80065a6 <send_cmd>
 8006768:	4603      	mov	r3, r0
 800676a:	2b00      	cmp	r3, #0
 800676c:	d14a      	bne.n	8006804 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800676e:	2300      	movs	r3, #0
 8006770:	73fb      	strb	r3, [r7, #15]
 8006772:	e00d      	b.n	8006790 <USER_SPI_initialize+0x10c>
 8006774:	7bfc      	ldrb	r4, [r7, #15]
 8006776:	20ff      	movs	r0, #255	; 0xff
 8006778:	f7ff fe22 	bl	80063c0 <xchg_spi>
 800677c:	4603      	mov	r3, r0
 800677e:	461a      	mov	r2, r3
 8006780:	f107 0310 	add.w	r3, r7, #16
 8006784:	4423      	add	r3, r4
 8006786:	f803 2c08 	strb.w	r2, [r3, #-8]
 800678a:	7bfb      	ldrb	r3, [r7, #15]
 800678c:	3301      	adds	r3, #1
 800678e:	73fb      	strb	r3, [r7, #15]
 8006790:	7bfb      	ldrb	r3, [r7, #15]
 8006792:	2b03      	cmp	r3, #3
 8006794:	d9ee      	bls.n	8006774 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8006796:	7a3b      	ldrb	r3, [r7, #8]
 8006798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800679c:	2b00      	cmp	r3, #0
 800679e:	d001      	beq.n	80067a4 <USER_SPI_initialize+0x120>
 80067a0:	230c      	movs	r3, #12
 80067a2:	e000      	b.n	80067a6 <USER_SPI_initialize+0x122>
 80067a4:	2304      	movs	r3, #4
 80067a6:	737b      	strb	r3, [r7, #13]
 80067a8:	e02c      	b.n	8006804 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80067aa:	2100      	movs	r1, #0
 80067ac:	20a9      	movs	r0, #169	; 0xa9
 80067ae:	f7ff fefa 	bl	80065a6 <send_cmd>
 80067b2:	4603      	mov	r3, r0
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d804      	bhi.n	80067c2 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80067b8:	2302      	movs	r3, #2
 80067ba:	737b      	strb	r3, [r7, #13]
 80067bc:	23a9      	movs	r3, #169	; 0xa9
 80067be:	73bb      	strb	r3, [r7, #14]
 80067c0:	e003      	b.n	80067ca <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80067c2:	2301      	movs	r3, #1
 80067c4:	737b      	strb	r3, [r7, #13]
 80067c6:	2301      	movs	r3, #1
 80067c8:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80067ca:	bf00      	nop
 80067cc:	f7ff fde2 	bl	8006394 <SPI_Timer_Status>
 80067d0:	4603      	mov	r3, r0
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d007      	beq.n	80067e6 <USER_SPI_initialize+0x162>
 80067d6:	7bbb      	ldrb	r3, [r7, #14]
 80067d8:	2100      	movs	r1, #0
 80067da:	4618      	mov	r0, r3
 80067dc:	f7ff fee3 	bl	80065a6 <send_cmd>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d1f2      	bne.n	80067cc <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80067e6:	f7ff fdd5 	bl	8006394 <SPI_Timer_Status>
 80067ea:	4603      	mov	r3, r0
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d007      	beq.n	8006800 <USER_SPI_initialize+0x17c>
 80067f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80067f4:	2010      	movs	r0, #16
 80067f6:	f7ff fed6 	bl	80065a6 <send_cmd>
 80067fa:	4603      	mov	r3, r0
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d001      	beq.n	8006804 <USER_SPI_initialize+0x180>
				ty = 0;
 8006800:	2300      	movs	r3, #0
 8006802:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8006804:	4a14      	ldr	r2, [pc, #80]	; (8006858 <USER_SPI_initialize+0x1d4>)
 8006806:	7b7b      	ldrb	r3, [r7, #13]
 8006808:	7013      	strb	r3, [r2, #0]
	despiselect();
 800680a:	f7ff fe49 	bl	80064a0 <despiselect>

	if (ty) {			/* OK */
 800680e:	7b7b      	ldrb	r3, [r7, #13]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d012      	beq.n	800683a <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8006814:	4b0f      	ldr	r3, [pc, #60]	; (8006854 <USER_SPI_initialize+0x1d0>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800681e:	4b0d      	ldr	r3, [pc, #52]	; (8006854 <USER_SPI_initialize+0x1d0>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f042 0210 	orr.w	r2, r2, #16
 8006826:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8006828:	4b09      	ldr	r3, [pc, #36]	; (8006850 <USER_SPI_initialize+0x1cc>)
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	b2db      	uxtb	r3, r3
 800682e:	f023 0301 	bic.w	r3, r3, #1
 8006832:	b2da      	uxtb	r2, r3
 8006834:	4b06      	ldr	r3, [pc, #24]	; (8006850 <USER_SPI_initialize+0x1cc>)
 8006836:	701a      	strb	r2, [r3, #0]
 8006838:	e002      	b.n	8006840 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800683a:	4b05      	ldr	r3, [pc, #20]	; (8006850 <USER_SPI_initialize+0x1cc>)
 800683c:	2201      	movs	r2, #1
 800683e:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8006840:	4b03      	ldr	r3, [pc, #12]	; (8006850 <USER_SPI_initialize+0x1cc>)
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	b2db      	uxtb	r3, r3
}
 8006846:	4618      	mov	r0, r3
 8006848:	3714      	adds	r7, #20
 800684a:	46bd      	mov	sp, r7
 800684c:	bd90      	pop	{r4, r7, pc}
 800684e:	bf00      	nop
 8006850:	20000020 	.word	0x20000020
 8006854:	20000260 	.word	0x20000260
 8006858:	200001c8 	.word	0x200001c8

0800685c <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	4603      	mov	r3, r0
 8006864:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8006866:	79fb      	ldrb	r3, [r7, #7]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d001      	beq.n	8006870 <USER_SPI_status+0x14>
 800686c:	2301      	movs	r3, #1
 800686e:	e002      	b.n	8006876 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8006870:	4b04      	ldr	r3, [pc, #16]	; (8006884 <USER_SPI_status+0x28>)
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	b2db      	uxtb	r3, r3
}
 8006876:	4618      	mov	r0, r3
 8006878:	370c      	adds	r7, #12
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr
 8006882:	bf00      	nop
 8006884:	20000020 	.word	0x20000020

08006888 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
 800688e:	60b9      	str	r1, [r7, #8]
 8006890:	607a      	str	r2, [r7, #4]
 8006892:	603b      	str	r3, [r7, #0]
 8006894:	4603      	mov	r3, r0
 8006896:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006898:	7bfb      	ldrb	r3, [r7, #15]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d102      	bne.n	80068a4 <USER_SPI_read+0x1c>
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d101      	bne.n	80068a8 <USER_SPI_read+0x20>
 80068a4:	2304      	movs	r3, #4
 80068a6:	e04d      	b.n	8006944 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80068a8:	4b28      	ldr	r3, [pc, #160]	; (800694c <USER_SPI_read+0xc4>)
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	f003 0301 	and.w	r3, r3, #1
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d001      	beq.n	80068ba <USER_SPI_read+0x32>
 80068b6:	2303      	movs	r3, #3
 80068b8:	e044      	b.n	8006944 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80068ba:	4b25      	ldr	r3, [pc, #148]	; (8006950 <USER_SPI_read+0xc8>)
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	f003 0308 	and.w	r3, r3, #8
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d102      	bne.n	80068cc <USER_SPI_read+0x44>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	025b      	lsls	r3, r3, #9
 80068ca:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d111      	bne.n	80068f6 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80068d2:	6879      	ldr	r1, [r7, #4]
 80068d4:	2011      	movs	r0, #17
 80068d6:	f7ff fe66 	bl	80065a6 <send_cmd>
 80068da:	4603      	mov	r3, r0
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d129      	bne.n	8006934 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 80068e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80068e4:	68b8      	ldr	r0, [r7, #8]
 80068e6:	f7ff fe03 	bl	80064f0 <rcvr_datablock>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d021      	beq.n	8006934 <USER_SPI_read+0xac>
			count = 0;
 80068f0:	2300      	movs	r3, #0
 80068f2:	603b      	str	r3, [r7, #0]
 80068f4:	e01e      	b.n	8006934 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80068f6:	6879      	ldr	r1, [r7, #4]
 80068f8:	2012      	movs	r0, #18
 80068fa:	f7ff fe54 	bl	80065a6 <send_cmd>
 80068fe:	4603      	mov	r3, r0
 8006900:	2b00      	cmp	r3, #0
 8006902:	d117      	bne.n	8006934 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8006904:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006908:	68b8      	ldr	r0, [r7, #8]
 800690a:	f7ff fdf1 	bl	80064f0 <rcvr_datablock>
 800690e:	4603      	mov	r3, r0
 8006910:	2b00      	cmp	r3, #0
 8006912:	d00a      	beq.n	800692a <USER_SPI_read+0xa2>
				buff += 512;
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800691a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	3b01      	subs	r3, #1
 8006920:	603b      	str	r3, [r7, #0]
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d1ed      	bne.n	8006904 <USER_SPI_read+0x7c>
 8006928:	e000      	b.n	800692c <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800692a:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800692c:	2100      	movs	r1, #0
 800692e:	200c      	movs	r0, #12
 8006930:	f7ff fe39 	bl	80065a6 <send_cmd>
		}
	}
	despiselect();
 8006934:	f7ff fdb4 	bl	80064a0 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	2b00      	cmp	r3, #0
 800693c:	bf14      	ite	ne
 800693e:	2301      	movne	r3, #1
 8006940:	2300      	moveq	r3, #0
 8006942:	b2db      	uxtb	r3, r3
}
 8006944:	4618      	mov	r0, r3
 8006946:	3710      	adds	r7, #16
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}
 800694c:	20000020 	.word	0x20000020
 8006950:	200001c8 	.word	0x200001c8

08006954 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	60b9      	str	r1, [r7, #8]
 800695c:	607a      	str	r2, [r7, #4]
 800695e:	603b      	str	r3, [r7, #0]
 8006960:	4603      	mov	r3, r0
 8006962:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006964:	7bfb      	ldrb	r3, [r7, #15]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d102      	bne.n	8006970 <USER_SPI_write+0x1c>
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d101      	bne.n	8006974 <USER_SPI_write+0x20>
 8006970:	2304      	movs	r3, #4
 8006972:	e063      	b.n	8006a3c <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8006974:	4b33      	ldr	r3, [pc, #204]	; (8006a44 <USER_SPI_write+0xf0>)
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	b2db      	uxtb	r3, r3
 800697a:	f003 0301 	and.w	r3, r3, #1
 800697e:	2b00      	cmp	r3, #0
 8006980:	d001      	beq.n	8006986 <USER_SPI_write+0x32>
 8006982:	2303      	movs	r3, #3
 8006984:	e05a      	b.n	8006a3c <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8006986:	4b2f      	ldr	r3, [pc, #188]	; (8006a44 <USER_SPI_write+0xf0>)
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	b2db      	uxtb	r3, r3
 800698c:	f003 0304 	and.w	r3, r3, #4
 8006990:	2b00      	cmp	r3, #0
 8006992:	d001      	beq.n	8006998 <USER_SPI_write+0x44>
 8006994:	2302      	movs	r3, #2
 8006996:	e051      	b.n	8006a3c <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8006998:	4b2b      	ldr	r3, [pc, #172]	; (8006a48 <USER_SPI_write+0xf4>)
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	f003 0308 	and.w	r3, r3, #8
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d102      	bne.n	80069aa <USER_SPI_write+0x56>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	025b      	lsls	r3, r3, #9
 80069a8:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d110      	bne.n	80069d2 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80069b0:	6879      	ldr	r1, [r7, #4]
 80069b2:	2018      	movs	r0, #24
 80069b4:	f7ff fdf7 	bl	80065a6 <send_cmd>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d136      	bne.n	8006a2c <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 80069be:	21fe      	movs	r1, #254	; 0xfe
 80069c0:	68b8      	ldr	r0, [r7, #8]
 80069c2:	f7ff fdbe 	bl	8006542 <xmit_datablock>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d02f      	beq.n	8006a2c <USER_SPI_write+0xd8>
			count = 0;
 80069cc:	2300      	movs	r3, #0
 80069ce:	603b      	str	r3, [r7, #0]
 80069d0:	e02c      	b.n	8006a2c <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80069d2:	4b1d      	ldr	r3, [pc, #116]	; (8006a48 <USER_SPI_write+0xf4>)
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	f003 0306 	and.w	r3, r3, #6
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d003      	beq.n	80069e6 <USER_SPI_write+0x92>
 80069de:	6839      	ldr	r1, [r7, #0]
 80069e0:	2097      	movs	r0, #151	; 0x97
 80069e2:	f7ff fde0 	bl	80065a6 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80069e6:	6879      	ldr	r1, [r7, #4]
 80069e8:	2019      	movs	r0, #25
 80069ea:	f7ff fddc 	bl	80065a6 <send_cmd>
 80069ee:	4603      	mov	r3, r0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d11b      	bne.n	8006a2c <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80069f4:	21fc      	movs	r1, #252	; 0xfc
 80069f6:	68b8      	ldr	r0, [r7, #8]
 80069f8:	f7ff fda3 	bl	8006542 <xmit_datablock>
 80069fc:	4603      	mov	r3, r0
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d00a      	beq.n	8006a18 <USER_SPI_write+0xc4>
				buff += 512;
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006a08:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	3b01      	subs	r3, #1
 8006a0e:	603b      	str	r3, [r7, #0]
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d1ee      	bne.n	80069f4 <USER_SPI_write+0xa0>
 8006a16:	e000      	b.n	8006a1a <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8006a18:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8006a1a:	21fd      	movs	r1, #253	; 0xfd
 8006a1c:	2000      	movs	r0, #0
 8006a1e:	f7ff fd90 	bl	8006542 <xmit_datablock>
 8006a22:	4603      	mov	r3, r0
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d101      	bne.n	8006a2c <USER_SPI_write+0xd8>
 8006a28:	2301      	movs	r3, #1
 8006a2a:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8006a2c:	f7ff fd38 	bl	80064a0 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	bf14      	ite	ne
 8006a36:	2301      	movne	r3, #1
 8006a38:	2300      	moveq	r3, #0
 8006a3a:	b2db      	uxtb	r3, r3
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3710      	adds	r7, #16
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}
 8006a44:	20000020 	.word	0x20000020
 8006a48:	200001c8 	.word	0x200001c8

08006a4c <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b08c      	sub	sp, #48	; 0x30
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	4603      	mov	r3, r0
 8006a54:	603a      	str	r2, [r7, #0]
 8006a56:	71fb      	strb	r3, [r7, #7]
 8006a58:	460b      	mov	r3, r1
 8006a5a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8006a5c:	79fb      	ldrb	r3, [r7, #7]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d001      	beq.n	8006a66 <USER_SPI_ioctl+0x1a>
 8006a62:	2304      	movs	r3, #4
 8006a64:	e15a      	b.n	8006d1c <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8006a66:	4baf      	ldr	r3, [pc, #700]	; (8006d24 <USER_SPI_ioctl+0x2d8>)
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	b2db      	uxtb	r3, r3
 8006a6c:	f003 0301 	and.w	r3, r3, #1
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d001      	beq.n	8006a78 <USER_SPI_ioctl+0x2c>
 8006a74:	2303      	movs	r3, #3
 8006a76:	e151      	b.n	8006d1c <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8006a7e:	79bb      	ldrb	r3, [r7, #6]
 8006a80:	2b04      	cmp	r3, #4
 8006a82:	f200 8136 	bhi.w	8006cf2 <USER_SPI_ioctl+0x2a6>
 8006a86:	a201      	add	r2, pc, #4	; (adr r2, 8006a8c <USER_SPI_ioctl+0x40>)
 8006a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a8c:	08006aa1 	.word	0x08006aa1
 8006a90:	08006ab5 	.word	0x08006ab5
 8006a94:	08006cf3 	.word	0x08006cf3
 8006a98:	08006b61 	.word	0x08006b61
 8006a9c:	08006c57 	.word	0x08006c57
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8006aa0:	f7ff fd0c 	bl	80064bc <spiselect>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	f000 8127 	beq.w	8006cfa <USER_SPI_ioctl+0x2ae>
 8006aac:	2300      	movs	r3, #0
 8006aae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8006ab2:	e122      	b.n	8006cfa <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8006ab4:	2100      	movs	r1, #0
 8006ab6:	2009      	movs	r0, #9
 8006ab8:	f7ff fd75 	bl	80065a6 <send_cmd>
 8006abc:	4603      	mov	r3, r0
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	f040 811d 	bne.w	8006cfe <USER_SPI_ioctl+0x2b2>
 8006ac4:	f107 030c 	add.w	r3, r7, #12
 8006ac8:	2110      	movs	r1, #16
 8006aca:	4618      	mov	r0, r3
 8006acc:	f7ff fd10 	bl	80064f0 <rcvr_datablock>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	f000 8113 	beq.w	8006cfe <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8006ad8:	7b3b      	ldrb	r3, [r7, #12]
 8006ada:	099b      	lsrs	r3, r3, #6
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d111      	bne.n	8006b06 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8006ae2:	7d7b      	ldrb	r3, [r7, #21]
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	7d3b      	ldrb	r3, [r7, #20]
 8006ae8:	021b      	lsls	r3, r3, #8
 8006aea:	4413      	add	r3, r2
 8006aec:	461a      	mov	r2, r3
 8006aee:	7cfb      	ldrb	r3, [r7, #19]
 8006af0:	041b      	lsls	r3, r3, #16
 8006af2:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8006af6:	4413      	add	r3, r2
 8006af8:	3301      	adds	r3, #1
 8006afa:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8006afc:	69fb      	ldr	r3, [r7, #28]
 8006afe:	029a      	lsls	r2, r3, #10
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	601a      	str	r2, [r3, #0]
 8006b04:	e028      	b.n	8006b58 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8006b06:	7c7b      	ldrb	r3, [r7, #17]
 8006b08:	f003 030f 	and.w	r3, r3, #15
 8006b0c:	b2da      	uxtb	r2, r3
 8006b0e:	7dbb      	ldrb	r3, [r7, #22]
 8006b10:	09db      	lsrs	r3, r3, #7
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	4413      	add	r3, r2
 8006b16:	b2da      	uxtb	r2, r3
 8006b18:	7d7b      	ldrb	r3, [r7, #21]
 8006b1a:	005b      	lsls	r3, r3, #1
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	f003 0306 	and.w	r3, r3, #6
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	4413      	add	r3, r2
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	3302      	adds	r3, #2
 8006b2a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8006b2e:	7d3b      	ldrb	r3, [r7, #20]
 8006b30:	099b      	lsrs	r3, r3, #6
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	461a      	mov	r2, r3
 8006b36:	7cfb      	ldrb	r3, [r7, #19]
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	441a      	add	r2, r3
 8006b3c:	7cbb      	ldrb	r3, [r7, #18]
 8006b3e:	029b      	lsls	r3, r3, #10
 8006b40:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006b44:	4413      	add	r3, r2
 8006b46:	3301      	adds	r3, #1
 8006b48:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8006b4a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006b4e:	3b09      	subs	r3, #9
 8006b50:	69fa      	ldr	r2, [r7, #28]
 8006b52:	409a      	lsls	r2, r3
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8006b5e:	e0ce      	b.n	8006cfe <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8006b60:	4b71      	ldr	r3, [pc, #452]	; (8006d28 <USER_SPI_ioctl+0x2dc>)
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	f003 0304 	and.w	r3, r3, #4
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d031      	beq.n	8006bd0 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8006b6c:	2100      	movs	r1, #0
 8006b6e:	208d      	movs	r0, #141	; 0x8d
 8006b70:	f7ff fd19 	bl	80065a6 <send_cmd>
 8006b74:	4603      	mov	r3, r0
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	f040 80c3 	bne.w	8006d02 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8006b7c:	20ff      	movs	r0, #255	; 0xff
 8006b7e:	f7ff fc1f 	bl	80063c0 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8006b82:	f107 030c 	add.w	r3, r7, #12
 8006b86:	2110      	movs	r1, #16
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f7ff fcb1 	bl	80064f0 <rcvr_datablock>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	f000 80b6 	beq.w	8006d02 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8006b96:	2330      	movs	r3, #48	; 0x30
 8006b98:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8006b9c:	e007      	b.n	8006bae <USER_SPI_ioctl+0x162>
 8006b9e:	20ff      	movs	r0, #255	; 0xff
 8006ba0:	f7ff fc0e 	bl	80063c0 <xchg_spi>
 8006ba4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006ba8:	3b01      	subs	r3, #1
 8006baa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8006bae:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d1f3      	bne.n	8006b9e <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8006bb6:	7dbb      	ldrb	r3, [r7, #22]
 8006bb8:	091b      	lsrs	r3, r3, #4
 8006bba:	b2db      	uxtb	r3, r3
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	2310      	movs	r3, #16
 8006bc0:	fa03 f202 	lsl.w	r2, r3, r2
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8006bce:	e098      	b.n	8006d02 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8006bd0:	2100      	movs	r1, #0
 8006bd2:	2009      	movs	r0, #9
 8006bd4:	f7ff fce7 	bl	80065a6 <send_cmd>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	f040 8091 	bne.w	8006d02 <USER_SPI_ioctl+0x2b6>
 8006be0:	f107 030c 	add.w	r3, r7, #12
 8006be4:	2110      	movs	r1, #16
 8006be6:	4618      	mov	r0, r3
 8006be8:	f7ff fc82 	bl	80064f0 <rcvr_datablock>
 8006bec:	4603      	mov	r3, r0
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	f000 8087 	beq.w	8006d02 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8006bf4:	4b4c      	ldr	r3, [pc, #304]	; (8006d28 <USER_SPI_ioctl+0x2dc>)
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	f003 0302 	and.w	r3, r3, #2
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d012      	beq.n	8006c26 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8006c00:	7dbb      	ldrb	r3, [r7, #22]
 8006c02:	005b      	lsls	r3, r3, #1
 8006c04:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8006c08:	7dfa      	ldrb	r2, [r7, #23]
 8006c0a:	09d2      	lsrs	r2, r2, #7
 8006c0c:	b2d2      	uxtb	r2, r2
 8006c0e:	4413      	add	r3, r2
 8006c10:	1c5a      	adds	r2, r3, #1
 8006c12:	7e7b      	ldrb	r3, [r7, #25]
 8006c14:	099b      	lsrs	r3, r3, #6
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	3b01      	subs	r3, #1
 8006c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c1e:	461a      	mov	r2, r3
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	601a      	str	r2, [r3, #0]
 8006c24:	e013      	b.n	8006c4e <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8006c26:	7dbb      	ldrb	r3, [r7, #22]
 8006c28:	109b      	asrs	r3, r3, #2
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	f003 031f 	and.w	r3, r3, #31
 8006c30:	3301      	adds	r3, #1
 8006c32:	7dfa      	ldrb	r2, [r7, #23]
 8006c34:	00d2      	lsls	r2, r2, #3
 8006c36:	f002 0218 	and.w	r2, r2, #24
 8006c3a:	7df9      	ldrb	r1, [r7, #23]
 8006c3c:	0949      	lsrs	r1, r1, #5
 8006c3e:	b2c9      	uxtb	r1, r1
 8006c40:	440a      	add	r2, r1
 8006c42:	3201      	adds	r2, #1
 8006c44:	fb02 f303 	mul.w	r3, r2, r3
 8006c48:	461a      	mov	r2, r3
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8006c54:	e055      	b.n	8006d02 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8006c56:	4b34      	ldr	r3, [pc, #208]	; (8006d28 <USER_SPI_ioctl+0x2dc>)
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	f003 0306 	and.w	r3, r3, #6
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d051      	beq.n	8006d06 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8006c62:	f107 020c 	add.w	r2, r7, #12
 8006c66:	79fb      	ldrb	r3, [r7, #7]
 8006c68:	210b      	movs	r1, #11
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f7ff feee 	bl	8006a4c <USER_SPI_ioctl>
 8006c70:	4603      	mov	r3, r0
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d149      	bne.n	8006d0a <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8006c76:	7b3b      	ldrb	r3, [r7, #12]
 8006c78:	099b      	lsrs	r3, r3, #6
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d104      	bne.n	8006c8a <USER_SPI_ioctl+0x23e>
 8006c80:	7dbb      	ldrb	r3, [r7, #22]
 8006c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d041      	beq.n	8006d0e <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	623b      	str	r3, [r7, #32]
 8006c8e:	6a3b      	ldr	r3, [r7, #32]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c94:	6a3b      	ldr	r3, [r7, #32]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8006c9a:	4b23      	ldr	r3, [pc, #140]	; (8006d28 <USER_SPI_ioctl+0x2dc>)
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	f003 0308 	and.w	r3, r3, #8
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d105      	bne.n	8006cb2 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8006ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca8:	025b      	lsls	r3, r3, #9
 8006caa:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cae:	025b      	lsls	r3, r3, #9
 8006cb0:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8006cb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006cb4:	2020      	movs	r0, #32
 8006cb6:	f7ff fc76 	bl	80065a6 <send_cmd>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d128      	bne.n	8006d12 <USER_SPI_ioctl+0x2c6>
 8006cc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006cc2:	2021      	movs	r0, #33	; 0x21
 8006cc4:	f7ff fc6f 	bl	80065a6 <send_cmd>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d121      	bne.n	8006d12 <USER_SPI_ioctl+0x2c6>
 8006cce:	2100      	movs	r1, #0
 8006cd0:	2026      	movs	r0, #38	; 0x26
 8006cd2:	f7ff fc68 	bl	80065a6 <send_cmd>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d11a      	bne.n	8006d12 <USER_SPI_ioctl+0x2c6>
 8006cdc:	f247 5030 	movw	r0, #30000	; 0x7530
 8006ce0:	f7ff fbbb 	bl	800645a <wait_ready>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d013      	beq.n	8006d12 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8006cea:	2300      	movs	r3, #0
 8006cec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8006cf0:	e00f      	b.n	8006d12 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8006cf2:	2304      	movs	r3, #4
 8006cf4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006cf8:	e00c      	b.n	8006d14 <USER_SPI_ioctl+0x2c8>
		break;
 8006cfa:	bf00      	nop
 8006cfc:	e00a      	b.n	8006d14 <USER_SPI_ioctl+0x2c8>
		break;
 8006cfe:	bf00      	nop
 8006d00:	e008      	b.n	8006d14 <USER_SPI_ioctl+0x2c8>
		break;
 8006d02:	bf00      	nop
 8006d04:	e006      	b.n	8006d14 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8006d06:	bf00      	nop
 8006d08:	e004      	b.n	8006d14 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8006d0a:	bf00      	nop
 8006d0c:	e002      	b.n	8006d14 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8006d0e:	bf00      	nop
 8006d10:	e000      	b.n	8006d14 <USER_SPI_ioctl+0x2c8>
		break;
 8006d12:	bf00      	nop
	}

	despiselect();
 8006d14:	f7ff fbc4 	bl	80064a0 <despiselect>

	return res;
 8006d18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3730      	adds	r7, #48	; 0x30
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}
 8006d24:	20000020 	.word	0x20000020
 8006d28:	200001c8 	.word	0x200001c8

08006d2c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006d2c:	b590      	push	{r4, r7, lr}
 8006d2e:	b089      	sub	sp, #36	; 0x24
 8006d30:	af04      	add	r7, sp, #16
 8006d32:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006d34:	2301      	movs	r3, #1
 8006d36:	2202      	movs	r2, #2
 8006d38:	2102      	movs	r1, #2
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 fc66 	bl	800760c <USBH_FindInterface>
 8006d40:	4603      	mov	r3, r0
 8006d42:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006d44:	7bfb      	ldrb	r3, [r7, #15]
 8006d46:	2bff      	cmp	r3, #255	; 0xff
 8006d48:	d002      	beq.n	8006d50 <USBH_CDC_InterfaceInit+0x24>
 8006d4a:	7bfb      	ldrb	r3, [r7, #15]
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d901      	bls.n	8006d54 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006d50:	2302      	movs	r3, #2
 8006d52:	e13d      	b.n	8006fd0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006d54:	7bfb      	ldrb	r3, [r7, #15]
 8006d56:	4619      	mov	r1, r3
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f000 fc3b 	bl	80075d4 <USBH_SelectInterface>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006d62:	7bbb      	ldrb	r3, [r7, #14]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d001      	beq.n	8006d6c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006d68:	2302      	movs	r3, #2
 8006d6a:	e131      	b.n	8006fd0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006d72:	2050      	movs	r0, #80	; 0x50
 8006d74:	f004 fdec 	bl	800b950 <malloc>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d82:	69db      	ldr	r3, [r3, #28]
 8006d84:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d101      	bne.n	8006d90 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006d8c:	2302      	movs	r3, #2
 8006d8e:	e11f      	b.n	8006fd0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006d90:	2250      	movs	r2, #80	; 0x50
 8006d92:	2100      	movs	r1, #0
 8006d94:	68b8      	ldr	r0, [r7, #8]
 8006d96:	f004 fdeb 	bl	800b970 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006d9a:	7bfb      	ldrb	r3, [r7, #15]
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	211a      	movs	r1, #26
 8006da0:	fb01 f303 	mul.w	r3, r1, r3
 8006da4:	4413      	add	r3, r2
 8006da6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	b25b      	sxtb	r3, r3
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	da15      	bge.n	8006dde <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006db2:	7bfb      	ldrb	r3, [r7, #15]
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	211a      	movs	r1, #26
 8006db8:	fb01 f303 	mul.w	r3, r1, r3
 8006dbc:	4413      	add	r3, r2
 8006dbe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006dc2:	781a      	ldrb	r2, [r3, #0]
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006dc8:	7bfb      	ldrb	r3, [r7, #15]
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	211a      	movs	r1, #26
 8006dce:	fb01 f303 	mul.w	r3, r1, r3
 8006dd2:	4413      	add	r3, r2
 8006dd4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006dd8:	881a      	ldrh	r2, [r3, #0]
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	785b      	ldrb	r3, [r3, #1]
 8006de2:	4619      	mov	r1, r3
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f001 fe32 	bl	8008a4e <USBH_AllocPipe>
 8006dea:	4603      	mov	r3, r0
 8006dec:	461a      	mov	r2, r3
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	7819      	ldrb	r1, [r3, #0]
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	7858      	ldrb	r0, [r3, #1]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006e06:	68ba      	ldr	r2, [r7, #8]
 8006e08:	8952      	ldrh	r2, [r2, #10]
 8006e0a:	9202      	str	r2, [sp, #8]
 8006e0c:	2203      	movs	r2, #3
 8006e0e:	9201      	str	r2, [sp, #4]
 8006e10:	9300      	str	r3, [sp, #0]
 8006e12:	4623      	mov	r3, r4
 8006e14:	4602      	mov	r2, r0
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f001 fdea 	bl	80089f0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	2200      	movs	r2, #0
 8006e22:	4619      	mov	r1, r3
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f004 fce5 	bl	800b7f4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	210a      	movs	r1, #10
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 fbeb 	bl	800760c <USBH_FindInterface>
 8006e36:	4603      	mov	r3, r0
 8006e38:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006e3a:	7bfb      	ldrb	r3, [r7, #15]
 8006e3c:	2bff      	cmp	r3, #255	; 0xff
 8006e3e:	d002      	beq.n	8006e46 <USBH_CDC_InterfaceInit+0x11a>
 8006e40:	7bfb      	ldrb	r3, [r7, #15]
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d901      	bls.n	8006e4a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006e46:	2302      	movs	r3, #2
 8006e48:	e0c2      	b.n	8006fd0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006e4a:	7bfb      	ldrb	r3, [r7, #15]
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	211a      	movs	r1, #26
 8006e50:	fb01 f303 	mul.w	r3, r1, r3
 8006e54:	4413      	add	r3, r2
 8006e56:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	b25b      	sxtb	r3, r3
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	da16      	bge.n	8006e90 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006e62:	7bfb      	ldrb	r3, [r7, #15]
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	211a      	movs	r1, #26
 8006e68:	fb01 f303 	mul.w	r3, r1, r3
 8006e6c:	4413      	add	r3, r2
 8006e6e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006e72:	781a      	ldrb	r2, [r3, #0]
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006e78:	7bfb      	ldrb	r3, [r7, #15]
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	211a      	movs	r1, #26
 8006e7e:	fb01 f303 	mul.w	r3, r1, r3
 8006e82:	4413      	add	r3, r2
 8006e84:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006e88:	881a      	ldrh	r2, [r3, #0]
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	835a      	strh	r2, [r3, #26]
 8006e8e:	e015      	b.n	8006ebc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006e90:	7bfb      	ldrb	r3, [r7, #15]
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	211a      	movs	r1, #26
 8006e96:	fb01 f303 	mul.w	r3, r1, r3
 8006e9a:	4413      	add	r3, r2
 8006e9c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006ea0:	781a      	ldrb	r2, [r3, #0]
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006ea6:	7bfb      	ldrb	r3, [r7, #15]
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	211a      	movs	r1, #26
 8006eac:	fb01 f303 	mul.w	r3, r1, r3
 8006eb0:	4413      	add	r3, r2
 8006eb2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006eb6:	881a      	ldrh	r2, [r3, #0]
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006ebc:	7bfb      	ldrb	r3, [r7, #15]
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	211a      	movs	r1, #26
 8006ec2:	fb01 f303 	mul.w	r3, r1, r3
 8006ec6:	4413      	add	r3, r2
 8006ec8:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	b25b      	sxtb	r3, r3
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	da16      	bge.n	8006f02 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006ed4:	7bfb      	ldrb	r3, [r7, #15]
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	211a      	movs	r1, #26
 8006eda:	fb01 f303 	mul.w	r3, r1, r3
 8006ede:	4413      	add	r3, r2
 8006ee0:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006ee4:	781a      	ldrb	r2, [r3, #0]
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006eea:	7bfb      	ldrb	r3, [r7, #15]
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	211a      	movs	r1, #26
 8006ef0:	fb01 f303 	mul.w	r3, r1, r3
 8006ef4:	4413      	add	r3, r2
 8006ef6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006efa:	881a      	ldrh	r2, [r3, #0]
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	835a      	strh	r2, [r3, #26]
 8006f00:	e015      	b.n	8006f2e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006f02:	7bfb      	ldrb	r3, [r7, #15]
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	211a      	movs	r1, #26
 8006f08:	fb01 f303 	mul.w	r3, r1, r3
 8006f0c:	4413      	add	r3, r2
 8006f0e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006f12:	781a      	ldrb	r2, [r3, #0]
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006f18:	7bfb      	ldrb	r3, [r7, #15]
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	211a      	movs	r1, #26
 8006f1e:	fb01 f303 	mul.w	r3, r1, r3
 8006f22:	4413      	add	r3, r2
 8006f24:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006f28:	881a      	ldrh	r2, [r3, #0]
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	7b9b      	ldrb	r3, [r3, #14]
 8006f32:	4619      	mov	r1, r3
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f001 fd8a 	bl	8008a4e <USBH_AllocPipe>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	7bdb      	ldrb	r3, [r3, #15]
 8006f46:	4619      	mov	r1, r3
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f001 fd80 	bl	8008a4e <USBH_AllocPipe>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	461a      	mov	r2, r3
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	7b59      	ldrb	r1, [r3, #13]
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	7b98      	ldrb	r0, [r3, #14]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006f6a:	68ba      	ldr	r2, [r7, #8]
 8006f6c:	8b12      	ldrh	r2, [r2, #24]
 8006f6e:	9202      	str	r2, [sp, #8]
 8006f70:	2202      	movs	r2, #2
 8006f72:	9201      	str	r2, [sp, #4]
 8006f74:	9300      	str	r3, [sp, #0]
 8006f76:	4623      	mov	r3, r4
 8006f78:	4602      	mov	r2, r0
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f001 fd38 	bl	80089f0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	7b19      	ldrb	r1, [r3, #12]
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	7bd8      	ldrb	r0, [r3, #15]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006f94:	68ba      	ldr	r2, [r7, #8]
 8006f96:	8b52      	ldrh	r2, [r2, #26]
 8006f98:	9202      	str	r2, [sp, #8]
 8006f9a:	2202      	movs	r2, #2
 8006f9c:	9201      	str	r2, [sp, #4]
 8006f9e:	9300      	str	r3, [sp, #0]
 8006fa0:	4623      	mov	r3, r4
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f001 fd23 	bl	80089f0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	2200      	movs	r2, #0
 8006fae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	7b5b      	ldrb	r3, [r3, #13]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	4619      	mov	r1, r3
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f004 fc1a 	bl	800b7f4 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	7b1b      	ldrb	r3, [r3, #12]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	4619      	mov	r1, r3
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f004 fc13 	bl	800b7f4 <USBH_LL_SetToggle>

  return USBH_OK;
 8006fce:	2300      	movs	r3, #0
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3714      	adds	r7, #20
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd90      	pop	{r4, r7, pc}

08006fd8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b084      	sub	sp, #16
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fe6:	69db      	ldr	r3, [r3, #28]
 8006fe8:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d00e      	beq.n	8007010 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	781b      	ldrb	r3, [r3, #0]
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f001 fd18 	bl	8008a2e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	4619      	mov	r1, r3
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f001 fd43 	bl	8008a90 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2200      	movs	r2, #0
 800700e:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	7b1b      	ldrb	r3, [r3, #12]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d00e      	beq.n	8007036 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	7b1b      	ldrb	r3, [r3, #12]
 800701c:	4619      	mov	r1, r3
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f001 fd05 	bl	8008a2e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	7b1b      	ldrb	r3, [r3, #12]
 8007028:	4619      	mov	r1, r3
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f001 fd30 	bl	8008a90 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2200      	movs	r2, #0
 8007034:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	7b5b      	ldrb	r3, [r3, #13]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d00e      	beq.n	800705c <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	7b5b      	ldrb	r3, [r3, #13]
 8007042:	4619      	mov	r1, r3
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f001 fcf2 	bl	8008a2e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	7b5b      	ldrb	r3, [r3, #13]
 800704e:	4619      	mov	r1, r3
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f001 fd1d 	bl	8008a90 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2200      	movs	r2, #0
 800705a:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007062:	69db      	ldr	r3, [r3, #28]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d00b      	beq.n	8007080 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800706e:	69db      	ldr	r3, [r3, #28]
 8007070:	4618      	mov	r0, r3
 8007072:	f004 fc75 	bl	800b960 <free>
    phost->pActiveClass->pData = 0U;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800707c:	2200      	movs	r2, #0
 800707e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007080:	2300      	movs	r3, #0
}
 8007082:	4618      	mov	r0, r3
 8007084:	3710      	adds	r7, #16
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}

0800708a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800708a:	b580      	push	{r7, lr}
 800708c:	b084      	sub	sp, #16
 800708e:	af00      	add	r7, sp, #0
 8007090:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007098:	69db      	ldr	r3, [r3, #28]
 800709a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	3340      	adds	r3, #64	; 0x40
 80070a0:	4619      	mov	r1, r3
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 f8b1 	bl	800720a <GetLineCoding>
 80070a8:	4603      	mov	r3, r0
 80070aa:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80070ac:	7afb      	ldrb	r3, [r7, #11]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d105      	bne.n	80070be <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80070b8:	2102      	movs	r1, #2
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80070be:	7afb      	ldrb	r3, [r7, #11]
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3710      	adds	r7, #16
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80070d0:	2301      	movs	r3, #1
 80070d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80070d4:	2300      	movs	r3, #0
 80070d6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070de:	69db      	ldr	r3, [r3, #28]
 80070e0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80070e8:	2b04      	cmp	r3, #4
 80070ea:	d877      	bhi.n	80071dc <USBH_CDC_Process+0x114>
 80070ec:	a201      	add	r2, pc, #4	; (adr r2, 80070f4 <USBH_CDC_Process+0x2c>)
 80070ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f2:	bf00      	nop
 80070f4:	08007109 	.word	0x08007109
 80070f8:	0800710f 	.word	0x0800710f
 80070fc:	0800713f 	.word	0x0800713f
 8007100:	080071b3 	.word	0x080071b3
 8007104:	080071c1 	.word	0x080071c1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007108:	2300      	movs	r3, #0
 800710a:	73fb      	strb	r3, [r7, #15]
      break;
 800710c:	e06d      	b.n	80071ea <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007112:	4619      	mov	r1, r3
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f000 f897 	bl	8007248 <SetLineCoding>
 800711a:	4603      	mov	r3, r0
 800711c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800711e:	7bbb      	ldrb	r3, [r7, #14]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d104      	bne.n	800712e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	2202      	movs	r2, #2
 8007128:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800712c:	e058      	b.n	80071e0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800712e:	7bbb      	ldrb	r3, [r7, #14]
 8007130:	2b01      	cmp	r3, #1
 8007132:	d055      	beq.n	80071e0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	2204      	movs	r2, #4
 8007138:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800713c:	e050      	b.n	80071e0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	3340      	adds	r3, #64	; 0x40
 8007142:	4619      	mov	r1, r3
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 f860 	bl	800720a <GetLineCoding>
 800714a:	4603      	mov	r3, r0
 800714c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800714e:	7bbb      	ldrb	r3, [r7, #14]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d126      	bne.n	80071a2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	2200      	movs	r2, #0
 8007158:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007166:	791b      	ldrb	r3, [r3, #4]
 8007168:	429a      	cmp	r2, r3
 800716a:	d13b      	bne.n	80071e4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007176:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007178:	429a      	cmp	r2, r3
 800717a:	d133      	bne.n	80071e4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007186:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007188:	429a      	cmp	r2, r3
 800718a:	d12b      	bne.n	80071e4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007194:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007196:	429a      	cmp	r2, r3
 8007198:	d124      	bne.n	80071e4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 f958 	bl	8007450 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80071a0:	e020      	b.n	80071e4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80071a2:	7bbb      	ldrb	r3, [r7, #14]
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d01d      	beq.n	80071e4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	2204      	movs	r2, #4
 80071ac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80071b0:	e018      	b.n	80071e4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f000 f867 	bl	8007286 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 f8da 	bl	8007372 <CDC_ProcessReception>
      break;
 80071be:	e014      	b.n	80071ea <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80071c0:	2100      	movs	r1, #0
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 ffe3 	bl	800818e <USBH_ClrFeature>
 80071c8:	4603      	mov	r3, r0
 80071ca:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80071cc:	7bbb      	ldrb	r3, [r7, #14]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d10a      	bne.n	80071e8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	2200      	movs	r2, #0
 80071d6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80071da:	e005      	b.n	80071e8 <USBH_CDC_Process+0x120>

    default:
      break;
 80071dc:	bf00      	nop
 80071de:	e004      	b.n	80071ea <USBH_CDC_Process+0x122>
      break;
 80071e0:	bf00      	nop
 80071e2:	e002      	b.n	80071ea <USBH_CDC_Process+0x122>
      break;
 80071e4:	bf00      	nop
 80071e6:	e000      	b.n	80071ea <USBH_CDC_Process+0x122>
      break;
 80071e8:	bf00      	nop

  }

  return status;
 80071ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3710      	adds	r7, #16
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80071fc:	2300      	movs	r3, #0
}
 80071fe:	4618      	mov	r0, r3
 8007200:	370c      	adds	r7, #12
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr

0800720a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800720a:	b580      	push	{r7, lr}
 800720c:	b082      	sub	sp, #8
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
 8007212:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	22a1      	movs	r2, #161	; 0xa1
 8007218:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2221      	movs	r2, #33	; 0x21
 800721e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2207      	movs	r2, #7
 8007230:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	2207      	movs	r2, #7
 8007236:	4619      	mov	r1, r3
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f001 f988 	bl	800854e <USBH_CtlReq>
 800723e:	4603      	mov	r3, r0
}
 8007240:	4618      	mov	r0, r3
 8007242:	3708      	adds	r7, #8
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}

08007248 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b082      	sub	sp, #8
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2221      	movs	r2, #33	; 0x21
 8007256:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2220      	movs	r2, #32
 800725c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2207      	movs	r2, #7
 800726e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	2207      	movs	r2, #7
 8007274:	4619      	mov	r1, r3
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f001 f969 	bl	800854e <USBH_CtlReq>
 800727c:	4603      	mov	r3, r0
}
 800727e:	4618      	mov	r0, r3
 8007280:	3708      	adds	r7, #8
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}

08007286 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007286:	b580      	push	{r7, lr}
 8007288:	b086      	sub	sp, #24
 800728a:	af02      	add	r7, sp, #8
 800728c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007294:	69db      	ldr	r3, [r3, #28]
 8007296:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007298:	2300      	movs	r3, #0
 800729a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d002      	beq.n	80072ac <CDC_ProcessTransmission+0x26>
 80072a6:	2b02      	cmp	r3, #2
 80072a8:	d023      	beq.n	80072f2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80072aa:	e05e      	b.n	800736a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b0:	68fa      	ldr	r2, [r7, #12]
 80072b2:	8b12      	ldrh	r2, [r2, #24]
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d90b      	bls.n	80072d0 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	69d9      	ldr	r1, [r3, #28]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	8b1a      	ldrh	r2, [r3, #24]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	7b5b      	ldrb	r3, [r3, #13]
 80072c4:	2001      	movs	r0, #1
 80072c6:	9000      	str	r0, [sp, #0]
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f001 fb4e 	bl	800896a <USBH_BulkSendData>
 80072ce:	e00b      	b.n	80072e8 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 80072d8:	b29a      	uxth	r2, r3
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	7b5b      	ldrb	r3, [r3, #13]
 80072de:	2001      	movs	r0, #1
 80072e0:	9000      	str	r0, [sp, #0]
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f001 fb41 	bl	800896a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2202      	movs	r2, #2
 80072ec:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80072f0:	e03b      	b.n	800736a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	7b5b      	ldrb	r3, [r3, #13]
 80072f6:	4619      	mov	r1, r3
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f004 fa51 	bl	800b7a0 <USBH_LL_GetURBState>
 80072fe:	4603      	mov	r3, r0
 8007300:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007302:	7afb      	ldrb	r3, [r7, #11]
 8007304:	2b01      	cmp	r3, #1
 8007306:	d128      	bne.n	800735a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800730c:	68fa      	ldr	r2, [r7, #12]
 800730e:	8b12      	ldrh	r2, [r2, #24]
 8007310:	4293      	cmp	r3, r2
 8007312:	d90e      	bls.n	8007332 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007318:	68fa      	ldr	r2, [r7, #12]
 800731a:	8b12      	ldrh	r2, [r2, #24]
 800731c:	1a9a      	subs	r2, r3, r2
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	69db      	ldr	r3, [r3, #28]
 8007326:	68fa      	ldr	r2, [r7, #12]
 8007328:	8b12      	ldrh	r2, [r2, #24]
 800732a:	441a      	add	r2, r3
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	61da      	str	r2, [r3, #28]
 8007330:	e002      	b.n	8007338 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2200      	movs	r2, #0
 8007336:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733c:	2b00      	cmp	r3, #0
 800733e:	d004      	beq.n	800734a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2201      	movs	r2, #1
 8007344:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007348:	e00e      	b.n	8007368 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2200      	movs	r2, #0
 800734e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 f868 	bl	8007428 <USBH_CDC_TransmitCallback>
      break;
 8007358:	e006      	b.n	8007368 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800735a:	7afb      	ldrb	r3, [r7, #11]
 800735c:	2b02      	cmp	r3, #2
 800735e:	d103      	bne.n	8007368 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2201      	movs	r2, #1
 8007364:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007368:	bf00      	nop
  }
}
 800736a:	bf00      	nop
 800736c:	3710      	adds	r7, #16
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}

08007372 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007372:	b580      	push	{r7, lr}
 8007374:	b086      	sub	sp, #24
 8007376:	af00      	add	r7, sp, #0
 8007378:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007380:	69db      	ldr	r3, [r3, #28]
 8007382:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007384:	2300      	movs	r3, #0
 8007386:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800738e:	2b03      	cmp	r3, #3
 8007390:	d002      	beq.n	8007398 <CDC_ProcessReception+0x26>
 8007392:	2b04      	cmp	r3, #4
 8007394:	d00e      	beq.n	80073b4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007396:	e043      	b.n	8007420 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	6a19      	ldr	r1, [r3, #32]
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	8b5a      	ldrh	r2, [r3, #26]
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	7b1b      	ldrb	r3, [r3, #12]
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f001 fb05 	bl	80089b4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	2204      	movs	r2, #4
 80073ae:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80073b2:	e035      	b.n	8007420 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	7b1b      	ldrb	r3, [r3, #12]
 80073b8:	4619      	mov	r1, r3
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f004 f9f0 	bl	800b7a0 <USBH_LL_GetURBState>
 80073c0:	4603      	mov	r3, r0
 80073c2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80073c4:	7cfb      	ldrb	r3, [r7, #19]
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d129      	bne.n	800741e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	7b1b      	ldrb	r3, [r3, #12]
 80073ce:	4619      	mov	r1, r3
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f004 f953 	bl	800b67c <USBH_LL_GetLastXferSize>
 80073d6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073dc:	68fa      	ldr	r2, [r7, #12]
 80073de:	429a      	cmp	r2, r3
 80073e0:	d016      	beq.n	8007410 <CDC_ProcessReception+0x9e>
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	8b5b      	ldrh	r3, [r3, #26]
 80073e6:	461a      	mov	r2, r3
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d910      	bls.n	8007410 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	1ad2      	subs	r2, r2, r3
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	6a1a      	ldr	r2, [r3, #32]
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	441a      	add	r2, r3
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	2203      	movs	r2, #3
 800740a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800740e:	e006      	b.n	800741e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	2200      	movs	r2, #0
 8007414:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 f80f 	bl	800743c <USBH_CDC_ReceiveCallback>
      break;
 800741e:	bf00      	nop
  }
}
 8007420:	bf00      	nop
 8007422:	3718      	adds	r7, #24
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007430:	bf00      	nop
 8007432:	370c      	adds	r7, #12
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr

0800743c <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800743c:	b480      	push	{r7}
 800743e:	b083      	sub	sp, #12
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007444:	bf00      	nop
 8007446:	370c      	adds	r7, #12
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007450:	b480      	push	{r7}
 8007452:	b083      	sub	sp, #12
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007458:	bf00      	nop
 800745a:	370c      	adds	r7, #12
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b084      	sub	sp, #16
 8007468:	af00      	add	r7, sp, #0
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	60b9      	str	r1, [r7, #8]
 800746e:	4613      	mov	r3, r2
 8007470:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d101      	bne.n	800747c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007478:	2302      	movs	r3, #2
 800747a:	e029      	b.n	80074d0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	79fa      	ldrb	r2, [r7, #7]
 8007480:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2200      	movs	r2, #0
 8007488:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2200      	movs	r2, #0
 8007490:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007494:	68f8      	ldr	r0, [r7, #12]
 8007496:	f000 f81f 	bl	80074d8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2200      	movs	r2, #0
 800749e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d003      	beq.n	80074c8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	68ba      	ldr	r2, [r7, #8]
 80074c4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80074c8:	68f8      	ldr	r0, [r7, #12]
 80074ca:	f004 f823 	bl	800b514 <USBH_LL_Init>

  return USBH_OK;
 80074ce:	2300      	movs	r3, #0
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3710      	adds	r7, #16
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80074d8:	b480      	push	{r7}
 80074da:	b085      	sub	sp, #20
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80074e0:	2300      	movs	r3, #0
 80074e2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80074e4:	2300      	movs	r3, #0
 80074e6:	60fb      	str	r3, [r7, #12]
 80074e8:	e009      	b.n	80074fe <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80074ea:	687a      	ldr	r2, [r7, #4]
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	33e0      	adds	r3, #224	; 0xe0
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	4413      	add	r3, r2
 80074f4:	2200      	movs	r2, #0
 80074f6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	3301      	adds	r3, #1
 80074fc:	60fb      	str	r3, [r7, #12]
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2b0e      	cmp	r3, #14
 8007502:	d9f2      	bls.n	80074ea <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007504:	2300      	movs	r3, #0
 8007506:	60fb      	str	r3, [r7, #12]
 8007508:	e009      	b.n	800751e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	4413      	add	r3, r2
 8007510:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007514:	2200      	movs	r2, #0
 8007516:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	3301      	adds	r3, #1
 800751c:	60fb      	str	r3, [r7, #12]
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007524:	d3f1      	bcc.n	800750a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2200      	movs	r2, #0
 800752a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2200      	movs	r2, #0
 8007530:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2201      	movs	r2, #1
 8007536:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2201      	movs	r2, #1
 8007544:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2240      	movs	r2, #64	; 0x40
 800754a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2200      	movs	r2, #0
 8007550:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2200      	movs	r2, #0
 8007556:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2201      	movs	r2, #1
 800755e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2200      	movs	r2, #0
 8007566:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007572:	2300      	movs	r3, #0
}
 8007574:	4618      	mov	r0, r3
 8007576:	3714      	adds	r7, #20
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr

08007580 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007580:	b480      	push	{r7}
 8007582:	b085      	sub	sp, #20
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800758a:	2300      	movs	r3, #0
 800758c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d016      	beq.n	80075c2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800759a:	2b00      	cmp	r3, #0
 800759c:	d10e      	bne.n	80075bc <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80075a4:	1c59      	adds	r1, r3, #1
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	33de      	adds	r3, #222	; 0xde
 80075b0:	6839      	ldr	r1, [r7, #0]
 80075b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80075b6:	2300      	movs	r3, #0
 80075b8:	73fb      	strb	r3, [r7, #15]
 80075ba:	e004      	b.n	80075c6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80075bc:	2302      	movs	r3, #2
 80075be:	73fb      	strb	r3, [r7, #15]
 80075c0:	e001      	b.n	80075c6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80075c2:	2302      	movs	r3, #2
 80075c4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80075c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3714      	adds	r7, #20
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr

080075d4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b085      	sub	sp, #20
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	460b      	mov	r3, r1
 80075de:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80075e0:	2300      	movs	r3, #0
 80075e2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80075ea:	78fa      	ldrb	r2, [r7, #3]
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d204      	bcs.n	80075fa <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	78fa      	ldrb	r2, [r7, #3]
 80075f4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80075f8:	e001      	b.n	80075fe <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80075fa:	2302      	movs	r3, #2
 80075fc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80075fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007600:	4618      	mov	r0, r3
 8007602:	3714      	adds	r7, #20
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr

0800760c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800760c:	b480      	push	{r7}
 800760e:	b087      	sub	sp, #28
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	4608      	mov	r0, r1
 8007616:	4611      	mov	r1, r2
 8007618:	461a      	mov	r2, r3
 800761a:	4603      	mov	r3, r0
 800761c:	70fb      	strb	r3, [r7, #3]
 800761e:	460b      	mov	r3, r1
 8007620:	70bb      	strb	r3, [r7, #2]
 8007622:	4613      	mov	r3, r2
 8007624:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007626:	2300      	movs	r3, #0
 8007628:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800762a:	2300      	movs	r3, #0
 800762c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007634:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007636:	e025      	b.n	8007684 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007638:	7dfb      	ldrb	r3, [r7, #23]
 800763a:	221a      	movs	r2, #26
 800763c:	fb02 f303 	mul.w	r3, r2, r3
 8007640:	3308      	adds	r3, #8
 8007642:	68fa      	ldr	r2, [r7, #12]
 8007644:	4413      	add	r3, r2
 8007646:	3302      	adds	r3, #2
 8007648:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	795b      	ldrb	r3, [r3, #5]
 800764e:	78fa      	ldrb	r2, [r7, #3]
 8007650:	429a      	cmp	r2, r3
 8007652:	d002      	beq.n	800765a <USBH_FindInterface+0x4e>
 8007654:	78fb      	ldrb	r3, [r7, #3]
 8007656:	2bff      	cmp	r3, #255	; 0xff
 8007658:	d111      	bne.n	800767e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800765e:	78ba      	ldrb	r2, [r7, #2]
 8007660:	429a      	cmp	r2, r3
 8007662:	d002      	beq.n	800766a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007664:	78bb      	ldrb	r3, [r7, #2]
 8007666:	2bff      	cmp	r3, #255	; 0xff
 8007668:	d109      	bne.n	800767e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800766e:	787a      	ldrb	r2, [r7, #1]
 8007670:	429a      	cmp	r2, r3
 8007672:	d002      	beq.n	800767a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007674:	787b      	ldrb	r3, [r7, #1]
 8007676:	2bff      	cmp	r3, #255	; 0xff
 8007678:	d101      	bne.n	800767e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800767a:	7dfb      	ldrb	r3, [r7, #23]
 800767c:	e006      	b.n	800768c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800767e:	7dfb      	ldrb	r3, [r7, #23]
 8007680:	3301      	adds	r3, #1
 8007682:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007684:	7dfb      	ldrb	r3, [r7, #23]
 8007686:	2b01      	cmp	r3, #1
 8007688:	d9d6      	bls.n	8007638 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800768a:	23ff      	movs	r3, #255	; 0xff
}
 800768c:	4618      	mov	r0, r3
 800768e:	371c      	adds	r7, #28
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr

08007698 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b082      	sub	sp, #8
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f003 ff73 	bl	800b58c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80076a6:	2101      	movs	r1, #1
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f004 f88c 	bl	800b7c6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80076ae:	2300      	movs	r3, #0
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	3708      	adds	r7, #8
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}

080076b8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b088      	sub	sp, #32
 80076bc:	af04      	add	r7, sp, #16
 80076be:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80076c0:	2302      	movs	r3, #2
 80076c2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80076c4:	2300      	movs	r3, #0
 80076c6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d102      	bne.n	80076da <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2203      	movs	r2, #3
 80076d8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	b2db      	uxtb	r3, r3
 80076e0:	2b0b      	cmp	r3, #11
 80076e2:	f200 81b3 	bhi.w	8007a4c <USBH_Process+0x394>
 80076e6:	a201      	add	r2, pc, #4	; (adr r2, 80076ec <USBH_Process+0x34>)
 80076e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ec:	0800771d 	.word	0x0800771d
 80076f0:	0800774f 	.word	0x0800774f
 80076f4:	080077b7 	.word	0x080077b7
 80076f8:	080079e7 	.word	0x080079e7
 80076fc:	08007a4d 	.word	0x08007a4d
 8007700:	0800785b 	.word	0x0800785b
 8007704:	0800798d 	.word	0x0800798d
 8007708:	08007891 	.word	0x08007891
 800770c:	080078b1 	.word	0x080078b1
 8007710:	080078d1 	.word	0x080078d1
 8007714:	080078ff 	.word	0x080078ff
 8007718:	080079cf 	.word	0x080079cf
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007722:	b2db      	uxtb	r3, r3
 8007724:	2b00      	cmp	r3, #0
 8007726:	f000 8193 	beq.w	8007a50 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2201      	movs	r2, #1
 800772e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007730:	20c8      	movs	r0, #200	; 0xc8
 8007732:	f004 f88f 	bl	800b854 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f003 ff85 	bl	800b646 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2200      	movs	r2, #0
 8007748:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800774c:	e180      	b.n	8007a50 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007754:	2b01      	cmp	r3, #1
 8007756:	d107      	bne.n	8007768 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2200      	movs	r2, #0
 800775c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2202      	movs	r2, #2
 8007764:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007766:	e182      	b.n	8007a6e <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800776e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007772:	d914      	bls.n	800779e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800777a:	3301      	adds	r3, #1
 800777c:	b2da      	uxtb	r2, r3
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800778a:	2b03      	cmp	r3, #3
 800778c:	d903      	bls.n	8007796 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	220d      	movs	r2, #13
 8007792:	701a      	strb	r2, [r3, #0]
      break;
 8007794:	e16b      	b.n	8007a6e <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2200      	movs	r2, #0
 800779a:	701a      	strb	r2, [r3, #0]
      break;
 800779c:	e167      	b.n	8007a6e <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80077a4:	f103 020a 	add.w	r2, r3, #10
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80077ae:	200a      	movs	r0, #10
 80077b0:	f004 f850 	bl	800b854 <USBH_Delay>
      break;
 80077b4:	e15b      	b.n	8007a6e <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d005      	beq.n	80077cc <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80077c6:	2104      	movs	r1, #4
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80077cc:	2064      	movs	r0, #100	; 0x64
 80077ce:	f004 f841 	bl	800b854 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f003 ff10 	bl	800b5f8 <USBH_LL_GetSpeed>
 80077d8:	4603      	mov	r3, r0
 80077da:	461a      	mov	r2, r3
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2205      	movs	r2, #5
 80077e6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80077e8:	2100      	movs	r1, #0
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f001 f92f 	bl	8008a4e <USBH_AllocPipe>
 80077f0:	4603      	mov	r3, r0
 80077f2:	461a      	mov	r2, r3
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80077f8:	2180      	movs	r1, #128	; 0x80
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f001 f927 	bl	8008a4e <USBH_AllocPipe>
 8007800:	4603      	mov	r3, r0
 8007802:	461a      	mov	r2, r3
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	7919      	ldrb	r1, [r3, #4]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007818:	687a      	ldr	r2, [r7, #4]
 800781a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800781c:	b292      	uxth	r2, r2
 800781e:	9202      	str	r2, [sp, #8]
 8007820:	2200      	movs	r2, #0
 8007822:	9201      	str	r2, [sp, #4]
 8007824:	9300      	str	r3, [sp, #0]
 8007826:	4603      	mov	r3, r0
 8007828:	2280      	movs	r2, #128	; 0x80
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f001 f8e0 	bl	80089f0 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	7959      	ldrb	r1, [r3, #5]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007844:	b292      	uxth	r2, r2
 8007846:	9202      	str	r2, [sp, #8]
 8007848:	2200      	movs	r2, #0
 800784a:	9201      	str	r2, [sp, #4]
 800784c:	9300      	str	r3, [sp, #0]
 800784e:	4603      	mov	r3, r0
 8007850:	2200      	movs	r2, #0
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f001 f8cc 	bl	80089f0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007858:	e109      	b.n	8007a6e <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f000 f90c 	bl	8007a78 <USBH_HandleEnum>
 8007860:	4603      	mov	r3, r0
 8007862:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007864:	7bbb      	ldrb	r3, [r7, #14]
 8007866:	b2db      	uxtb	r3, r3
 8007868:	2b00      	cmp	r3, #0
 800786a:	f040 80f3 	bne.w	8007a54 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2200      	movs	r2, #0
 8007872:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800787c:	2b01      	cmp	r3, #1
 800787e:	d103      	bne.n	8007888 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2208      	movs	r2, #8
 8007884:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007886:	e0e5      	b.n	8007a54 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2207      	movs	r2, #7
 800788c:	701a      	strb	r2, [r3, #0]
      break;
 800788e:	e0e1      	b.n	8007a54 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007896:	2b00      	cmp	r3, #0
 8007898:	f000 80de 	beq.w	8007a58 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80078a2:	2101      	movs	r1, #1
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2208      	movs	r2, #8
 80078ac:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80078ae:	e0d3      	b.n	8007a58 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	4619      	mov	r1, r3
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 fc20 	bl	8008100 <USBH_SetCfg>
 80078c0:	4603      	mov	r3, r0
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	f040 80ca 	bne.w	8007a5c <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2209      	movs	r2, #9
 80078cc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80078ce:	e0c5      	b.n	8007a5c <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80078d6:	f003 0320 	and.w	r3, r3, #32
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d00b      	beq.n	80078f6 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80078de:	2101      	movs	r1, #1
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 fc30 	bl	8008146 <USBH_SetFeature>
 80078e6:	4603      	mov	r3, r0
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	f040 80b9 	bne.w	8007a60 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	220a      	movs	r2, #10
 80078f2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80078f4:	e0b4      	b.n	8007a60 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	220a      	movs	r2, #10
 80078fa:	701a      	strb	r2, [r3, #0]
      break;
 80078fc:	e0b0      	b.n	8007a60 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007904:	2b00      	cmp	r3, #0
 8007906:	f000 80ad 	beq.w	8007a64 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2200      	movs	r2, #0
 800790e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007912:	2300      	movs	r3, #0
 8007914:	73fb      	strb	r3, [r7, #15]
 8007916:	e016      	b.n	8007946 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007918:	7bfa      	ldrb	r2, [r7, #15]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	32de      	adds	r2, #222	; 0xde
 800791e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007922:	791a      	ldrb	r2, [r3, #4]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800792a:	429a      	cmp	r2, r3
 800792c:	d108      	bne.n	8007940 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800792e:	7bfa      	ldrb	r2, [r7, #15]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	32de      	adds	r2, #222	; 0xde
 8007934:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800793e:	e005      	b.n	800794c <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007940:	7bfb      	ldrb	r3, [r7, #15]
 8007942:	3301      	adds	r3, #1
 8007944:	73fb      	strb	r3, [r7, #15]
 8007946:	7bfb      	ldrb	r3, [r7, #15]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d0e5      	beq.n	8007918 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007952:	2b00      	cmp	r3, #0
 8007954:	d016      	beq.n	8007984 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	4798      	blx	r3
 8007962:	4603      	mov	r3, r0
 8007964:	2b00      	cmp	r3, #0
 8007966:	d109      	bne.n	800797c <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2206      	movs	r2, #6
 800796c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007974:	2103      	movs	r1, #3
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800797a:	e073      	b.n	8007a64 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	220d      	movs	r2, #13
 8007980:	701a      	strb	r2, [r3, #0]
      break;
 8007982:	e06f      	b.n	8007a64 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	220d      	movs	r2, #13
 8007988:	701a      	strb	r2, [r3, #0]
      break;
 800798a:	e06b      	b.n	8007a64 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007992:	2b00      	cmp	r3, #0
 8007994:	d017      	beq.n	80079c6 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800799c:	691b      	ldr	r3, [r3, #16]
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	4798      	blx	r3
 80079a2:	4603      	mov	r3, r0
 80079a4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80079a6:	7bbb      	ldrb	r3, [r7, #14]
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d103      	bne.n	80079b6 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	220b      	movs	r2, #11
 80079b2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80079b4:	e058      	b.n	8007a68 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 80079b6:	7bbb      	ldrb	r3, [r7, #14]
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	2b02      	cmp	r3, #2
 80079bc:	d154      	bne.n	8007a68 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	220d      	movs	r2, #13
 80079c2:	701a      	strb	r2, [r3, #0]
      break;
 80079c4:	e050      	b.n	8007a68 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	220d      	movs	r2, #13
 80079ca:	701a      	strb	r2, [r3, #0]
      break;
 80079cc:	e04c      	b.n	8007a68 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d049      	beq.n	8007a6c <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079de:	695b      	ldr	r3, [r3, #20]
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	4798      	blx	r3
      }
      break;
 80079e4:	e042      	b.n	8007a6c <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2200      	movs	r2, #0
 80079ea:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f7ff fd72 	bl	80074d8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d009      	beq.n	8007a12 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a04:	68db      	ldr	r3, [r3, #12]
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d005      	beq.n	8007a28 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007a22:	2105      	movs	r1, #5
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007a2e:	b2db      	uxtb	r3, r3
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d107      	bne.n	8007a44 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2200      	movs	r2, #0
 8007a38:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f7ff fe2b 	bl	8007698 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007a42:	e014      	b.n	8007a6e <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f003 fda1 	bl	800b58c <USBH_LL_Start>
      break;
 8007a4a:	e010      	b.n	8007a6e <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007a4c:	bf00      	nop
 8007a4e:	e00e      	b.n	8007a6e <USBH_Process+0x3b6>
      break;
 8007a50:	bf00      	nop
 8007a52:	e00c      	b.n	8007a6e <USBH_Process+0x3b6>
      break;
 8007a54:	bf00      	nop
 8007a56:	e00a      	b.n	8007a6e <USBH_Process+0x3b6>
    break;
 8007a58:	bf00      	nop
 8007a5a:	e008      	b.n	8007a6e <USBH_Process+0x3b6>
      break;
 8007a5c:	bf00      	nop
 8007a5e:	e006      	b.n	8007a6e <USBH_Process+0x3b6>
      break;
 8007a60:	bf00      	nop
 8007a62:	e004      	b.n	8007a6e <USBH_Process+0x3b6>
      break;
 8007a64:	bf00      	nop
 8007a66:	e002      	b.n	8007a6e <USBH_Process+0x3b6>
      break;
 8007a68:	bf00      	nop
 8007a6a:	e000      	b.n	8007a6e <USBH_Process+0x3b6>
      break;
 8007a6c:	bf00      	nop
  }
  return USBH_OK;
 8007a6e:	2300      	movs	r3, #0
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3710      	adds	r7, #16
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b088      	sub	sp, #32
 8007a7c:	af04      	add	r7, sp, #16
 8007a7e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007a80:	2301      	movs	r3, #1
 8007a82:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007a84:	2301      	movs	r3, #1
 8007a86:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	785b      	ldrb	r3, [r3, #1]
 8007a8c:	2b07      	cmp	r3, #7
 8007a8e:	f200 81c1 	bhi.w	8007e14 <USBH_HandleEnum+0x39c>
 8007a92:	a201      	add	r2, pc, #4	; (adr r2, 8007a98 <USBH_HandleEnum+0x20>)
 8007a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a98:	08007ab9 	.word	0x08007ab9
 8007a9c:	08007b77 	.word	0x08007b77
 8007aa0:	08007be1 	.word	0x08007be1
 8007aa4:	08007c6f 	.word	0x08007c6f
 8007aa8:	08007cd9 	.word	0x08007cd9
 8007aac:	08007d49 	.word	0x08007d49
 8007ab0:	08007d8f 	.word	0x08007d8f
 8007ab4:	08007dd5 	.word	0x08007dd5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007ab8:	2108      	movs	r1, #8
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f000 fa50 	bl	8007f60 <USBH_Get_DevDesc>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007ac4:	7bbb      	ldrb	r3, [r7, #14]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d130      	bne.n	8007b2c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	7919      	ldrb	r1, [r3, #4]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007aea:	687a      	ldr	r2, [r7, #4]
 8007aec:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007aee:	b292      	uxth	r2, r2
 8007af0:	9202      	str	r2, [sp, #8]
 8007af2:	2200      	movs	r2, #0
 8007af4:	9201      	str	r2, [sp, #4]
 8007af6:	9300      	str	r3, [sp, #0]
 8007af8:	4603      	mov	r3, r0
 8007afa:	2280      	movs	r2, #128	; 0x80
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 ff77 	bl	80089f0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	7959      	ldrb	r1, [r3, #5]
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007b16:	b292      	uxth	r2, r2
 8007b18:	9202      	str	r2, [sp, #8]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	9201      	str	r2, [sp, #4]
 8007b1e:	9300      	str	r3, [sp, #0]
 8007b20:	4603      	mov	r3, r0
 8007b22:	2200      	movs	r2, #0
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 ff63 	bl	80089f0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007b2a:	e175      	b.n	8007e18 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b2c:	7bbb      	ldrb	r3, [r7, #14]
 8007b2e:	2b03      	cmp	r3, #3
 8007b30:	f040 8172 	bne.w	8007e18 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	b2da      	uxtb	r2, r3
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007b4a:	2b03      	cmp	r3, #3
 8007b4c:	d903      	bls.n	8007b56 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	220d      	movs	r2, #13
 8007b52:	701a      	strb	r2, [r3, #0]
      break;
 8007b54:	e160      	b.n	8007e18 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	795b      	ldrb	r3, [r3, #5]
 8007b5a:	4619      	mov	r1, r3
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 ff97 	bl	8008a90 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	791b      	ldrb	r3, [r3, #4]
 8007b66:	4619      	mov	r1, r3
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f000 ff91 	bl	8008a90 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	701a      	strb	r2, [r3, #0]
      break;
 8007b74:	e150      	b.n	8007e18 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007b76:	2112      	movs	r1, #18
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 f9f1 	bl	8007f60 <USBH_Get_DevDesc>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007b82:	7bbb      	ldrb	r3, [r7, #14]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d103      	bne.n	8007b90 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2202      	movs	r2, #2
 8007b8c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007b8e:	e145      	b.n	8007e1c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b90:	7bbb      	ldrb	r3, [r7, #14]
 8007b92:	2b03      	cmp	r3, #3
 8007b94:	f040 8142 	bne.w	8007e1c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007b9e:	3301      	adds	r3, #1
 8007ba0:	b2da      	uxtb	r2, r3
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007bae:	2b03      	cmp	r3, #3
 8007bb0:	d903      	bls.n	8007bba <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	220d      	movs	r2, #13
 8007bb6:	701a      	strb	r2, [r3, #0]
      break;
 8007bb8:	e130      	b.n	8007e1c <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	795b      	ldrb	r3, [r3, #5]
 8007bbe:	4619      	mov	r1, r3
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 ff65 	bl	8008a90 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	791b      	ldrb	r3, [r3, #4]
 8007bca:	4619      	mov	r1, r3
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f000 ff5f 	bl	8008a90 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	701a      	strb	r2, [r3, #0]
      break;
 8007bde:	e11d      	b.n	8007e1c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007be0:	2101      	movs	r1, #1
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 fa68 	bl	80080b8 <USBH_SetAddress>
 8007be8:	4603      	mov	r3, r0
 8007bea:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007bec:	7bbb      	ldrb	r3, [r7, #14]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d132      	bne.n	8007c58 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007bf2:	2002      	movs	r0, #2
 8007bf4:	f003 fe2e 	bl	800b854 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2203      	movs	r2, #3
 8007c04:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	7919      	ldrb	r1, [r3, #4]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007c16:	687a      	ldr	r2, [r7, #4]
 8007c18:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007c1a:	b292      	uxth	r2, r2
 8007c1c:	9202      	str	r2, [sp, #8]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	9201      	str	r2, [sp, #4]
 8007c22:	9300      	str	r3, [sp, #0]
 8007c24:	4603      	mov	r3, r0
 8007c26:	2280      	movs	r2, #128	; 0x80
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 fee1 	bl	80089f0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	7959      	ldrb	r1, [r3, #5]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007c42:	b292      	uxth	r2, r2
 8007c44:	9202      	str	r2, [sp, #8]
 8007c46:	2200      	movs	r2, #0
 8007c48:	9201      	str	r2, [sp, #4]
 8007c4a:	9300      	str	r3, [sp, #0]
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	2200      	movs	r2, #0
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f000 fecd 	bl	80089f0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007c56:	e0e3      	b.n	8007e20 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c58:	7bbb      	ldrb	r3, [r7, #14]
 8007c5a:	2b03      	cmp	r3, #3
 8007c5c:	f040 80e0 	bne.w	8007e20 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	220d      	movs	r2, #13
 8007c64:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	705a      	strb	r2, [r3, #1]
      break;
 8007c6c:	e0d8      	b.n	8007e20 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007c6e:	2109      	movs	r1, #9
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 f99d 	bl	8007fb0 <USBH_Get_CfgDesc>
 8007c76:	4603      	mov	r3, r0
 8007c78:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007c7a:	7bbb      	ldrb	r3, [r7, #14]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d103      	bne.n	8007c88 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2204      	movs	r2, #4
 8007c84:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007c86:	e0cd      	b.n	8007e24 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c88:	7bbb      	ldrb	r3, [r7, #14]
 8007c8a:	2b03      	cmp	r3, #3
 8007c8c:	f040 80ca 	bne.w	8007e24 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007c96:	3301      	adds	r3, #1
 8007c98:	b2da      	uxtb	r2, r3
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007ca6:	2b03      	cmp	r3, #3
 8007ca8:	d903      	bls.n	8007cb2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	220d      	movs	r2, #13
 8007cae:	701a      	strb	r2, [r3, #0]
      break;
 8007cb0:	e0b8      	b.n	8007e24 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	795b      	ldrb	r3, [r3, #5]
 8007cb6:	4619      	mov	r1, r3
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 fee9 	bl	8008a90 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	791b      	ldrb	r3, [r3, #4]
 8007cc2:	4619      	mov	r1, r3
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 fee3 	bl	8008a90 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	701a      	strb	r2, [r3, #0]
      break;
 8007cd6:	e0a5      	b.n	8007e24 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007cde:	4619      	mov	r1, r3
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 f965 	bl	8007fb0 <USBH_Get_CfgDesc>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007cea:	7bbb      	ldrb	r3, [r7, #14]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d103      	bne.n	8007cf8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2205      	movs	r2, #5
 8007cf4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007cf6:	e097      	b.n	8007e28 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007cf8:	7bbb      	ldrb	r3, [r7, #14]
 8007cfa:	2b03      	cmp	r3, #3
 8007cfc:	f040 8094 	bne.w	8007e28 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007d06:	3301      	adds	r3, #1
 8007d08:	b2da      	uxtb	r2, r3
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007d16:	2b03      	cmp	r3, #3
 8007d18:	d903      	bls.n	8007d22 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	220d      	movs	r2, #13
 8007d1e:	701a      	strb	r2, [r3, #0]
      break;
 8007d20:	e082      	b.n	8007e28 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	795b      	ldrb	r3, [r3, #5]
 8007d26:	4619      	mov	r1, r3
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 feb1 	bl	8008a90 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	791b      	ldrb	r3, [r3, #4]
 8007d32:	4619      	mov	r1, r3
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f000 feab 	bl	8008a90 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2200      	movs	r2, #0
 8007d44:	701a      	strb	r2, [r3, #0]
      break;
 8007d46:	e06f      	b.n	8007e28 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d019      	beq.n	8007d86 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007d5e:	23ff      	movs	r3, #255	; 0xff
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 f949 	bl	8007ff8 <USBH_Get_StringDesc>
 8007d66:	4603      	mov	r3, r0
 8007d68:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007d6a:	7bbb      	ldrb	r3, [r7, #14]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d103      	bne.n	8007d78 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2206      	movs	r2, #6
 8007d74:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007d76:	e059      	b.n	8007e2c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d78:	7bbb      	ldrb	r3, [r7, #14]
 8007d7a:	2b03      	cmp	r3, #3
 8007d7c:	d156      	bne.n	8007e2c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2206      	movs	r2, #6
 8007d82:	705a      	strb	r2, [r3, #1]
      break;
 8007d84:	e052      	b.n	8007e2c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2206      	movs	r2, #6
 8007d8a:	705a      	strb	r2, [r3, #1]
      break;
 8007d8c:	e04e      	b.n	8007e2c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d019      	beq.n	8007dcc <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007da4:	23ff      	movs	r3, #255	; 0xff
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 f926 	bl	8007ff8 <USBH_Get_StringDesc>
 8007dac:	4603      	mov	r3, r0
 8007dae:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007db0:	7bbb      	ldrb	r3, [r7, #14]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d103      	bne.n	8007dbe <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2207      	movs	r2, #7
 8007dba:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007dbc:	e038      	b.n	8007e30 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007dbe:	7bbb      	ldrb	r3, [r7, #14]
 8007dc0:	2b03      	cmp	r3, #3
 8007dc2:	d135      	bne.n	8007e30 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2207      	movs	r2, #7
 8007dc8:	705a      	strb	r2, [r3, #1]
      break;
 8007dca:	e031      	b.n	8007e30 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2207      	movs	r2, #7
 8007dd0:	705a      	strb	r2, [r3, #1]
      break;
 8007dd2:	e02d      	b.n	8007e30 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d017      	beq.n	8007e0e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007dea:	23ff      	movs	r3, #255	; 0xff
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 f903 	bl	8007ff8 <USBH_Get_StringDesc>
 8007df2:	4603      	mov	r3, r0
 8007df4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007df6:	7bbb      	ldrb	r3, [r7, #14]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d102      	bne.n	8007e02 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007e00:	e018      	b.n	8007e34 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007e02:	7bbb      	ldrb	r3, [r7, #14]
 8007e04:	2b03      	cmp	r3, #3
 8007e06:	d115      	bne.n	8007e34 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	73fb      	strb	r3, [r7, #15]
      break;
 8007e0c:	e012      	b.n	8007e34 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	73fb      	strb	r3, [r7, #15]
      break;
 8007e12:	e00f      	b.n	8007e34 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007e14:	bf00      	nop
 8007e16:	e00e      	b.n	8007e36 <USBH_HandleEnum+0x3be>
      break;
 8007e18:	bf00      	nop
 8007e1a:	e00c      	b.n	8007e36 <USBH_HandleEnum+0x3be>
      break;
 8007e1c:	bf00      	nop
 8007e1e:	e00a      	b.n	8007e36 <USBH_HandleEnum+0x3be>
      break;
 8007e20:	bf00      	nop
 8007e22:	e008      	b.n	8007e36 <USBH_HandleEnum+0x3be>
      break;
 8007e24:	bf00      	nop
 8007e26:	e006      	b.n	8007e36 <USBH_HandleEnum+0x3be>
      break;
 8007e28:	bf00      	nop
 8007e2a:	e004      	b.n	8007e36 <USBH_HandleEnum+0x3be>
      break;
 8007e2c:	bf00      	nop
 8007e2e:	e002      	b.n	8007e36 <USBH_HandleEnum+0x3be>
      break;
 8007e30:	bf00      	nop
 8007e32:	e000      	b.n	8007e36 <USBH_HandleEnum+0x3be>
      break;
 8007e34:	bf00      	nop
  }
  return Status;
 8007e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3710      	adds	r7, #16
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b083      	sub	sp, #12
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	683a      	ldr	r2, [r7, #0]
 8007e4e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007e52:	bf00      	nop
 8007e54:	370c      	adds	r7, #12
 8007e56:	46bd      	mov	sp, r7
 8007e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5c:	4770      	bx	lr

08007e5e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007e5e:	b580      	push	{r7, lr}
 8007e60:	b082      	sub	sp, #8
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007e6c:	1c5a      	adds	r2, r3, #1
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 f804 	bl	8007e82 <USBH_HandleSof>
}
 8007e7a:	bf00      	nop
 8007e7c:	3708      	adds	r7, #8
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}

08007e82 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007e82:	b580      	push	{r7, lr}
 8007e84:	b082      	sub	sp, #8
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	b2db      	uxtb	r3, r3
 8007e90:	2b0b      	cmp	r3, #11
 8007e92:	d10a      	bne.n	8007eaa <USBH_HandleSof+0x28>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d005      	beq.n	8007eaa <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ea4:	699b      	ldr	r3, [r3, #24]
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	4798      	blx	r3
  }
}
 8007eaa:	bf00      	nop
 8007eac:	3708      	adds	r7, #8
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}

08007eb2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007eb2:	b480      	push	{r7}
 8007eb4:	b083      	sub	sp, #12
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8007ec2:	bf00      	nop
}
 8007ec4:	370c      	adds	r7, #12
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr

08007ece <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007ece:	b480      	push	{r7}
 8007ed0:	b083      	sub	sp, #12
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007ede:	bf00      	nop
}
 8007ee0:	370c      	adds	r7, #12
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr

08007eea <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007eea:	b480      	push	{r7}
 8007eec:	b083      	sub	sp, #12
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2200      	movs	r2, #0
 8007efe:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007f0a:	2300      	movs	r3, #0
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	370c      	adds	r7, #12
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr

08007f18 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b082      	sub	sp, #8
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2201      	movs	r2, #1
 8007f24:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2200      	movs	r2, #0
 8007f34:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f003 fb42 	bl	800b5c2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	791b      	ldrb	r3, [r3, #4]
 8007f42:	4619      	mov	r1, r3
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f000 fda3 	bl	8008a90 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	795b      	ldrb	r3, [r3, #5]
 8007f4e:	4619      	mov	r1, r3
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f000 fd9d 	bl	8008a90 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007f56:	2300      	movs	r3, #0
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3708      	adds	r7, #8
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}

08007f60 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b086      	sub	sp, #24
 8007f64:	af02      	add	r7, sp, #8
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	460b      	mov	r3, r1
 8007f6a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007f72:	78fb      	ldrb	r3, [r7, #3]
 8007f74:	b29b      	uxth	r3, r3
 8007f76:	9300      	str	r3, [sp, #0]
 8007f78:	4613      	mov	r3, r2
 8007f7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f7e:	2100      	movs	r1, #0
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f000 f864 	bl	800804e <USBH_GetDescriptor>
 8007f86:	4603      	mov	r3, r0
 8007f88:	73fb      	strb	r3, [r7, #15]
 8007f8a:	7bfb      	ldrb	r3, [r7, #15]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d10a      	bne.n	8007fa6 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007f9c:	78fa      	ldrb	r2, [r7, #3]
 8007f9e:	b292      	uxth	r2, r2
 8007fa0:	4619      	mov	r1, r3
 8007fa2:	f000 f918 	bl	80081d6 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3710      	adds	r7, #16
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b086      	sub	sp, #24
 8007fb4:	af02      	add	r7, sp, #8
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	460b      	mov	r3, r1
 8007fba:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	331c      	adds	r3, #28
 8007fc0:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007fc2:	887b      	ldrh	r3, [r7, #2]
 8007fc4:	9300      	str	r3, [sp, #0]
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007fcc:	2100      	movs	r1, #0
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 f83d 	bl	800804e <USBH_GetDescriptor>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	72fb      	strb	r3, [r7, #11]
 8007fd8:	7afb      	ldrb	r3, [r7, #11]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d107      	bne.n	8007fee <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007fe4:	887a      	ldrh	r2, [r7, #2]
 8007fe6:	68f9      	ldr	r1, [r7, #12]
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f000 f964 	bl	80082b6 <USBH_ParseCfgDesc>
  }

  return status;
 8007fee:	7afb      	ldrb	r3, [r7, #11]
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3710      	adds	r7, #16
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b088      	sub	sp, #32
 8007ffc:	af02      	add	r7, sp, #8
 8007ffe:	60f8      	str	r0, [r7, #12]
 8008000:	607a      	str	r2, [r7, #4]
 8008002:	461a      	mov	r2, r3
 8008004:	460b      	mov	r3, r1
 8008006:	72fb      	strb	r3, [r7, #11]
 8008008:	4613      	mov	r3, r2
 800800a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800800c:	7afb      	ldrb	r3, [r7, #11]
 800800e:	b29b      	uxth	r3, r3
 8008010:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008014:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800801c:	893b      	ldrh	r3, [r7, #8]
 800801e:	9300      	str	r3, [sp, #0]
 8008020:	460b      	mov	r3, r1
 8008022:	2100      	movs	r1, #0
 8008024:	68f8      	ldr	r0, [r7, #12]
 8008026:	f000 f812 	bl	800804e <USBH_GetDescriptor>
 800802a:	4603      	mov	r3, r0
 800802c:	75fb      	strb	r3, [r7, #23]
 800802e:	7dfb      	ldrb	r3, [r7, #23]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d107      	bne.n	8008044 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800803a:	893a      	ldrh	r2, [r7, #8]
 800803c:	6879      	ldr	r1, [r7, #4]
 800803e:	4618      	mov	r0, r3
 8008040:	f000 fa37 	bl	80084b2 <USBH_ParseStringDesc>
  }

  return status;
 8008044:	7dfb      	ldrb	r3, [r7, #23]
}
 8008046:	4618      	mov	r0, r3
 8008048:	3718      	adds	r7, #24
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}

0800804e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800804e:	b580      	push	{r7, lr}
 8008050:	b084      	sub	sp, #16
 8008052:	af00      	add	r7, sp, #0
 8008054:	60f8      	str	r0, [r7, #12]
 8008056:	607b      	str	r3, [r7, #4]
 8008058:	460b      	mov	r3, r1
 800805a:	72fb      	strb	r3, [r7, #11]
 800805c:	4613      	mov	r3, r2
 800805e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	789b      	ldrb	r3, [r3, #2]
 8008064:	2b01      	cmp	r3, #1
 8008066:	d11c      	bne.n	80080a2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008068:	7afb      	ldrb	r3, [r7, #11]
 800806a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800806e:	b2da      	uxtb	r2, r3
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	2206      	movs	r2, #6
 8008078:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	893a      	ldrh	r2, [r7, #8]
 800807e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008080:	893b      	ldrh	r3, [r7, #8]
 8008082:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008086:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800808a:	d104      	bne.n	8008096 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f240 4209 	movw	r2, #1033	; 0x409
 8008092:	829a      	strh	r2, [r3, #20]
 8008094:	e002      	b.n	800809c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2200      	movs	r2, #0
 800809a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	8b3a      	ldrh	r2, [r7, #24]
 80080a0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80080a2:	8b3b      	ldrh	r3, [r7, #24]
 80080a4:	461a      	mov	r2, r3
 80080a6:	6879      	ldr	r1, [r7, #4]
 80080a8:	68f8      	ldr	r0, [r7, #12]
 80080aa:	f000 fa50 	bl	800854e <USBH_CtlReq>
 80080ae:	4603      	mov	r3, r0
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3710      	adds	r7, #16
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b082      	sub	sp, #8
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	460b      	mov	r3, r1
 80080c2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	789b      	ldrb	r3, [r3, #2]
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	d10f      	bne.n	80080ec <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2205      	movs	r2, #5
 80080d6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80080d8:	78fb      	ldrb	r3, [r7, #3]
 80080da:	b29a      	uxth	r2, r3
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2200      	movs	r2, #0
 80080e4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2200      	movs	r2, #0
 80080ea:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80080ec:	2200      	movs	r2, #0
 80080ee:	2100      	movs	r1, #0
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 fa2c 	bl	800854e <USBH_CtlReq>
 80080f6:	4603      	mov	r3, r0
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3708      	adds	r7, #8
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}

08008100 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b082      	sub	sp, #8
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	460b      	mov	r3, r1
 800810a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	789b      	ldrb	r3, [r3, #2]
 8008110:	2b01      	cmp	r3, #1
 8008112:	d10e      	bne.n	8008132 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2200      	movs	r2, #0
 8008118:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2209      	movs	r2, #9
 800811e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	887a      	ldrh	r2, [r7, #2]
 8008124:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2200      	movs	r2, #0
 800812a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2200      	movs	r2, #0
 8008130:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008132:	2200      	movs	r2, #0
 8008134:	2100      	movs	r1, #0
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f000 fa09 	bl	800854e <USBH_CtlReq>
 800813c:	4603      	mov	r3, r0
}
 800813e:	4618      	mov	r0, r3
 8008140:	3708      	adds	r7, #8
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}

08008146 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008146:	b580      	push	{r7, lr}
 8008148:	b082      	sub	sp, #8
 800814a:	af00      	add	r7, sp, #0
 800814c:	6078      	str	r0, [r7, #4]
 800814e:	460b      	mov	r3, r1
 8008150:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	789b      	ldrb	r3, [r3, #2]
 8008156:	2b01      	cmp	r3, #1
 8008158:	d10f      	bne.n	800817a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2200      	movs	r2, #0
 800815e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2203      	movs	r2, #3
 8008164:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008166:	78fb      	ldrb	r3, [r7, #3]
 8008168:	b29a      	uxth	r2, r3
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2200      	movs	r2, #0
 8008172:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2200      	movs	r2, #0
 8008178:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800817a:	2200      	movs	r2, #0
 800817c:	2100      	movs	r1, #0
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 f9e5 	bl	800854e <USBH_CtlReq>
 8008184:	4603      	mov	r3, r0
}
 8008186:	4618      	mov	r0, r3
 8008188:	3708      	adds	r7, #8
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}

0800818e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800818e:	b580      	push	{r7, lr}
 8008190:	b082      	sub	sp, #8
 8008192:	af00      	add	r7, sp, #0
 8008194:	6078      	str	r0, [r7, #4]
 8008196:	460b      	mov	r3, r1
 8008198:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	789b      	ldrb	r3, [r3, #2]
 800819e:	2b01      	cmp	r3, #1
 80081a0:	d10f      	bne.n	80081c2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2202      	movs	r2, #2
 80081a6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2201      	movs	r2, #1
 80081ac:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2200      	movs	r2, #0
 80081b2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80081b4:	78fb      	ldrb	r3, [r7, #3]
 80081b6:	b29a      	uxth	r2, r3
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80081c2:	2200      	movs	r2, #0
 80081c4:	2100      	movs	r1, #0
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 f9c1 	bl	800854e <USBH_CtlReq>
 80081cc:	4603      	mov	r3, r0
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3708      	adds	r7, #8
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}

080081d6 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80081d6:	b480      	push	{r7}
 80081d8:	b085      	sub	sp, #20
 80081da:	af00      	add	r7, sp, #0
 80081dc:	60f8      	str	r0, [r7, #12]
 80081de:	60b9      	str	r1, [r7, #8]
 80081e0:	4613      	mov	r3, r2
 80081e2:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	781a      	ldrb	r2, [r3, #0]
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	785a      	ldrb	r2, [r3, #1]
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	3302      	adds	r3, #2
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	b29a      	uxth	r2, r3
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	3303      	adds	r3, #3
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	b29b      	uxth	r3, r3
 8008204:	021b      	lsls	r3, r3, #8
 8008206:	b29b      	uxth	r3, r3
 8008208:	4313      	orrs	r3, r2
 800820a:	b29a      	uxth	r2, r3
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	791a      	ldrb	r2, [r3, #4]
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	795a      	ldrb	r2, [r3, #5]
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	799a      	ldrb	r2, [r3, #6]
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	79da      	ldrb	r2, [r3, #7]
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8008230:	88fb      	ldrh	r3, [r7, #6]
 8008232:	2b08      	cmp	r3, #8
 8008234:	d939      	bls.n	80082aa <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	3308      	adds	r3, #8
 800823a:	781b      	ldrb	r3, [r3, #0]
 800823c:	b29a      	uxth	r2, r3
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	3309      	adds	r3, #9
 8008242:	781b      	ldrb	r3, [r3, #0]
 8008244:	b29b      	uxth	r3, r3
 8008246:	021b      	lsls	r3, r3, #8
 8008248:	b29b      	uxth	r3, r3
 800824a:	4313      	orrs	r3, r2
 800824c:	b29a      	uxth	r2, r3
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	330a      	adds	r3, #10
 8008256:	781b      	ldrb	r3, [r3, #0]
 8008258:	b29a      	uxth	r2, r3
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	330b      	adds	r3, #11
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	b29b      	uxth	r3, r3
 8008262:	021b      	lsls	r3, r3, #8
 8008264:	b29b      	uxth	r3, r3
 8008266:	4313      	orrs	r3, r2
 8008268:	b29a      	uxth	r2, r3
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	330c      	adds	r3, #12
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	b29a      	uxth	r2, r3
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	330d      	adds	r3, #13
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	b29b      	uxth	r3, r3
 800827e:	021b      	lsls	r3, r3, #8
 8008280:	b29b      	uxth	r3, r3
 8008282:	4313      	orrs	r3, r2
 8008284:	b29a      	uxth	r2, r3
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	7b9a      	ldrb	r2, [r3, #14]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	7bda      	ldrb	r2, [r3, #15]
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	7c1a      	ldrb	r2, [r3, #16]
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	7c5a      	ldrb	r2, [r3, #17]
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	745a      	strb	r2, [r3, #17]
  }
}
 80082aa:	bf00      	nop
 80082ac:	3714      	adds	r7, #20
 80082ae:	46bd      	mov	sp, r7
 80082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b4:	4770      	bx	lr

080082b6 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80082b6:	b580      	push	{r7, lr}
 80082b8:	b08a      	sub	sp, #40	; 0x28
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	60f8      	str	r0, [r7, #12]
 80082be:	60b9      	str	r1, [r7, #8]
 80082c0:	4613      	mov	r3, r2
 80082c2:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80082c8:	2300      	movs	r3, #0
 80082ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80082ce:	2300      	movs	r3, #0
 80082d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	781a      	ldrb	r2, [r3, #0]
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	785a      	ldrb	r2, [r3, #1]
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	3302      	adds	r3, #2
 80082ec:	781b      	ldrb	r3, [r3, #0]
 80082ee:	b29a      	uxth	r2, r3
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	3303      	adds	r3, #3
 80082f4:	781b      	ldrb	r3, [r3, #0]
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	021b      	lsls	r3, r3, #8
 80082fa:	b29b      	uxth	r3, r3
 80082fc:	4313      	orrs	r3, r2
 80082fe:	b29a      	uxth	r2, r3
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	791a      	ldrb	r2, [r3, #4]
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	795a      	ldrb	r2, [r3, #5]
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	799a      	ldrb	r2, [r3, #6]
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	79da      	ldrb	r2, [r3, #7]
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	7a1a      	ldrb	r2, [r3, #8]
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800832c:	88fb      	ldrh	r3, [r7, #6]
 800832e:	2b09      	cmp	r3, #9
 8008330:	d95f      	bls.n	80083f2 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8008332:	2309      	movs	r3, #9
 8008334:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8008336:	2300      	movs	r3, #0
 8008338:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800833a:	e051      	b.n	80083e0 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800833c:	f107 0316 	add.w	r3, r7, #22
 8008340:	4619      	mov	r1, r3
 8008342:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008344:	f000 f8e8 	bl	8008518 <USBH_GetNextDesc>
 8008348:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800834a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800834c:	785b      	ldrb	r3, [r3, #1]
 800834e:	2b04      	cmp	r3, #4
 8008350:	d146      	bne.n	80083e0 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8008352:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008356:	221a      	movs	r2, #26
 8008358:	fb02 f303 	mul.w	r3, r2, r3
 800835c:	3308      	adds	r3, #8
 800835e:	68fa      	ldr	r2, [r7, #12]
 8008360:	4413      	add	r3, r2
 8008362:	3302      	adds	r3, #2
 8008364:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008366:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008368:	69f8      	ldr	r0, [r7, #28]
 800836a:	f000 f846 	bl	80083fa <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800836e:	2300      	movs	r3, #0
 8008370:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8008374:	2300      	movs	r3, #0
 8008376:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008378:	e022      	b.n	80083c0 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800837a:	f107 0316 	add.w	r3, r7, #22
 800837e:	4619      	mov	r1, r3
 8008380:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008382:	f000 f8c9 	bl	8008518 <USBH_GetNextDesc>
 8008386:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8008388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800838a:	785b      	ldrb	r3, [r3, #1]
 800838c:	2b05      	cmp	r3, #5
 800838e:	d117      	bne.n	80083c0 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008390:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008394:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008398:	3201      	adds	r2, #1
 800839a:	00d2      	lsls	r2, r2, #3
 800839c:	211a      	movs	r1, #26
 800839e:	fb01 f303 	mul.w	r3, r1, r3
 80083a2:	4413      	add	r3, r2
 80083a4:	3308      	adds	r3, #8
 80083a6:	68fa      	ldr	r2, [r7, #12]
 80083a8:	4413      	add	r3, r2
 80083aa:	3304      	adds	r3, #4
 80083ac:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 80083ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80083b0:	69b8      	ldr	r0, [r7, #24]
 80083b2:	f000 f851 	bl	8008458 <USBH_ParseEPDesc>
            ep_ix++;
 80083b6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80083ba:	3301      	adds	r3, #1
 80083bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80083c0:	69fb      	ldr	r3, [r7, #28]
 80083c2:	791b      	ldrb	r3, [r3, #4]
 80083c4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d204      	bcs.n	80083d6 <USBH_ParseCfgDesc+0x120>
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	885a      	ldrh	r2, [r3, #2]
 80083d0:	8afb      	ldrh	r3, [r7, #22]
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d8d1      	bhi.n	800837a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80083d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80083da:	3301      	adds	r3, #1
 80083dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80083e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d804      	bhi.n	80083f2 <USBH_ParseCfgDesc+0x13c>
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	885a      	ldrh	r2, [r3, #2]
 80083ec:	8afb      	ldrh	r3, [r7, #22]
 80083ee:	429a      	cmp	r2, r3
 80083f0:	d8a4      	bhi.n	800833c <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80083f2:	bf00      	nop
 80083f4:	3728      	adds	r7, #40	; 0x28
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}

080083fa <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80083fa:	b480      	push	{r7}
 80083fc:	b083      	sub	sp, #12
 80083fe:	af00      	add	r7, sp, #0
 8008400:	6078      	str	r0, [r7, #4]
 8008402:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	781a      	ldrb	r2, [r3, #0]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	785a      	ldrb	r2, [r3, #1]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	789a      	ldrb	r2, [r3, #2]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	78da      	ldrb	r2, [r3, #3]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	791a      	ldrb	r2, [r3, #4]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	795a      	ldrb	r2, [r3, #5]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	799a      	ldrb	r2, [r3, #6]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	79da      	ldrb	r2, [r3, #7]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	7a1a      	ldrb	r2, [r3, #8]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	721a      	strb	r2, [r3, #8]
}
 800844c:	bf00      	nop
 800844e:	370c      	adds	r7, #12
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr

08008458 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8008458:	b480      	push	{r7}
 800845a:	b083      	sub	sp, #12
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	781a      	ldrb	r2, [r3, #0]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	785a      	ldrb	r2, [r3, #1]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	789a      	ldrb	r2, [r3, #2]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	78da      	ldrb	r2, [r3, #3]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	3304      	adds	r3, #4
 8008486:	781b      	ldrb	r3, [r3, #0]
 8008488:	b29a      	uxth	r2, r3
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	3305      	adds	r3, #5
 800848e:	781b      	ldrb	r3, [r3, #0]
 8008490:	b29b      	uxth	r3, r3
 8008492:	021b      	lsls	r3, r3, #8
 8008494:	b29b      	uxth	r3, r3
 8008496:	4313      	orrs	r3, r2
 8008498:	b29a      	uxth	r2, r3
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	799a      	ldrb	r2, [r3, #6]
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	719a      	strb	r2, [r3, #6]
}
 80084a6:	bf00      	nop
 80084a8:	370c      	adds	r7, #12
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr

080084b2 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80084b2:	b480      	push	{r7}
 80084b4:	b087      	sub	sp, #28
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	60f8      	str	r0, [r7, #12]
 80084ba:	60b9      	str	r1, [r7, #8]
 80084bc:	4613      	mov	r3, r2
 80084be:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	3301      	adds	r3, #1
 80084c4:	781b      	ldrb	r3, [r3, #0]
 80084c6:	2b03      	cmp	r3, #3
 80084c8:	d120      	bne.n	800850c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	781b      	ldrb	r3, [r3, #0]
 80084ce:	1e9a      	subs	r2, r3, #2
 80084d0:	88fb      	ldrh	r3, [r7, #6]
 80084d2:	4293      	cmp	r3, r2
 80084d4:	bf28      	it	cs
 80084d6:	4613      	movcs	r3, r2
 80084d8:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	3302      	adds	r3, #2
 80084de:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80084e0:	2300      	movs	r3, #0
 80084e2:	82fb      	strh	r3, [r7, #22]
 80084e4:	e00b      	b.n	80084fe <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80084e6:	8afb      	ldrh	r3, [r7, #22]
 80084e8:	68fa      	ldr	r2, [r7, #12]
 80084ea:	4413      	add	r3, r2
 80084ec:	781a      	ldrb	r2, [r3, #0]
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	701a      	strb	r2, [r3, #0]
      pdest++;
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	3301      	adds	r3, #1
 80084f6:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80084f8:	8afb      	ldrh	r3, [r7, #22]
 80084fa:	3302      	adds	r3, #2
 80084fc:	82fb      	strh	r3, [r7, #22]
 80084fe:	8afa      	ldrh	r2, [r7, #22]
 8008500:	8abb      	ldrh	r3, [r7, #20]
 8008502:	429a      	cmp	r2, r3
 8008504:	d3ef      	bcc.n	80084e6 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	2200      	movs	r2, #0
 800850a:	701a      	strb	r2, [r3, #0]
  }
}
 800850c:	bf00      	nop
 800850e:	371c      	adds	r7, #28
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr

08008518 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008518:	b480      	push	{r7}
 800851a:	b085      	sub	sp, #20
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	881a      	ldrh	r2, [r3, #0]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	781b      	ldrb	r3, [r3, #0]
 800852a:	b29b      	uxth	r3, r3
 800852c:	4413      	add	r3, r2
 800852e:	b29a      	uxth	r2, r3
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	781b      	ldrb	r3, [r3, #0]
 8008538:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	4413      	add	r3, r2
 800853e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008540:	68fb      	ldr	r3, [r7, #12]
}
 8008542:	4618      	mov	r0, r3
 8008544:	3714      	adds	r7, #20
 8008546:	46bd      	mov	sp, r7
 8008548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854c:	4770      	bx	lr

0800854e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800854e:	b580      	push	{r7, lr}
 8008550:	b086      	sub	sp, #24
 8008552:	af00      	add	r7, sp, #0
 8008554:	60f8      	str	r0, [r7, #12]
 8008556:	60b9      	str	r1, [r7, #8]
 8008558:	4613      	mov	r3, r2
 800855a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800855c:	2301      	movs	r3, #1
 800855e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	789b      	ldrb	r3, [r3, #2]
 8008564:	2b01      	cmp	r3, #1
 8008566:	d002      	beq.n	800856e <USBH_CtlReq+0x20>
 8008568:	2b02      	cmp	r3, #2
 800856a:	d00f      	beq.n	800858c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800856c:	e027      	b.n	80085be <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	68ba      	ldr	r2, [r7, #8]
 8008572:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	88fa      	ldrh	r2, [r7, #6]
 8008578:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	2201      	movs	r2, #1
 800857e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2202      	movs	r2, #2
 8008584:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008586:	2301      	movs	r3, #1
 8008588:	75fb      	strb	r3, [r7, #23]
      break;
 800858a:	e018      	b.n	80085be <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800858c:	68f8      	ldr	r0, [r7, #12]
 800858e:	f000 f81b 	bl	80085c8 <USBH_HandleControl>
 8008592:	4603      	mov	r3, r0
 8008594:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008596:	7dfb      	ldrb	r3, [r7, #23]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d002      	beq.n	80085a2 <USBH_CtlReq+0x54>
 800859c:	7dfb      	ldrb	r3, [r7, #23]
 800859e:	2b03      	cmp	r3, #3
 80085a0:	d106      	bne.n	80085b0 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2201      	movs	r2, #1
 80085a6:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2200      	movs	r2, #0
 80085ac:	761a      	strb	r2, [r3, #24]
      break;
 80085ae:	e005      	b.n	80085bc <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80085b0:	7dfb      	ldrb	r3, [r7, #23]
 80085b2:	2b02      	cmp	r3, #2
 80085b4:	d102      	bne.n	80085bc <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2201      	movs	r2, #1
 80085ba:	709a      	strb	r2, [r3, #2]
      break;
 80085bc:	bf00      	nop
  }
  return status;
 80085be:	7dfb      	ldrb	r3, [r7, #23]
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3718      	adds	r7, #24
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}

080085c8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b086      	sub	sp, #24
 80085cc:	af02      	add	r7, sp, #8
 80085ce:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80085d0:	2301      	movs	r3, #1
 80085d2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80085d4:	2300      	movs	r3, #0
 80085d6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	7e1b      	ldrb	r3, [r3, #24]
 80085dc:	3b01      	subs	r3, #1
 80085de:	2b0a      	cmp	r3, #10
 80085e0:	f200 8156 	bhi.w	8008890 <USBH_HandleControl+0x2c8>
 80085e4:	a201      	add	r2, pc, #4	; (adr r2, 80085ec <USBH_HandleControl+0x24>)
 80085e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085ea:	bf00      	nop
 80085ec:	08008619 	.word	0x08008619
 80085f0:	08008633 	.word	0x08008633
 80085f4:	0800869d 	.word	0x0800869d
 80085f8:	080086c3 	.word	0x080086c3
 80085fc:	080086fb 	.word	0x080086fb
 8008600:	08008725 	.word	0x08008725
 8008604:	08008777 	.word	0x08008777
 8008608:	08008799 	.word	0x08008799
 800860c:	080087d5 	.word	0x080087d5
 8008610:	080087fb 	.word	0x080087fb
 8008614:	08008839 	.word	0x08008839
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f103 0110 	add.w	r1, r3, #16
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	795b      	ldrb	r3, [r3, #5]
 8008622:	461a      	mov	r2, r3
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f000 f943 	bl	80088b0 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2202      	movs	r2, #2
 800862e:	761a      	strb	r2, [r3, #24]
      break;
 8008630:	e139      	b.n	80088a6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	795b      	ldrb	r3, [r3, #5]
 8008636:	4619      	mov	r1, r3
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f003 f8b1 	bl	800b7a0 <USBH_LL_GetURBState>
 800863e:	4603      	mov	r3, r0
 8008640:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008642:	7bbb      	ldrb	r3, [r7, #14]
 8008644:	2b01      	cmp	r3, #1
 8008646:	d11e      	bne.n	8008686 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	7c1b      	ldrb	r3, [r3, #16]
 800864c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008650:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	8adb      	ldrh	r3, [r3, #22]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d00a      	beq.n	8008670 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800865a:	7b7b      	ldrb	r3, [r7, #13]
 800865c:	2b80      	cmp	r3, #128	; 0x80
 800865e:	d103      	bne.n	8008668 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2203      	movs	r2, #3
 8008664:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008666:	e115      	b.n	8008894 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2205      	movs	r2, #5
 800866c:	761a      	strb	r2, [r3, #24]
      break;
 800866e:	e111      	b.n	8008894 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008670:	7b7b      	ldrb	r3, [r7, #13]
 8008672:	2b80      	cmp	r3, #128	; 0x80
 8008674:	d103      	bne.n	800867e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2209      	movs	r2, #9
 800867a:	761a      	strb	r2, [r3, #24]
      break;
 800867c:	e10a      	b.n	8008894 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2207      	movs	r2, #7
 8008682:	761a      	strb	r2, [r3, #24]
      break;
 8008684:	e106      	b.n	8008894 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008686:	7bbb      	ldrb	r3, [r7, #14]
 8008688:	2b04      	cmp	r3, #4
 800868a:	d003      	beq.n	8008694 <USBH_HandleControl+0xcc>
 800868c:	7bbb      	ldrb	r3, [r7, #14]
 800868e:	2b02      	cmp	r3, #2
 8008690:	f040 8100 	bne.w	8008894 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	220b      	movs	r2, #11
 8008698:	761a      	strb	r2, [r3, #24]
      break;
 800869a:	e0fb      	b.n	8008894 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80086a2:	b29a      	uxth	r2, r3
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6899      	ldr	r1, [r3, #8]
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	899a      	ldrh	r2, [r3, #12]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	791b      	ldrb	r3, [r3, #4]
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 f93a 	bl	800892e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2204      	movs	r2, #4
 80086be:	761a      	strb	r2, [r3, #24]
      break;
 80086c0:	e0f1      	b.n	80088a6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	791b      	ldrb	r3, [r3, #4]
 80086c6:	4619      	mov	r1, r3
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f003 f869 	bl	800b7a0 <USBH_LL_GetURBState>
 80086ce:	4603      	mov	r3, r0
 80086d0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80086d2:	7bbb      	ldrb	r3, [r7, #14]
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d102      	bne.n	80086de <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2209      	movs	r2, #9
 80086dc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80086de:	7bbb      	ldrb	r3, [r7, #14]
 80086e0:	2b05      	cmp	r3, #5
 80086e2:	d102      	bne.n	80086ea <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80086e4:	2303      	movs	r3, #3
 80086e6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80086e8:	e0d6      	b.n	8008898 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80086ea:	7bbb      	ldrb	r3, [r7, #14]
 80086ec:	2b04      	cmp	r3, #4
 80086ee:	f040 80d3 	bne.w	8008898 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	220b      	movs	r2, #11
 80086f6:	761a      	strb	r2, [r3, #24]
      break;
 80086f8:	e0ce      	b.n	8008898 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6899      	ldr	r1, [r3, #8]
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	899a      	ldrh	r2, [r3, #12]
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	795b      	ldrb	r3, [r3, #5]
 8008706:	2001      	movs	r0, #1
 8008708:	9000      	str	r0, [sp, #0]
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 f8ea 	bl	80088e4 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008716:	b29a      	uxth	r2, r3
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2206      	movs	r2, #6
 8008720:	761a      	strb	r2, [r3, #24]
      break;
 8008722:	e0c0      	b.n	80088a6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	795b      	ldrb	r3, [r3, #5]
 8008728:	4619      	mov	r1, r3
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f003 f838 	bl	800b7a0 <USBH_LL_GetURBState>
 8008730:	4603      	mov	r3, r0
 8008732:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008734:	7bbb      	ldrb	r3, [r7, #14]
 8008736:	2b01      	cmp	r3, #1
 8008738:	d103      	bne.n	8008742 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2207      	movs	r2, #7
 800873e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008740:	e0ac      	b.n	800889c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008742:	7bbb      	ldrb	r3, [r7, #14]
 8008744:	2b05      	cmp	r3, #5
 8008746:	d105      	bne.n	8008754 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	220c      	movs	r2, #12
 800874c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800874e:	2303      	movs	r3, #3
 8008750:	73fb      	strb	r3, [r7, #15]
      break;
 8008752:	e0a3      	b.n	800889c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008754:	7bbb      	ldrb	r3, [r7, #14]
 8008756:	2b02      	cmp	r3, #2
 8008758:	d103      	bne.n	8008762 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2205      	movs	r2, #5
 800875e:	761a      	strb	r2, [r3, #24]
      break;
 8008760:	e09c      	b.n	800889c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008762:	7bbb      	ldrb	r3, [r7, #14]
 8008764:	2b04      	cmp	r3, #4
 8008766:	f040 8099 	bne.w	800889c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	220b      	movs	r2, #11
 800876e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008770:	2302      	movs	r3, #2
 8008772:	73fb      	strb	r3, [r7, #15]
      break;
 8008774:	e092      	b.n	800889c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	791b      	ldrb	r3, [r3, #4]
 800877a:	2200      	movs	r2, #0
 800877c:	2100      	movs	r1, #0
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f000 f8d5 	bl	800892e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800878a:	b29a      	uxth	r2, r3
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2208      	movs	r2, #8
 8008794:	761a      	strb	r2, [r3, #24]

      break;
 8008796:	e086      	b.n	80088a6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	791b      	ldrb	r3, [r3, #4]
 800879c:	4619      	mov	r1, r3
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f002 fffe 	bl	800b7a0 <USBH_LL_GetURBState>
 80087a4:	4603      	mov	r3, r0
 80087a6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80087a8:	7bbb      	ldrb	r3, [r7, #14]
 80087aa:	2b01      	cmp	r3, #1
 80087ac:	d105      	bne.n	80087ba <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	220d      	movs	r2, #13
 80087b2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80087b4:	2300      	movs	r3, #0
 80087b6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80087b8:	e072      	b.n	80088a0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80087ba:	7bbb      	ldrb	r3, [r7, #14]
 80087bc:	2b04      	cmp	r3, #4
 80087be:	d103      	bne.n	80087c8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	220b      	movs	r2, #11
 80087c4:	761a      	strb	r2, [r3, #24]
      break;
 80087c6:	e06b      	b.n	80088a0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80087c8:	7bbb      	ldrb	r3, [r7, #14]
 80087ca:	2b05      	cmp	r3, #5
 80087cc:	d168      	bne.n	80088a0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80087ce:	2303      	movs	r3, #3
 80087d0:	73fb      	strb	r3, [r7, #15]
      break;
 80087d2:	e065      	b.n	80088a0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	795b      	ldrb	r3, [r3, #5]
 80087d8:	2201      	movs	r2, #1
 80087da:	9200      	str	r2, [sp, #0]
 80087dc:	2200      	movs	r2, #0
 80087de:	2100      	movs	r1, #0
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f000 f87f 	bl	80088e4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80087ec:	b29a      	uxth	r2, r3
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	220a      	movs	r2, #10
 80087f6:	761a      	strb	r2, [r3, #24]
      break;
 80087f8:	e055      	b.n	80088a6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	795b      	ldrb	r3, [r3, #5]
 80087fe:	4619      	mov	r1, r3
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f002 ffcd 	bl	800b7a0 <USBH_LL_GetURBState>
 8008806:	4603      	mov	r3, r0
 8008808:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800880a:	7bbb      	ldrb	r3, [r7, #14]
 800880c:	2b01      	cmp	r3, #1
 800880e:	d105      	bne.n	800881c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008810:	2300      	movs	r3, #0
 8008812:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	220d      	movs	r2, #13
 8008818:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800881a:	e043      	b.n	80088a4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800881c:	7bbb      	ldrb	r3, [r7, #14]
 800881e:	2b02      	cmp	r3, #2
 8008820:	d103      	bne.n	800882a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2209      	movs	r2, #9
 8008826:	761a      	strb	r2, [r3, #24]
      break;
 8008828:	e03c      	b.n	80088a4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800882a:	7bbb      	ldrb	r3, [r7, #14]
 800882c:	2b04      	cmp	r3, #4
 800882e:	d139      	bne.n	80088a4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	220b      	movs	r2, #11
 8008834:	761a      	strb	r2, [r3, #24]
      break;
 8008836:	e035      	b.n	80088a4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	7e5b      	ldrb	r3, [r3, #25]
 800883c:	3301      	adds	r3, #1
 800883e:	b2da      	uxtb	r2, r3
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	765a      	strb	r2, [r3, #25]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	7e5b      	ldrb	r3, [r3, #25]
 8008848:	2b02      	cmp	r3, #2
 800884a:	d806      	bhi.n	800885a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2201      	movs	r2, #1
 8008850:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2201      	movs	r2, #1
 8008856:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008858:	e025      	b.n	80088a6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008860:	2106      	movs	r1, #6
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2200      	movs	r2, #0
 800886a:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	795b      	ldrb	r3, [r3, #5]
 8008870:	4619      	mov	r1, r3
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f000 f90c 	bl	8008a90 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	791b      	ldrb	r3, [r3, #4]
 800887c:	4619      	mov	r1, r3
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f000 f906 	bl	8008a90 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2200      	movs	r2, #0
 8008888:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800888a:	2302      	movs	r3, #2
 800888c:	73fb      	strb	r3, [r7, #15]
      break;
 800888e:	e00a      	b.n	80088a6 <USBH_HandleControl+0x2de>

    default:
      break;
 8008890:	bf00      	nop
 8008892:	e008      	b.n	80088a6 <USBH_HandleControl+0x2de>
      break;
 8008894:	bf00      	nop
 8008896:	e006      	b.n	80088a6 <USBH_HandleControl+0x2de>
      break;
 8008898:	bf00      	nop
 800889a:	e004      	b.n	80088a6 <USBH_HandleControl+0x2de>
      break;
 800889c:	bf00      	nop
 800889e:	e002      	b.n	80088a6 <USBH_HandleControl+0x2de>
      break;
 80088a0:	bf00      	nop
 80088a2:	e000      	b.n	80088a6 <USBH_HandleControl+0x2de>
      break;
 80088a4:	bf00      	nop
  }

  return status;
 80088a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3710      	adds	r7, #16
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}

080088b0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b088      	sub	sp, #32
 80088b4:	af04      	add	r7, sp, #16
 80088b6:	60f8      	str	r0, [r7, #12]
 80088b8:	60b9      	str	r1, [r7, #8]
 80088ba:	4613      	mov	r3, r2
 80088bc:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80088be:	79f9      	ldrb	r1, [r7, #7]
 80088c0:	2300      	movs	r3, #0
 80088c2:	9303      	str	r3, [sp, #12]
 80088c4:	2308      	movs	r3, #8
 80088c6:	9302      	str	r3, [sp, #8]
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	9301      	str	r3, [sp, #4]
 80088cc:	2300      	movs	r3, #0
 80088ce:	9300      	str	r3, [sp, #0]
 80088d0:	2300      	movs	r3, #0
 80088d2:	2200      	movs	r2, #0
 80088d4:	68f8      	ldr	r0, [r7, #12]
 80088d6:	f002 ff32 	bl	800b73e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80088da:	2300      	movs	r3, #0
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3710      	adds	r7, #16
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b088      	sub	sp, #32
 80088e8:	af04      	add	r7, sp, #16
 80088ea:	60f8      	str	r0, [r7, #12]
 80088ec:	60b9      	str	r1, [r7, #8]
 80088ee:	4611      	mov	r1, r2
 80088f0:	461a      	mov	r2, r3
 80088f2:	460b      	mov	r3, r1
 80088f4:	80fb      	strh	r3, [r7, #6]
 80088f6:	4613      	mov	r3, r2
 80088f8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008900:	2b00      	cmp	r3, #0
 8008902:	d001      	beq.n	8008908 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008904:	2300      	movs	r3, #0
 8008906:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008908:	7979      	ldrb	r1, [r7, #5]
 800890a:	7e3b      	ldrb	r3, [r7, #24]
 800890c:	9303      	str	r3, [sp, #12]
 800890e:	88fb      	ldrh	r3, [r7, #6]
 8008910:	9302      	str	r3, [sp, #8]
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	9301      	str	r3, [sp, #4]
 8008916:	2301      	movs	r3, #1
 8008918:	9300      	str	r3, [sp, #0]
 800891a:	2300      	movs	r3, #0
 800891c:	2200      	movs	r2, #0
 800891e:	68f8      	ldr	r0, [r7, #12]
 8008920:	f002 ff0d 	bl	800b73e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008924:	2300      	movs	r3, #0
}
 8008926:	4618      	mov	r0, r3
 8008928:	3710      	adds	r7, #16
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}

0800892e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800892e:	b580      	push	{r7, lr}
 8008930:	b088      	sub	sp, #32
 8008932:	af04      	add	r7, sp, #16
 8008934:	60f8      	str	r0, [r7, #12]
 8008936:	60b9      	str	r1, [r7, #8]
 8008938:	4611      	mov	r1, r2
 800893a:	461a      	mov	r2, r3
 800893c:	460b      	mov	r3, r1
 800893e:	80fb      	strh	r3, [r7, #6]
 8008940:	4613      	mov	r3, r2
 8008942:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008944:	7979      	ldrb	r1, [r7, #5]
 8008946:	2300      	movs	r3, #0
 8008948:	9303      	str	r3, [sp, #12]
 800894a:	88fb      	ldrh	r3, [r7, #6]
 800894c:	9302      	str	r3, [sp, #8]
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	9301      	str	r3, [sp, #4]
 8008952:	2301      	movs	r3, #1
 8008954:	9300      	str	r3, [sp, #0]
 8008956:	2300      	movs	r3, #0
 8008958:	2201      	movs	r2, #1
 800895a:	68f8      	ldr	r0, [r7, #12]
 800895c:	f002 feef 	bl	800b73e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008960:	2300      	movs	r3, #0

}
 8008962:	4618      	mov	r0, r3
 8008964:	3710      	adds	r7, #16
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}

0800896a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800896a:	b580      	push	{r7, lr}
 800896c:	b088      	sub	sp, #32
 800896e:	af04      	add	r7, sp, #16
 8008970:	60f8      	str	r0, [r7, #12]
 8008972:	60b9      	str	r1, [r7, #8]
 8008974:	4611      	mov	r1, r2
 8008976:	461a      	mov	r2, r3
 8008978:	460b      	mov	r3, r1
 800897a:	80fb      	strh	r3, [r7, #6]
 800897c:	4613      	mov	r3, r2
 800897e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008986:	2b00      	cmp	r3, #0
 8008988:	d001      	beq.n	800898e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800898a:	2300      	movs	r3, #0
 800898c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800898e:	7979      	ldrb	r1, [r7, #5]
 8008990:	7e3b      	ldrb	r3, [r7, #24]
 8008992:	9303      	str	r3, [sp, #12]
 8008994:	88fb      	ldrh	r3, [r7, #6]
 8008996:	9302      	str	r3, [sp, #8]
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	9301      	str	r3, [sp, #4]
 800899c:	2301      	movs	r3, #1
 800899e:	9300      	str	r3, [sp, #0]
 80089a0:	2302      	movs	r3, #2
 80089a2:	2200      	movs	r2, #0
 80089a4:	68f8      	ldr	r0, [r7, #12]
 80089a6:	f002 feca 	bl	800b73e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80089aa:	2300      	movs	r3, #0
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3710      	adds	r7, #16
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b088      	sub	sp, #32
 80089b8:	af04      	add	r7, sp, #16
 80089ba:	60f8      	str	r0, [r7, #12]
 80089bc:	60b9      	str	r1, [r7, #8]
 80089be:	4611      	mov	r1, r2
 80089c0:	461a      	mov	r2, r3
 80089c2:	460b      	mov	r3, r1
 80089c4:	80fb      	strh	r3, [r7, #6]
 80089c6:	4613      	mov	r3, r2
 80089c8:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80089ca:	7979      	ldrb	r1, [r7, #5]
 80089cc:	2300      	movs	r3, #0
 80089ce:	9303      	str	r3, [sp, #12]
 80089d0:	88fb      	ldrh	r3, [r7, #6]
 80089d2:	9302      	str	r3, [sp, #8]
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	9301      	str	r3, [sp, #4]
 80089d8:	2301      	movs	r3, #1
 80089da:	9300      	str	r3, [sp, #0]
 80089dc:	2302      	movs	r3, #2
 80089de:	2201      	movs	r2, #1
 80089e0:	68f8      	ldr	r0, [r7, #12]
 80089e2:	f002 feac 	bl	800b73e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80089e6:	2300      	movs	r3, #0
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	3710      	adds	r7, #16
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}

080089f0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b086      	sub	sp, #24
 80089f4:	af04      	add	r7, sp, #16
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	4608      	mov	r0, r1
 80089fa:	4611      	mov	r1, r2
 80089fc:	461a      	mov	r2, r3
 80089fe:	4603      	mov	r3, r0
 8008a00:	70fb      	strb	r3, [r7, #3]
 8008a02:	460b      	mov	r3, r1
 8008a04:	70bb      	strb	r3, [r7, #2]
 8008a06:	4613      	mov	r3, r2
 8008a08:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008a0a:	7878      	ldrb	r0, [r7, #1]
 8008a0c:	78ba      	ldrb	r2, [r7, #2]
 8008a0e:	78f9      	ldrb	r1, [r7, #3]
 8008a10:	8b3b      	ldrh	r3, [r7, #24]
 8008a12:	9302      	str	r3, [sp, #8]
 8008a14:	7d3b      	ldrb	r3, [r7, #20]
 8008a16:	9301      	str	r3, [sp, #4]
 8008a18:	7c3b      	ldrb	r3, [r7, #16]
 8008a1a:	9300      	str	r3, [sp, #0]
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f002 fe3f 	bl	800b6a2 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008a24:	2300      	movs	r3, #0
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3708      	adds	r7, #8
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}

08008a2e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008a2e:	b580      	push	{r7, lr}
 8008a30:	b082      	sub	sp, #8
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	6078      	str	r0, [r7, #4]
 8008a36:	460b      	mov	r3, r1
 8008a38:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8008a3a:	78fb      	ldrb	r3, [r7, #3]
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f002 fe5e 	bl	800b700 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008a44:	2300      	movs	r3, #0
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3708      	adds	r7, #8
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}

08008a4e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008a4e:	b580      	push	{r7, lr}
 8008a50:	b084      	sub	sp, #16
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6078      	str	r0, [r7, #4]
 8008a56:	460b      	mov	r3, r1
 8008a58:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f000 f836 	bl	8008acc <USBH_GetFreePipe>
 8008a60:	4603      	mov	r3, r0
 8008a62:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008a64:	89fb      	ldrh	r3, [r7, #14]
 8008a66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d00a      	beq.n	8008a84 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8008a6e:	78fa      	ldrb	r2, [r7, #3]
 8008a70:	89fb      	ldrh	r3, [r7, #14]
 8008a72:	f003 030f 	and.w	r3, r3, #15
 8008a76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008a7a:	6879      	ldr	r1, [r7, #4]
 8008a7c:	33e0      	adds	r3, #224	; 0xe0
 8008a7e:	009b      	lsls	r3, r3, #2
 8008a80:	440b      	add	r3, r1
 8008a82:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008a84:	89fb      	ldrh	r3, [r7, #14]
 8008a86:	b2db      	uxtb	r3, r3
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3710      	adds	r7, #16
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b083      	sub	sp, #12
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	460b      	mov	r3, r1
 8008a9a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008a9c:	78fb      	ldrb	r3, [r7, #3]
 8008a9e:	2b0a      	cmp	r3, #10
 8008aa0:	d80d      	bhi.n	8008abe <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008aa2:	78fb      	ldrb	r3, [r7, #3]
 8008aa4:	687a      	ldr	r2, [r7, #4]
 8008aa6:	33e0      	adds	r3, #224	; 0xe0
 8008aa8:	009b      	lsls	r3, r3, #2
 8008aaa:	4413      	add	r3, r2
 8008aac:	685a      	ldr	r2, [r3, #4]
 8008aae:	78fb      	ldrb	r3, [r7, #3]
 8008ab0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008ab4:	6879      	ldr	r1, [r7, #4]
 8008ab6:	33e0      	adds	r3, #224	; 0xe0
 8008ab8:	009b      	lsls	r3, r3, #2
 8008aba:	440b      	add	r3, r1
 8008abc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008abe:	2300      	movs	r3, #0
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	370c      	adds	r7, #12
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aca:	4770      	bx	lr

08008acc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b085      	sub	sp, #20
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008ad8:	2300      	movs	r3, #0
 8008ada:	73fb      	strb	r3, [r7, #15]
 8008adc:	e00f      	b.n	8008afe <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008ade:	7bfb      	ldrb	r3, [r7, #15]
 8008ae0:	687a      	ldr	r2, [r7, #4]
 8008ae2:	33e0      	adds	r3, #224	; 0xe0
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	4413      	add	r3, r2
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d102      	bne.n	8008af8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008af2:	7bfb      	ldrb	r3, [r7, #15]
 8008af4:	b29b      	uxth	r3, r3
 8008af6:	e007      	b.n	8008b08 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008af8:	7bfb      	ldrb	r3, [r7, #15]
 8008afa:	3301      	adds	r3, #1
 8008afc:	73fb      	strb	r3, [r7, #15]
 8008afe:	7bfb      	ldrb	r3, [r7, #15]
 8008b00:	2b0a      	cmp	r3, #10
 8008b02:	d9ec      	bls.n	8008ade <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008b04:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3714      	adds	r7, #20
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr

08008b14 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b084      	sub	sp, #16
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008b1e:	79fb      	ldrb	r3, [r7, #7]
 8008b20:	4a08      	ldr	r2, [pc, #32]	; (8008b44 <disk_status+0x30>)
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	4413      	add	r3, r2
 8008b26:	685b      	ldr	r3, [r3, #4]
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	79fa      	ldrb	r2, [r7, #7]
 8008b2c:	4905      	ldr	r1, [pc, #20]	; (8008b44 <disk_status+0x30>)
 8008b2e:	440a      	add	r2, r1
 8008b30:	7a12      	ldrb	r2, [r2, #8]
 8008b32:	4610      	mov	r0, r2
 8008b34:	4798      	blx	r3
 8008b36:	4603      	mov	r3, r0
 8008b38:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3710      	adds	r7, #16
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}
 8008b44:	200001f4 	.word	0x200001f4

08008b48 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b084      	sub	sp, #16
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	4603      	mov	r3, r0
 8008b50:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008b52:	2300      	movs	r3, #0
 8008b54:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008b56:	79fb      	ldrb	r3, [r7, #7]
 8008b58:	4a0d      	ldr	r2, [pc, #52]	; (8008b90 <disk_initialize+0x48>)
 8008b5a:	5cd3      	ldrb	r3, [r2, r3]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d111      	bne.n	8008b84 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008b60:	79fb      	ldrb	r3, [r7, #7]
 8008b62:	4a0b      	ldr	r2, [pc, #44]	; (8008b90 <disk_initialize+0x48>)
 8008b64:	2101      	movs	r1, #1
 8008b66:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008b68:	79fb      	ldrb	r3, [r7, #7]
 8008b6a:	4a09      	ldr	r2, [pc, #36]	; (8008b90 <disk_initialize+0x48>)
 8008b6c:	009b      	lsls	r3, r3, #2
 8008b6e:	4413      	add	r3, r2
 8008b70:	685b      	ldr	r3, [r3, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	79fa      	ldrb	r2, [r7, #7]
 8008b76:	4906      	ldr	r1, [pc, #24]	; (8008b90 <disk_initialize+0x48>)
 8008b78:	440a      	add	r2, r1
 8008b7a:	7a12      	ldrb	r2, [r2, #8]
 8008b7c:	4610      	mov	r0, r2
 8008b7e:	4798      	blx	r3
 8008b80:	4603      	mov	r3, r0
 8008b82:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3710      	adds	r7, #16
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}
 8008b8e:	bf00      	nop
 8008b90:	200001f4 	.word	0x200001f4

08008b94 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008b94:	b590      	push	{r4, r7, lr}
 8008b96:	b087      	sub	sp, #28
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	60b9      	str	r1, [r7, #8]
 8008b9c:	607a      	str	r2, [r7, #4]
 8008b9e:	603b      	str	r3, [r7, #0]
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008ba4:	7bfb      	ldrb	r3, [r7, #15]
 8008ba6:	4a0a      	ldr	r2, [pc, #40]	; (8008bd0 <disk_read+0x3c>)
 8008ba8:	009b      	lsls	r3, r3, #2
 8008baa:	4413      	add	r3, r2
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	689c      	ldr	r4, [r3, #8]
 8008bb0:	7bfb      	ldrb	r3, [r7, #15]
 8008bb2:	4a07      	ldr	r2, [pc, #28]	; (8008bd0 <disk_read+0x3c>)
 8008bb4:	4413      	add	r3, r2
 8008bb6:	7a18      	ldrb	r0, [r3, #8]
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	687a      	ldr	r2, [r7, #4]
 8008bbc:	68b9      	ldr	r1, [r7, #8]
 8008bbe:	47a0      	blx	r4
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	75fb      	strb	r3, [r7, #23]
  return res;
 8008bc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	371c      	adds	r7, #28
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd90      	pop	{r4, r7, pc}
 8008bce:	bf00      	nop
 8008bd0:	200001f4 	.word	0x200001f4

08008bd4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008bd4:	b590      	push	{r4, r7, lr}
 8008bd6:	b087      	sub	sp, #28
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	60b9      	str	r1, [r7, #8]
 8008bdc:	607a      	str	r2, [r7, #4]
 8008bde:	603b      	str	r3, [r7, #0]
 8008be0:	4603      	mov	r3, r0
 8008be2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008be4:	7bfb      	ldrb	r3, [r7, #15]
 8008be6:	4a0a      	ldr	r2, [pc, #40]	; (8008c10 <disk_write+0x3c>)
 8008be8:	009b      	lsls	r3, r3, #2
 8008bea:	4413      	add	r3, r2
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	68dc      	ldr	r4, [r3, #12]
 8008bf0:	7bfb      	ldrb	r3, [r7, #15]
 8008bf2:	4a07      	ldr	r2, [pc, #28]	; (8008c10 <disk_write+0x3c>)
 8008bf4:	4413      	add	r3, r2
 8008bf6:	7a18      	ldrb	r0, [r3, #8]
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	687a      	ldr	r2, [r7, #4]
 8008bfc:	68b9      	ldr	r1, [r7, #8]
 8008bfe:	47a0      	blx	r4
 8008c00:	4603      	mov	r3, r0
 8008c02:	75fb      	strb	r3, [r7, #23]
  return res;
 8008c04:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	371c      	adds	r7, #28
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd90      	pop	{r4, r7, pc}
 8008c0e:	bf00      	nop
 8008c10:	200001f4 	.word	0x200001f4

08008c14 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b084      	sub	sp, #16
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	603a      	str	r2, [r7, #0]
 8008c1e:	71fb      	strb	r3, [r7, #7]
 8008c20:	460b      	mov	r3, r1
 8008c22:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008c24:	79fb      	ldrb	r3, [r7, #7]
 8008c26:	4a09      	ldr	r2, [pc, #36]	; (8008c4c <disk_ioctl+0x38>)
 8008c28:	009b      	lsls	r3, r3, #2
 8008c2a:	4413      	add	r3, r2
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	691b      	ldr	r3, [r3, #16]
 8008c30:	79fa      	ldrb	r2, [r7, #7]
 8008c32:	4906      	ldr	r1, [pc, #24]	; (8008c4c <disk_ioctl+0x38>)
 8008c34:	440a      	add	r2, r1
 8008c36:	7a10      	ldrb	r0, [r2, #8]
 8008c38:	79b9      	ldrb	r1, [r7, #6]
 8008c3a:	683a      	ldr	r2, [r7, #0]
 8008c3c:	4798      	blx	r3
 8008c3e:	4603      	mov	r3, r0
 8008c40:	73fb      	strb	r3, [r7, #15]
  return res;
 8008c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3710      	adds	r7, #16
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}
 8008c4c:	200001f4 	.word	0x200001f4

08008c50 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008c50:	b480      	push	{r7}
 8008c52:	b085      	sub	sp, #20
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	3301      	adds	r3, #1
 8008c5c:	781b      	ldrb	r3, [r3, #0]
 8008c5e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008c60:	89fb      	ldrh	r3, [r7, #14]
 8008c62:	021b      	lsls	r3, r3, #8
 8008c64:	b21a      	sxth	r2, r3
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	b21b      	sxth	r3, r3
 8008c6c:	4313      	orrs	r3, r2
 8008c6e:	b21b      	sxth	r3, r3
 8008c70:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008c72:	89fb      	ldrh	r3, [r7, #14]
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3714      	adds	r7, #20
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr

08008c80 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008c80:	b480      	push	{r7}
 8008c82:	b085      	sub	sp, #20
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	3303      	adds	r3, #3
 8008c8c:	781b      	ldrb	r3, [r3, #0]
 8008c8e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	021b      	lsls	r3, r3, #8
 8008c94:	687a      	ldr	r2, [r7, #4]
 8008c96:	3202      	adds	r2, #2
 8008c98:	7812      	ldrb	r2, [r2, #0]
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	021b      	lsls	r3, r3, #8
 8008ca2:	687a      	ldr	r2, [r7, #4]
 8008ca4:	3201      	adds	r2, #1
 8008ca6:	7812      	ldrb	r2, [r2, #0]
 8008ca8:	4313      	orrs	r3, r2
 8008caa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	021b      	lsls	r3, r3, #8
 8008cb0:	687a      	ldr	r2, [r7, #4]
 8008cb2:	7812      	ldrb	r2, [r2, #0]
 8008cb4:	4313      	orrs	r3, r2
 8008cb6:	60fb      	str	r3, [r7, #12]
	return rv;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3714      	adds	r7, #20
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc4:	4770      	bx	lr

08008cc6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008cc6:	b480      	push	{r7}
 8008cc8:	b083      	sub	sp, #12
 8008cca:	af00      	add	r7, sp, #0
 8008ccc:	6078      	str	r0, [r7, #4]
 8008cce:	460b      	mov	r3, r1
 8008cd0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	1c5a      	adds	r2, r3, #1
 8008cd6:	607a      	str	r2, [r7, #4]
 8008cd8:	887a      	ldrh	r2, [r7, #2]
 8008cda:	b2d2      	uxtb	r2, r2
 8008cdc:	701a      	strb	r2, [r3, #0]
 8008cde:	887b      	ldrh	r3, [r7, #2]
 8008ce0:	0a1b      	lsrs	r3, r3, #8
 8008ce2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	1c5a      	adds	r2, r3, #1
 8008ce8:	607a      	str	r2, [r7, #4]
 8008cea:	887a      	ldrh	r2, [r7, #2]
 8008cec:	b2d2      	uxtb	r2, r2
 8008cee:	701a      	strb	r2, [r3, #0]
}
 8008cf0:	bf00      	nop
 8008cf2:	370c      	adds	r7, #12
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr

08008cfc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b083      	sub	sp, #12
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
 8008d04:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	1c5a      	adds	r2, r3, #1
 8008d0a:	607a      	str	r2, [r7, #4]
 8008d0c:	683a      	ldr	r2, [r7, #0]
 8008d0e:	b2d2      	uxtb	r2, r2
 8008d10:	701a      	strb	r2, [r3, #0]
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	0a1b      	lsrs	r3, r3, #8
 8008d16:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	1c5a      	adds	r2, r3, #1
 8008d1c:	607a      	str	r2, [r7, #4]
 8008d1e:	683a      	ldr	r2, [r7, #0]
 8008d20:	b2d2      	uxtb	r2, r2
 8008d22:	701a      	strb	r2, [r3, #0]
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	0a1b      	lsrs	r3, r3, #8
 8008d28:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	1c5a      	adds	r2, r3, #1
 8008d2e:	607a      	str	r2, [r7, #4]
 8008d30:	683a      	ldr	r2, [r7, #0]
 8008d32:	b2d2      	uxtb	r2, r2
 8008d34:	701a      	strb	r2, [r3, #0]
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	0a1b      	lsrs	r3, r3, #8
 8008d3a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	1c5a      	adds	r2, r3, #1
 8008d40:	607a      	str	r2, [r7, #4]
 8008d42:	683a      	ldr	r2, [r7, #0]
 8008d44:	b2d2      	uxtb	r2, r2
 8008d46:	701a      	strb	r2, [r3, #0]
}
 8008d48:	bf00      	nop
 8008d4a:	370c      	adds	r7, #12
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d52:	4770      	bx	lr

08008d54 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008d54:	b480      	push	{r7}
 8008d56:	b087      	sub	sp, #28
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	60f8      	str	r0, [r7, #12]
 8008d5c:	60b9      	str	r1, [r7, #8]
 8008d5e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d00d      	beq.n	8008d8a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008d6e:	693a      	ldr	r2, [r7, #16]
 8008d70:	1c53      	adds	r3, r2, #1
 8008d72:	613b      	str	r3, [r7, #16]
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	1c59      	adds	r1, r3, #1
 8008d78:	6179      	str	r1, [r7, #20]
 8008d7a:	7812      	ldrb	r2, [r2, #0]
 8008d7c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	3b01      	subs	r3, #1
 8008d82:	607b      	str	r3, [r7, #4]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d1f1      	bne.n	8008d6e <mem_cpy+0x1a>
	}
}
 8008d8a:	bf00      	nop
 8008d8c:	371c      	adds	r7, #28
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d94:	4770      	bx	lr

08008d96 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008d96:	b480      	push	{r7}
 8008d98:	b087      	sub	sp, #28
 8008d9a:	af00      	add	r7, sp, #0
 8008d9c:	60f8      	str	r0, [r7, #12]
 8008d9e:	60b9      	str	r1, [r7, #8]
 8008da0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	1c5a      	adds	r2, r3, #1
 8008daa:	617a      	str	r2, [r7, #20]
 8008dac:	68ba      	ldr	r2, [r7, #8]
 8008dae:	b2d2      	uxtb	r2, r2
 8008db0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	3b01      	subs	r3, #1
 8008db6:	607b      	str	r3, [r7, #4]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d1f3      	bne.n	8008da6 <mem_set+0x10>
}
 8008dbe:	bf00      	nop
 8008dc0:	bf00      	nop
 8008dc2:	371c      	adds	r7, #28
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dca:	4770      	bx	lr

08008dcc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008dcc:	b480      	push	{r7}
 8008dce:	b089      	sub	sp, #36	; 0x24
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	60f8      	str	r0, [r7, #12]
 8008dd4:	60b9      	str	r1, [r7, #8]
 8008dd6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	61fb      	str	r3, [r7, #28]
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008de0:	2300      	movs	r3, #0
 8008de2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008de4:	69fb      	ldr	r3, [r7, #28]
 8008de6:	1c5a      	adds	r2, r3, #1
 8008de8:	61fa      	str	r2, [r7, #28]
 8008dea:	781b      	ldrb	r3, [r3, #0]
 8008dec:	4619      	mov	r1, r3
 8008dee:	69bb      	ldr	r3, [r7, #24]
 8008df0:	1c5a      	adds	r2, r3, #1
 8008df2:	61ba      	str	r2, [r7, #24]
 8008df4:	781b      	ldrb	r3, [r3, #0]
 8008df6:	1acb      	subs	r3, r1, r3
 8008df8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	3b01      	subs	r3, #1
 8008dfe:	607b      	str	r3, [r7, #4]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d002      	beq.n	8008e0c <mem_cmp+0x40>
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d0eb      	beq.n	8008de4 <mem_cmp+0x18>

	return r;
 8008e0c:	697b      	ldr	r3, [r7, #20]
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3724      	adds	r7, #36	; 0x24
 8008e12:	46bd      	mov	sp, r7
 8008e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e18:	4770      	bx	lr

08008e1a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008e1a:	b480      	push	{r7}
 8008e1c:	b083      	sub	sp, #12
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	6078      	str	r0, [r7, #4]
 8008e22:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008e24:	e002      	b.n	8008e2c <chk_chr+0x12>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	3301      	adds	r3, #1
 8008e2a:	607b      	str	r3, [r7, #4]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	781b      	ldrb	r3, [r3, #0]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d005      	beq.n	8008e40 <chk_chr+0x26>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	781b      	ldrb	r3, [r3, #0]
 8008e38:	461a      	mov	r2, r3
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d1f2      	bne.n	8008e26 <chk_chr+0xc>
	return *str;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	781b      	ldrb	r3, [r3, #0]
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	370c      	adds	r7, #12
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr

08008e50 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b085      	sub	sp, #20
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
 8008e58:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	60bb      	str	r3, [r7, #8]
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	60fb      	str	r3, [r7, #12]
 8008e62:	e029      	b.n	8008eb8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008e64:	4a27      	ldr	r2, [pc, #156]	; (8008f04 <chk_lock+0xb4>)
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	011b      	lsls	r3, r3, #4
 8008e6a:	4413      	add	r3, r2
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d01d      	beq.n	8008eae <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008e72:	4a24      	ldr	r2, [pc, #144]	; (8008f04 <chk_lock+0xb4>)
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	011b      	lsls	r3, r3, #4
 8008e78:	4413      	add	r3, r2
 8008e7a:	681a      	ldr	r2, [r3, #0]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d116      	bne.n	8008eb2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008e84:	4a1f      	ldr	r2, [pc, #124]	; (8008f04 <chk_lock+0xb4>)
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	011b      	lsls	r3, r3, #4
 8008e8a:	4413      	add	r3, r2
 8008e8c:	3304      	adds	r3, #4
 8008e8e:	681a      	ldr	r2, [r3, #0]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008e94:	429a      	cmp	r2, r3
 8008e96:	d10c      	bne.n	8008eb2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008e98:	4a1a      	ldr	r2, [pc, #104]	; (8008f04 <chk_lock+0xb4>)
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	011b      	lsls	r3, r3, #4
 8008e9e:	4413      	add	r3, r2
 8008ea0:	3308      	adds	r3, #8
 8008ea2:	681a      	ldr	r2, [r3, #0]
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d102      	bne.n	8008eb2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008eac:	e007      	b.n	8008ebe <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008eae:	2301      	movs	r3, #1
 8008eb0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	3301      	adds	r3, #1
 8008eb6:	60fb      	str	r3, [r7, #12]
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	d9d2      	bls.n	8008e64 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	2b02      	cmp	r3, #2
 8008ec2:	d109      	bne.n	8008ed8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d102      	bne.n	8008ed0 <chk_lock+0x80>
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	2b02      	cmp	r3, #2
 8008ece:	d101      	bne.n	8008ed4 <chk_lock+0x84>
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	e010      	b.n	8008ef6 <chk_lock+0xa6>
 8008ed4:	2312      	movs	r3, #18
 8008ed6:	e00e      	b.n	8008ef6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d108      	bne.n	8008ef0 <chk_lock+0xa0>
 8008ede:	4a09      	ldr	r2, [pc, #36]	; (8008f04 <chk_lock+0xb4>)
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	011b      	lsls	r3, r3, #4
 8008ee4:	4413      	add	r3, r2
 8008ee6:	330c      	adds	r3, #12
 8008ee8:	881b      	ldrh	r3, [r3, #0]
 8008eea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008eee:	d101      	bne.n	8008ef4 <chk_lock+0xa4>
 8008ef0:	2310      	movs	r3, #16
 8008ef2:	e000      	b.n	8008ef6 <chk_lock+0xa6>
 8008ef4:	2300      	movs	r3, #0
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3714      	adds	r7, #20
 8008efa:	46bd      	mov	sp, r7
 8008efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f00:	4770      	bx	lr
 8008f02:	bf00      	nop
 8008f04:	200001d4 	.word	0x200001d4

08008f08 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b083      	sub	sp, #12
 8008f0c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	607b      	str	r3, [r7, #4]
 8008f12:	e002      	b.n	8008f1a <enq_lock+0x12>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	3301      	adds	r3, #1
 8008f18:	607b      	str	r3, [r7, #4]
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2b01      	cmp	r3, #1
 8008f1e:	d806      	bhi.n	8008f2e <enq_lock+0x26>
 8008f20:	4a09      	ldr	r2, [pc, #36]	; (8008f48 <enq_lock+0x40>)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	011b      	lsls	r3, r3, #4
 8008f26:	4413      	add	r3, r2
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d1f2      	bne.n	8008f14 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2b02      	cmp	r3, #2
 8008f32:	bf14      	ite	ne
 8008f34:	2301      	movne	r3, #1
 8008f36:	2300      	moveq	r3, #0
 8008f38:	b2db      	uxtb	r3, r3
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	370c      	adds	r7, #12
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f44:	4770      	bx	lr
 8008f46:	bf00      	nop
 8008f48:	200001d4 	.word	0x200001d4

08008f4c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b085      	sub	sp, #20
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008f56:	2300      	movs	r3, #0
 8008f58:	60fb      	str	r3, [r7, #12]
 8008f5a:	e01f      	b.n	8008f9c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008f5c:	4a41      	ldr	r2, [pc, #260]	; (8009064 <inc_lock+0x118>)
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	011b      	lsls	r3, r3, #4
 8008f62:	4413      	add	r3, r2
 8008f64:	681a      	ldr	r2, [r3, #0]
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	429a      	cmp	r2, r3
 8008f6c:	d113      	bne.n	8008f96 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008f6e:	4a3d      	ldr	r2, [pc, #244]	; (8009064 <inc_lock+0x118>)
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	011b      	lsls	r3, r3, #4
 8008f74:	4413      	add	r3, r2
 8008f76:	3304      	adds	r3, #4
 8008f78:	681a      	ldr	r2, [r3, #0]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008f7e:	429a      	cmp	r2, r3
 8008f80:	d109      	bne.n	8008f96 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008f82:	4a38      	ldr	r2, [pc, #224]	; (8009064 <inc_lock+0x118>)
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	011b      	lsls	r3, r3, #4
 8008f88:	4413      	add	r3, r2
 8008f8a:	3308      	adds	r3, #8
 8008f8c:	681a      	ldr	r2, [r3, #0]
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008f92:	429a      	cmp	r2, r3
 8008f94:	d006      	beq.n	8008fa4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	3301      	adds	r3, #1
 8008f9a:	60fb      	str	r3, [r7, #12]
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2b01      	cmp	r3, #1
 8008fa0:	d9dc      	bls.n	8008f5c <inc_lock+0x10>
 8008fa2:	e000      	b.n	8008fa6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008fa4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2b02      	cmp	r3, #2
 8008faa:	d132      	bne.n	8009012 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008fac:	2300      	movs	r3, #0
 8008fae:	60fb      	str	r3, [r7, #12]
 8008fb0:	e002      	b.n	8008fb8 <inc_lock+0x6c>
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	3301      	adds	r3, #1
 8008fb6:	60fb      	str	r3, [r7, #12]
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	2b01      	cmp	r3, #1
 8008fbc:	d806      	bhi.n	8008fcc <inc_lock+0x80>
 8008fbe:	4a29      	ldr	r2, [pc, #164]	; (8009064 <inc_lock+0x118>)
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	011b      	lsls	r3, r3, #4
 8008fc4:	4413      	add	r3, r2
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d1f2      	bne.n	8008fb2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2b02      	cmp	r3, #2
 8008fd0:	d101      	bne.n	8008fd6 <inc_lock+0x8a>
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	e040      	b.n	8009058 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681a      	ldr	r2, [r3, #0]
 8008fda:	4922      	ldr	r1, [pc, #136]	; (8009064 <inc_lock+0x118>)
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	011b      	lsls	r3, r3, #4
 8008fe0:	440b      	add	r3, r1
 8008fe2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	689a      	ldr	r2, [r3, #8]
 8008fe8:	491e      	ldr	r1, [pc, #120]	; (8009064 <inc_lock+0x118>)
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	011b      	lsls	r3, r3, #4
 8008fee:	440b      	add	r3, r1
 8008ff0:	3304      	adds	r3, #4
 8008ff2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	695a      	ldr	r2, [r3, #20]
 8008ff8:	491a      	ldr	r1, [pc, #104]	; (8009064 <inc_lock+0x118>)
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	011b      	lsls	r3, r3, #4
 8008ffe:	440b      	add	r3, r1
 8009000:	3308      	adds	r3, #8
 8009002:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009004:	4a17      	ldr	r2, [pc, #92]	; (8009064 <inc_lock+0x118>)
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	011b      	lsls	r3, r3, #4
 800900a:	4413      	add	r3, r2
 800900c:	330c      	adds	r3, #12
 800900e:	2200      	movs	r2, #0
 8009010:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d009      	beq.n	800902c <inc_lock+0xe0>
 8009018:	4a12      	ldr	r2, [pc, #72]	; (8009064 <inc_lock+0x118>)
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	011b      	lsls	r3, r3, #4
 800901e:	4413      	add	r3, r2
 8009020:	330c      	adds	r3, #12
 8009022:	881b      	ldrh	r3, [r3, #0]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d001      	beq.n	800902c <inc_lock+0xe0>
 8009028:	2300      	movs	r3, #0
 800902a:	e015      	b.n	8009058 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d108      	bne.n	8009044 <inc_lock+0xf8>
 8009032:	4a0c      	ldr	r2, [pc, #48]	; (8009064 <inc_lock+0x118>)
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	011b      	lsls	r3, r3, #4
 8009038:	4413      	add	r3, r2
 800903a:	330c      	adds	r3, #12
 800903c:	881b      	ldrh	r3, [r3, #0]
 800903e:	3301      	adds	r3, #1
 8009040:	b29a      	uxth	r2, r3
 8009042:	e001      	b.n	8009048 <inc_lock+0xfc>
 8009044:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009048:	4906      	ldr	r1, [pc, #24]	; (8009064 <inc_lock+0x118>)
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	011b      	lsls	r3, r3, #4
 800904e:	440b      	add	r3, r1
 8009050:	330c      	adds	r3, #12
 8009052:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	3301      	adds	r3, #1
}
 8009058:	4618      	mov	r0, r3
 800905a:	3714      	adds	r7, #20
 800905c:	46bd      	mov	sp, r7
 800905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009062:	4770      	bx	lr
 8009064:	200001d4 	.word	0x200001d4

08009068 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009068:	b480      	push	{r7}
 800906a:	b085      	sub	sp, #20
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	3b01      	subs	r3, #1
 8009074:	607b      	str	r3, [r7, #4]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2b01      	cmp	r3, #1
 800907a:	d825      	bhi.n	80090c8 <dec_lock+0x60>
		n = Files[i].ctr;
 800907c:	4a17      	ldr	r2, [pc, #92]	; (80090dc <dec_lock+0x74>)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	011b      	lsls	r3, r3, #4
 8009082:	4413      	add	r3, r2
 8009084:	330c      	adds	r3, #12
 8009086:	881b      	ldrh	r3, [r3, #0]
 8009088:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800908a:	89fb      	ldrh	r3, [r7, #14]
 800908c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009090:	d101      	bne.n	8009096 <dec_lock+0x2e>
 8009092:	2300      	movs	r3, #0
 8009094:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009096:	89fb      	ldrh	r3, [r7, #14]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d002      	beq.n	80090a2 <dec_lock+0x3a>
 800909c:	89fb      	ldrh	r3, [r7, #14]
 800909e:	3b01      	subs	r3, #1
 80090a0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80090a2:	4a0e      	ldr	r2, [pc, #56]	; (80090dc <dec_lock+0x74>)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	011b      	lsls	r3, r3, #4
 80090a8:	4413      	add	r3, r2
 80090aa:	330c      	adds	r3, #12
 80090ac:	89fa      	ldrh	r2, [r7, #14]
 80090ae:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80090b0:	89fb      	ldrh	r3, [r7, #14]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d105      	bne.n	80090c2 <dec_lock+0x5a>
 80090b6:	4a09      	ldr	r2, [pc, #36]	; (80090dc <dec_lock+0x74>)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	011b      	lsls	r3, r3, #4
 80090bc:	4413      	add	r3, r2
 80090be:	2200      	movs	r2, #0
 80090c0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80090c2:	2300      	movs	r3, #0
 80090c4:	737b      	strb	r3, [r7, #13]
 80090c6:	e001      	b.n	80090cc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80090c8:	2302      	movs	r3, #2
 80090ca:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80090cc:	7b7b      	ldrb	r3, [r7, #13]
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3714      	adds	r7, #20
 80090d2:	46bd      	mov	sp, r7
 80090d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d8:	4770      	bx	lr
 80090da:	bf00      	nop
 80090dc:	200001d4 	.word	0x200001d4

080090e0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80090e0:	b480      	push	{r7}
 80090e2:	b085      	sub	sp, #20
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80090e8:	2300      	movs	r3, #0
 80090ea:	60fb      	str	r3, [r7, #12]
 80090ec:	e010      	b.n	8009110 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80090ee:	4a0d      	ldr	r2, [pc, #52]	; (8009124 <clear_lock+0x44>)
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	011b      	lsls	r3, r3, #4
 80090f4:	4413      	add	r3, r2
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	687a      	ldr	r2, [r7, #4]
 80090fa:	429a      	cmp	r2, r3
 80090fc:	d105      	bne.n	800910a <clear_lock+0x2a>
 80090fe:	4a09      	ldr	r2, [pc, #36]	; (8009124 <clear_lock+0x44>)
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	011b      	lsls	r3, r3, #4
 8009104:	4413      	add	r3, r2
 8009106:	2200      	movs	r2, #0
 8009108:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	3301      	adds	r3, #1
 800910e:	60fb      	str	r3, [r7, #12]
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	2b01      	cmp	r3, #1
 8009114:	d9eb      	bls.n	80090ee <clear_lock+0xe>
	}
}
 8009116:	bf00      	nop
 8009118:	bf00      	nop
 800911a:	3714      	adds	r7, #20
 800911c:	46bd      	mov	sp, r7
 800911e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009122:	4770      	bx	lr
 8009124:	200001d4 	.word	0x200001d4

08009128 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b086      	sub	sp, #24
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009130:	2300      	movs	r3, #0
 8009132:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	78db      	ldrb	r3, [r3, #3]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d034      	beq.n	80091a6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009140:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	7858      	ldrb	r0, [r3, #1]
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800914c:	2301      	movs	r3, #1
 800914e:	697a      	ldr	r2, [r7, #20]
 8009150:	f7ff fd40 	bl	8008bd4 <disk_write>
 8009154:	4603      	mov	r3, r0
 8009156:	2b00      	cmp	r3, #0
 8009158:	d002      	beq.n	8009160 <sync_window+0x38>
			res = FR_DISK_ERR;
 800915a:	2301      	movs	r3, #1
 800915c:	73fb      	strb	r3, [r7, #15]
 800915e:	e022      	b.n	80091a6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2200      	movs	r2, #0
 8009164:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6a1b      	ldr	r3, [r3, #32]
 800916a:	697a      	ldr	r2, [r7, #20]
 800916c:	1ad2      	subs	r2, r2, r3
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	699b      	ldr	r3, [r3, #24]
 8009172:	429a      	cmp	r2, r3
 8009174:	d217      	bcs.n	80091a6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	789b      	ldrb	r3, [r3, #2]
 800917a:	613b      	str	r3, [r7, #16]
 800917c:	e010      	b.n	80091a0 <sync_window+0x78>
					wsect += fs->fsize;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	699b      	ldr	r3, [r3, #24]
 8009182:	697a      	ldr	r2, [r7, #20]
 8009184:	4413      	add	r3, r2
 8009186:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	7858      	ldrb	r0, [r3, #1]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009192:	2301      	movs	r3, #1
 8009194:	697a      	ldr	r2, [r7, #20]
 8009196:	f7ff fd1d 	bl	8008bd4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	3b01      	subs	r3, #1
 800919e:	613b      	str	r3, [r7, #16]
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	2b01      	cmp	r3, #1
 80091a4:	d8eb      	bhi.n	800917e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80091a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3718      	adds	r7, #24
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}

080091b0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b084      	sub	sp, #16
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
 80091b8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80091ba:	2300      	movs	r3, #0
 80091bc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091c2:	683a      	ldr	r2, [r7, #0]
 80091c4:	429a      	cmp	r2, r3
 80091c6:	d01b      	beq.n	8009200 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f7ff ffad 	bl	8009128 <sync_window>
 80091ce:	4603      	mov	r3, r0
 80091d0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80091d2:	7bfb      	ldrb	r3, [r7, #15]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d113      	bne.n	8009200 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	7858      	ldrb	r0, [r3, #1]
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80091e2:	2301      	movs	r3, #1
 80091e4:	683a      	ldr	r2, [r7, #0]
 80091e6:	f7ff fcd5 	bl	8008b94 <disk_read>
 80091ea:	4603      	mov	r3, r0
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d004      	beq.n	80091fa <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80091f0:	f04f 33ff 	mov.w	r3, #4294967295
 80091f4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80091f6:	2301      	movs	r3, #1
 80091f8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	683a      	ldr	r2, [r7, #0]
 80091fe:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8009200:	7bfb      	ldrb	r3, [r7, #15]
}
 8009202:	4618      	mov	r0, r3
 8009204:	3710      	adds	r7, #16
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}
	...

0800920c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b084      	sub	sp, #16
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f7ff ff87 	bl	8009128 <sync_window>
 800921a:	4603      	mov	r3, r0
 800921c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800921e:	7bfb      	ldrb	r3, [r7, #15]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d158      	bne.n	80092d6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	781b      	ldrb	r3, [r3, #0]
 8009228:	2b03      	cmp	r3, #3
 800922a:	d148      	bne.n	80092be <sync_fs+0xb2>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	791b      	ldrb	r3, [r3, #4]
 8009230:	2b01      	cmp	r3, #1
 8009232:	d144      	bne.n	80092be <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	3330      	adds	r3, #48	; 0x30
 8009238:	f44f 7200 	mov.w	r2, #512	; 0x200
 800923c:	2100      	movs	r1, #0
 800923e:	4618      	mov	r0, r3
 8009240:	f7ff fda9 	bl	8008d96 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	3330      	adds	r3, #48	; 0x30
 8009248:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800924c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8009250:	4618      	mov	r0, r3
 8009252:	f7ff fd38 	bl	8008cc6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	3330      	adds	r3, #48	; 0x30
 800925a:	4921      	ldr	r1, [pc, #132]	; (80092e0 <sync_fs+0xd4>)
 800925c:	4618      	mov	r0, r3
 800925e:	f7ff fd4d 	bl	8008cfc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	3330      	adds	r3, #48	; 0x30
 8009266:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800926a:	491e      	ldr	r1, [pc, #120]	; (80092e4 <sync_fs+0xd8>)
 800926c:	4618      	mov	r0, r3
 800926e:	f7ff fd45 	bl	8008cfc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	3330      	adds	r3, #48	; 0x30
 8009276:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	691b      	ldr	r3, [r3, #16]
 800927e:	4619      	mov	r1, r3
 8009280:	4610      	mov	r0, r2
 8009282:	f7ff fd3b 	bl	8008cfc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	3330      	adds	r3, #48	; 0x30
 800928a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	68db      	ldr	r3, [r3, #12]
 8009292:	4619      	mov	r1, r3
 8009294:	4610      	mov	r0, r2
 8009296:	f7ff fd31 	bl	8008cfc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	69db      	ldr	r3, [r3, #28]
 800929e:	1c5a      	adds	r2, r3, #1
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	7858      	ldrb	r0, [r3, #1]
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092b2:	2301      	movs	r3, #1
 80092b4:	f7ff fc8e 	bl	8008bd4 <disk_write>
			fs->fsi_flag = 0;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2200      	movs	r2, #0
 80092bc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	785b      	ldrb	r3, [r3, #1]
 80092c2:	2200      	movs	r2, #0
 80092c4:	2100      	movs	r1, #0
 80092c6:	4618      	mov	r0, r3
 80092c8:	f7ff fca4 	bl	8008c14 <disk_ioctl>
 80092cc:	4603      	mov	r3, r0
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d001      	beq.n	80092d6 <sync_fs+0xca>
 80092d2:	2301      	movs	r3, #1
 80092d4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80092d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3710      	adds	r7, #16
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}
 80092e0:	41615252 	.word	0x41615252
 80092e4:	61417272 	.word	0x61417272

080092e8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b083      	sub	sp, #12
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
 80092f0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	3b02      	subs	r3, #2
 80092f6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	695b      	ldr	r3, [r3, #20]
 80092fc:	3b02      	subs	r3, #2
 80092fe:	683a      	ldr	r2, [r7, #0]
 8009300:	429a      	cmp	r2, r3
 8009302:	d301      	bcc.n	8009308 <clust2sect+0x20>
 8009304:	2300      	movs	r3, #0
 8009306:	e008      	b.n	800931a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	895b      	ldrh	r3, [r3, #10]
 800930c:	461a      	mov	r2, r3
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	fb03 f202 	mul.w	r2, r3, r2
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009318:	4413      	add	r3, r2
}
 800931a:	4618      	mov	r0, r3
 800931c:	370c      	adds	r7, #12
 800931e:	46bd      	mov	sp, r7
 8009320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009324:	4770      	bx	lr

08009326 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009326:	b580      	push	{r7, lr}
 8009328:	b086      	sub	sp, #24
 800932a:	af00      	add	r7, sp, #0
 800932c:	6078      	str	r0, [r7, #4]
 800932e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	2b01      	cmp	r3, #1
 800933a:	d904      	bls.n	8009346 <get_fat+0x20>
 800933c:	693b      	ldr	r3, [r7, #16]
 800933e:	695b      	ldr	r3, [r3, #20]
 8009340:	683a      	ldr	r2, [r7, #0]
 8009342:	429a      	cmp	r2, r3
 8009344:	d302      	bcc.n	800934c <get_fat+0x26>
		val = 1;	/* Internal error */
 8009346:	2301      	movs	r3, #1
 8009348:	617b      	str	r3, [r7, #20]
 800934a:	e08f      	b.n	800946c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800934c:	f04f 33ff 	mov.w	r3, #4294967295
 8009350:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	781b      	ldrb	r3, [r3, #0]
 8009356:	2b03      	cmp	r3, #3
 8009358:	d062      	beq.n	8009420 <get_fat+0xfa>
 800935a:	2b03      	cmp	r3, #3
 800935c:	dc7c      	bgt.n	8009458 <get_fat+0x132>
 800935e:	2b01      	cmp	r3, #1
 8009360:	d002      	beq.n	8009368 <get_fat+0x42>
 8009362:	2b02      	cmp	r3, #2
 8009364:	d042      	beq.n	80093ec <get_fat+0xc6>
 8009366:	e077      	b.n	8009458 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	60fb      	str	r3, [r7, #12]
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	085b      	lsrs	r3, r3, #1
 8009370:	68fa      	ldr	r2, [r7, #12]
 8009372:	4413      	add	r3, r2
 8009374:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009376:	693b      	ldr	r3, [r7, #16]
 8009378:	6a1a      	ldr	r2, [r3, #32]
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	0a5b      	lsrs	r3, r3, #9
 800937e:	4413      	add	r3, r2
 8009380:	4619      	mov	r1, r3
 8009382:	6938      	ldr	r0, [r7, #16]
 8009384:	f7ff ff14 	bl	80091b0 <move_window>
 8009388:	4603      	mov	r3, r0
 800938a:	2b00      	cmp	r3, #0
 800938c:	d167      	bne.n	800945e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	1c5a      	adds	r2, r3, #1
 8009392:	60fa      	str	r2, [r7, #12]
 8009394:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009398:	693a      	ldr	r2, [r7, #16]
 800939a:	4413      	add	r3, r2
 800939c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80093a0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	6a1a      	ldr	r2, [r3, #32]
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	0a5b      	lsrs	r3, r3, #9
 80093aa:	4413      	add	r3, r2
 80093ac:	4619      	mov	r1, r3
 80093ae:	6938      	ldr	r0, [r7, #16]
 80093b0:	f7ff fefe 	bl	80091b0 <move_window>
 80093b4:	4603      	mov	r3, r0
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d153      	bne.n	8009462 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093c0:	693a      	ldr	r2, [r7, #16]
 80093c2:	4413      	add	r3, r2
 80093c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80093c8:	021b      	lsls	r3, r3, #8
 80093ca:	461a      	mov	r2, r3
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	4313      	orrs	r3, r2
 80093d0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	f003 0301 	and.w	r3, r3, #1
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d002      	beq.n	80093e2 <get_fat+0xbc>
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	091b      	lsrs	r3, r3, #4
 80093e0:	e002      	b.n	80093e8 <get_fat+0xc2>
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80093e8:	617b      	str	r3, [r7, #20]
			break;
 80093ea:	e03f      	b.n	800946c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80093ec:	693b      	ldr	r3, [r7, #16]
 80093ee:	6a1a      	ldr	r2, [r3, #32]
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	0a1b      	lsrs	r3, r3, #8
 80093f4:	4413      	add	r3, r2
 80093f6:	4619      	mov	r1, r3
 80093f8:	6938      	ldr	r0, [r7, #16]
 80093fa:	f7ff fed9 	bl	80091b0 <move_window>
 80093fe:	4603      	mov	r3, r0
 8009400:	2b00      	cmp	r3, #0
 8009402:	d130      	bne.n	8009466 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	005b      	lsls	r3, r3, #1
 800940e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009412:	4413      	add	r3, r2
 8009414:	4618      	mov	r0, r3
 8009416:	f7ff fc1b 	bl	8008c50 <ld_word>
 800941a:	4603      	mov	r3, r0
 800941c:	617b      	str	r3, [r7, #20]
			break;
 800941e:	e025      	b.n	800946c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	6a1a      	ldr	r2, [r3, #32]
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	09db      	lsrs	r3, r3, #7
 8009428:	4413      	add	r3, r2
 800942a:	4619      	mov	r1, r3
 800942c:	6938      	ldr	r0, [r7, #16]
 800942e:	f7ff febf 	bl	80091b0 <move_window>
 8009432:	4603      	mov	r3, r0
 8009434:	2b00      	cmp	r3, #0
 8009436:	d118      	bne.n	800946a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	009b      	lsls	r3, r3, #2
 8009442:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009446:	4413      	add	r3, r2
 8009448:	4618      	mov	r0, r3
 800944a:	f7ff fc19 	bl	8008c80 <ld_dword>
 800944e:	4603      	mov	r3, r0
 8009450:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009454:	617b      	str	r3, [r7, #20]
			break;
 8009456:	e009      	b.n	800946c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009458:	2301      	movs	r3, #1
 800945a:	617b      	str	r3, [r7, #20]
 800945c:	e006      	b.n	800946c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800945e:	bf00      	nop
 8009460:	e004      	b.n	800946c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009462:	bf00      	nop
 8009464:	e002      	b.n	800946c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009466:	bf00      	nop
 8009468:	e000      	b.n	800946c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800946a:	bf00      	nop
		}
	}

	return val;
 800946c:	697b      	ldr	r3, [r7, #20]
}
 800946e:	4618      	mov	r0, r3
 8009470:	3718      	adds	r7, #24
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}

08009476 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009476:	b590      	push	{r4, r7, lr}
 8009478:	b089      	sub	sp, #36	; 0x24
 800947a:	af00      	add	r7, sp, #0
 800947c:	60f8      	str	r0, [r7, #12]
 800947e:	60b9      	str	r1, [r7, #8]
 8009480:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009482:	2302      	movs	r3, #2
 8009484:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	2b01      	cmp	r3, #1
 800948a:	f240 80d2 	bls.w	8009632 <put_fat+0x1bc>
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	695b      	ldr	r3, [r3, #20]
 8009492:	68ba      	ldr	r2, [r7, #8]
 8009494:	429a      	cmp	r2, r3
 8009496:	f080 80cc 	bcs.w	8009632 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	781b      	ldrb	r3, [r3, #0]
 800949e:	2b03      	cmp	r3, #3
 80094a0:	f000 8096 	beq.w	80095d0 <put_fat+0x15a>
 80094a4:	2b03      	cmp	r3, #3
 80094a6:	f300 80cd 	bgt.w	8009644 <put_fat+0x1ce>
 80094aa:	2b01      	cmp	r3, #1
 80094ac:	d002      	beq.n	80094b4 <put_fat+0x3e>
 80094ae:	2b02      	cmp	r3, #2
 80094b0:	d06e      	beq.n	8009590 <put_fat+0x11a>
 80094b2:	e0c7      	b.n	8009644 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	61bb      	str	r3, [r7, #24]
 80094b8:	69bb      	ldr	r3, [r7, #24]
 80094ba:	085b      	lsrs	r3, r3, #1
 80094bc:	69ba      	ldr	r2, [r7, #24]
 80094be:	4413      	add	r3, r2
 80094c0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	6a1a      	ldr	r2, [r3, #32]
 80094c6:	69bb      	ldr	r3, [r7, #24]
 80094c8:	0a5b      	lsrs	r3, r3, #9
 80094ca:	4413      	add	r3, r2
 80094cc:	4619      	mov	r1, r3
 80094ce:	68f8      	ldr	r0, [r7, #12]
 80094d0:	f7ff fe6e 	bl	80091b0 <move_window>
 80094d4:	4603      	mov	r3, r0
 80094d6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80094d8:	7ffb      	ldrb	r3, [r7, #31]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	f040 80ab 	bne.w	8009636 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80094e6:	69bb      	ldr	r3, [r7, #24]
 80094e8:	1c59      	adds	r1, r3, #1
 80094ea:	61b9      	str	r1, [r7, #24]
 80094ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094f0:	4413      	add	r3, r2
 80094f2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	f003 0301 	and.w	r3, r3, #1
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d00d      	beq.n	800951a <put_fat+0xa4>
 80094fe:	697b      	ldr	r3, [r7, #20]
 8009500:	781b      	ldrb	r3, [r3, #0]
 8009502:	b25b      	sxtb	r3, r3
 8009504:	f003 030f 	and.w	r3, r3, #15
 8009508:	b25a      	sxtb	r2, r3
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	b2db      	uxtb	r3, r3
 800950e:	011b      	lsls	r3, r3, #4
 8009510:	b25b      	sxtb	r3, r3
 8009512:	4313      	orrs	r3, r2
 8009514:	b25b      	sxtb	r3, r3
 8009516:	b2db      	uxtb	r3, r3
 8009518:	e001      	b.n	800951e <put_fat+0xa8>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	b2db      	uxtb	r3, r3
 800951e:	697a      	ldr	r2, [r7, #20]
 8009520:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	2201      	movs	r2, #1
 8009526:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	6a1a      	ldr	r2, [r3, #32]
 800952c:	69bb      	ldr	r3, [r7, #24]
 800952e:	0a5b      	lsrs	r3, r3, #9
 8009530:	4413      	add	r3, r2
 8009532:	4619      	mov	r1, r3
 8009534:	68f8      	ldr	r0, [r7, #12]
 8009536:	f7ff fe3b 	bl	80091b0 <move_window>
 800953a:	4603      	mov	r3, r0
 800953c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800953e:	7ffb      	ldrb	r3, [r7, #31]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d17a      	bne.n	800963a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800954a:	69bb      	ldr	r3, [r7, #24]
 800954c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009550:	4413      	add	r3, r2
 8009552:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	f003 0301 	and.w	r3, r3, #1
 800955a:	2b00      	cmp	r3, #0
 800955c:	d003      	beq.n	8009566 <put_fat+0xf0>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	091b      	lsrs	r3, r3, #4
 8009562:	b2db      	uxtb	r3, r3
 8009564:	e00e      	b.n	8009584 <put_fat+0x10e>
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	781b      	ldrb	r3, [r3, #0]
 800956a:	b25b      	sxtb	r3, r3
 800956c:	f023 030f 	bic.w	r3, r3, #15
 8009570:	b25a      	sxtb	r2, r3
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	0a1b      	lsrs	r3, r3, #8
 8009576:	b25b      	sxtb	r3, r3
 8009578:	f003 030f 	and.w	r3, r3, #15
 800957c:	b25b      	sxtb	r3, r3
 800957e:	4313      	orrs	r3, r2
 8009580:	b25b      	sxtb	r3, r3
 8009582:	b2db      	uxtb	r3, r3
 8009584:	697a      	ldr	r2, [r7, #20]
 8009586:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	2201      	movs	r2, #1
 800958c:	70da      	strb	r2, [r3, #3]
			break;
 800958e:	e059      	b.n	8009644 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	6a1a      	ldr	r2, [r3, #32]
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	0a1b      	lsrs	r3, r3, #8
 8009598:	4413      	add	r3, r2
 800959a:	4619      	mov	r1, r3
 800959c:	68f8      	ldr	r0, [r7, #12]
 800959e:	f7ff fe07 	bl	80091b0 <move_window>
 80095a2:	4603      	mov	r3, r0
 80095a4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80095a6:	7ffb      	ldrb	r3, [r7, #31]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d148      	bne.n	800963e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	005b      	lsls	r3, r3, #1
 80095b6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80095ba:	4413      	add	r3, r2
 80095bc:	687a      	ldr	r2, [r7, #4]
 80095be:	b292      	uxth	r2, r2
 80095c0:	4611      	mov	r1, r2
 80095c2:	4618      	mov	r0, r3
 80095c4:	f7ff fb7f 	bl	8008cc6 <st_word>
			fs->wflag = 1;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	2201      	movs	r2, #1
 80095cc:	70da      	strb	r2, [r3, #3]
			break;
 80095ce:	e039      	b.n	8009644 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	6a1a      	ldr	r2, [r3, #32]
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	09db      	lsrs	r3, r3, #7
 80095d8:	4413      	add	r3, r2
 80095da:	4619      	mov	r1, r3
 80095dc:	68f8      	ldr	r0, [r7, #12]
 80095de:	f7ff fde7 	bl	80091b0 <move_window>
 80095e2:	4603      	mov	r3, r0
 80095e4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80095e6:	7ffb      	ldrb	r3, [r7, #31]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d12a      	bne.n	8009642 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	009b      	lsls	r3, r3, #2
 80095fc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009600:	4413      	add	r3, r2
 8009602:	4618      	mov	r0, r3
 8009604:	f7ff fb3c 	bl	8008c80 <ld_dword>
 8009608:	4603      	mov	r3, r0
 800960a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800960e:	4323      	orrs	r3, r4
 8009610:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	009b      	lsls	r3, r3, #2
 800961c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009620:	4413      	add	r3, r2
 8009622:	6879      	ldr	r1, [r7, #4]
 8009624:	4618      	mov	r0, r3
 8009626:	f7ff fb69 	bl	8008cfc <st_dword>
			fs->wflag = 1;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	2201      	movs	r2, #1
 800962e:	70da      	strb	r2, [r3, #3]
			break;
 8009630:	e008      	b.n	8009644 <put_fat+0x1ce>
		}
	}
 8009632:	bf00      	nop
 8009634:	e006      	b.n	8009644 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8009636:	bf00      	nop
 8009638:	e004      	b.n	8009644 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800963a:	bf00      	nop
 800963c:	e002      	b.n	8009644 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800963e:	bf00      	nop
 8009640:	e000      	b.n	8009644 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8009642:	bf00      	nop
	return res;
 8009644:	7ffb      	ldrb	r3, [r7, #31]
}
 8009646:	4618      	mov	r0, r3
 8009648:	3724      	adds	r7, #36	; 0x24
 800964a:	46bd      	mov	sp, r7
 800964c:	bd90      	pop	{r4, r7, pc}

0800964e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800964e:	b580      	push	{r7, lr}
 8009650:	b088      	sub	sp, #32
 8009652:	af00      	add	r7, sp, #0
 8009654:	60f8      	str	r0, [r7, #12]
 8009656:	60b9      	str	r1, [r7, #8]
 8009658:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800965a:	2300      	movs	r3, #0
 800965c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	2b01      	cmp	r3, #1
 8009668:	d904      	bls.n	8009674 <remove_chain+0x26>
 800966a:	69bb      	ldr	r3, [r7, #24]
 800966c:	695b      	ldr	r3, [r3, #20]
 800966e:	68ba      	ldr	r2, [r7, #8]
 8009670:	429a      	cmp	r2, r3
 8009672:	d301      	bcc.n	8009678 <remove_chain+0x2a>
 8009674:	2302      	movs	r3, #2
 8009676:	e04b      	b.n	8009710 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d00c      	beq.n	8009698 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800967e:	f04f 32ff 	mov.w	r2, #4294967295
 8009682:	6879      	ldr	r1, [r7, #4]
 8009684:	69b8      	ldr	r0, [r7, #24]
 8009686:	f7ff fef6 	bl	8009476 <put_fat>
 800968a:	4603      	mov	r3, r0
 800968c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800968e:	7ffb      	ldrb	r3, [r7, #31]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d001      	beq.n	8009698 <remove_chain+0x4a>
 8009694:	7ffb      	ldrb	r3, [r7, #31]
 8009696:	e03b      	b.n	8009710 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009698:	68b9      	ldr	r1, [r7, #8]
 800969a:	68f8      	ldr	r0, [r7, #12]
 800969c:	f7ff fe43 	bl	8009326 <get_fat>
 80096a0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d031      	beq.n	800970c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	2b01      	cmp	r3, #1
 80096ac:	d101      	bne.n	80096b2 <remove_chain+0x64>
 80096ae:	2302      	movs	r3, #2
 80096b0:	e02e      	b.n	8009710 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096b8:	d101      	bne.n	80096be <remove_chain+0x70>
 80096ba:	2301      	movs	r3, #1
 80096bc:	e028      	b.n	8009710 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80096be:	2200      	movs	r2, #0
 80096c0:	68b9      	ldr	r1, [r7, #8]
 80096c2:	69b8      	ldr	r0, [r7, #24]
 80096c4:	f7ff fed7 	bl	8009476 <put_fat>
 80096c8:	4603      	mov	r3, r0
 80096ca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80096cc:	7ffb      	ldrb	r3, [r7, #31]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d001      	beq.n	80096d6 <remove_chain+0x88>
 80096d2:	7ffb      	ldrb	r3, [r7, #31]
 80096d4:	e01c      	b.n	8009710 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80096d6:	69bb      	ldr	r3, [r7, #24]
 80096d8:	691a      	ldr	r2, [r3, #16]
 80096da:	69bb      	ldr	r3, [r7, #24]
 80096dc:	695b      	ldr	r3, [r3, #20]
 80096de:	3b02      	subs	r3, #2
 80096e0:	429a      	cmp	r2, r3
 80096e2:	d20b      	bcs.n	80096fc <remove_chain+0xae>
			fs->free_clst++;
 80096e4:	69bb      	ldr	r3, [r7, #24]
 80096e6:	691b      	ldr	r3, [r3, #16]
 80096e8:	1c5a      	adds	r2, r3, #1
 80096ea:	69bb      	ldr	r3, [r7, #24]
 80096ec:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80096ee:	69bb      	ldr	r3, [r7, #24]
 80096f0:	791b      	ldrb	r3, [r3, #4]
 80096f2:	f043 0301 	orr.w	r3, r3, #1
 80096f6:	b2da      	uxtb	r2, r3
 80096f8:	69bb      	ldr	r3, [r7, #24]
 80096fa:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009700:	69bb      	ldr	r3, [r7, #24]
 8009702:	695b      	ldr	r3, [r3, #20]
 8009704:	68ba      	ldr	r2, [r7, #8]
 8009706:	429a      	cmp	r2, r3
 8009708:	d3c6      	bcc.n	8009698 <remove_chain+0x4a>
 800970a:	e000      	b.n	800970e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800970c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800970e:	2300      	movs	r3, #0
}
 8009710:	4618      	mov	r0, r3
 8009712:	3720      	adds	r7, #32
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}

08009718 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b088      	sub	sp, #32
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d10d      	bne.n	800974a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800972e:	693b      	ldr	r3, [r7, #16]
 8009730:	68db      	ldr	r3, [r3, #12]
 8009732:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009734:	69bb      	ldr	r3, [r7, #24]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d004      	beq.n	8009744 <create_chain+0x2c>
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	695b      	ldr	r3, [r3, #20]
 800973e:	69ba      	ldr	r2, [r7, #24]
 8009740:	429a      	cmp	r2, r3
 8009742:	d31b      	bcc.n	800977c <create_chain+0x64>
 8009744:	2301      	movs	r3, #1
 8009746:	61bb      	str	r3, [r7, #24]
 8009748:	e018      	b.n	800977c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800974a:	6839      	ldr	r1, [r7, #0]
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f7ff fdea 	bl	8009326 <get_fat>
 8009752:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	2b01      	cmp	r3, #1
 8009758:	d801      	bhi.n	800975e <create_chain+0x46>
 800975a:	2301      	movs	r3, #1
 800975c:	e070      	b.n	8009840 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009764:	d101      	bne.n	800976a <create_chain+0x52>
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	e06a      	b.n	8009840 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	695b      	ldr	r3, [r3, #20]
 800976e:	68fa      	ldr	r2, [r7, #12]
 8009770:	429a      	cmp	r2, r3
 8009772:	d201      	bcs.n	8009778 <create_chain+0x60>
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	e063      	b.n	8009840 <create_chain+0x128>
		scl = clst;
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800977c:	69bb      	ldr	r3, [r7, #24]
 800977e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009780:	69fb      	ldr	r3, [r7, #28]
 8009782:	3301      	adds	r3, #1
 8009784:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009786:	693b      	ldr	r3, [r7, #16]
 8009788:	695b      	ldr	r3, [r3, #20]
 800978a:	69fa      	ldr	r2, [r7, #28]
 800978c:	429a      	cmp	r2, r3
 800978e:	d307      	bcc.n	80097a0 <create_chain+0x88>
				ncl = 2;
 8009790:	2302      	movs	r3, #2
 8009792:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009794:	69fa      	ldr	r2, [r7, #28]
 8009796:	69bb      	ldr	r3, [r7, #24]
 8009798:	429a      	cmp	r2, r3
 800979a:	d901      	bls.n	80097a0 <create_chain+0x88>
 800979c:	2300      	movs	r3, #0
 800979e:	e04f      	b.n	8009840 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80097a0:	69f9      	ldr	r1, [r7, #28]
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f7ff fdbf 	bl	8009326 <get_fat>
 80097a8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d00e      	beq.n	80097ce <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2b01      	cmp	r3, #1
 80097b4:	d003      	beq.n	80097be <create_chain+0xa6>
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097bc:	d101      	bne.n	80097c2 <create_chain+0xaa>
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	e03e      	b.n	8009840 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80097c2:	69fa      	ldr	r2, [r7, #28]
 80097c4:	69bb      	ldr	r3, [r7, #24]
 80097c6:	429a      	cmp	r2, r3
 80097c8:	d1da      	bne.n	8009780 <create_chain+0x68>
 80097ca:	2300      	movs	r3, #0
 80097cc:	e038      	b.n	8009840 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80097ce:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80097d0:	f04f 32ff 	mov.w	r2, #4294967295
 80097d4:	69f9      	ldr	r1, [r7, #28]
 80097d6:	6938      	ldr	r0, [r7, #16]
 80097d8:	f7ff fe4d 	bl	8009476 <put_fat>
 80097dc:	4603      	mov	r3, r0
 80097de:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80097e0:	7dfb      	ldrb	r3, [r7, #23]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d109      	bne.n	80097fa <create_chain+0xe2>
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d006      	beq.n	80097fa <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80097ec:	69fa      	ldr	r2, [r7, #28]
 80097ee:	6839      	ldr	r1, [r7, #0]
 80097f0:	6938      	ldr	r0, [r7, #16]
 80097f2:	f7ff fe40 	bl	8009476 <put_fat>
 80097f6:	4603      	mov	r3, r0
 80097f8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80097fa:	7dfb      	ldrb	r3, [r7, #23]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d116      	bne.n	800982e <create_chain+0x116>
		fs->last_clst = ncl;
 8009800:	693b      	ldr	r3, [r7, #16]
 8009802:	69fa      	ldr	r2, [r7, #28]
 8009804:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	691a      	ldr	r2, [r3, #16]
 800980a:	693b      	ldr	r3, [r7, #16]
 800980c:	695b      	ldr	r3, [r3, #20]
 800980e:	3b02      	subs	r3, #2
 8009810:	429a      	cmp	r2, r3
 8009812:	d804      	bhi.n	800981e <create_chain+0x106>
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	691b      	ldr	r3, [r3, #16]
 8009818:	1e5a      	subs	r2, r3, #1
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	791b      	ldrb	r3, [r3, #4]
 8009822:	f043 0301 	orr.w	r3, r3, #1
 8009826:	b2da      	uxtb	r2, r3
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	711a      	strb	r2, [r3, #4]
 800982c:	e007      	b.n	800983e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800982e:	7dfb      	ldrb	r3, [r7, #23]
 8009830:	2b01      	cmp	r3, #1
 8009832:	d102      	bne.n	800983a <create_chain+0x122>
 8009834:	f04f 33ff 	mov.w	r3, #4294967295
 8009838:	e000      	b.n	800983c <create_chain+0x124>
 800983a:	2301      	movs	r3, #1
 800983c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800983e:	69fb      	ldr	r3, [r7, #28]
}
 8009840:	4618      	mov	r0, r3
 8009842:	3720      	adds	r7, #32
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}

08009848 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009848:	b480      	push	{r7}
 800984a:	b087      	sub	sp, #28
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800985c:	3304      	adds	r3, #4
 800985e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	0a5b      	lsrs	r3, r3, #9
 8009864:	68fa      	ldr	r2, [r7, #12]
 8009866:	8952      	ldrh	r2, [r2, #10]
 8009868:	fbb3 f3f2 	udiv	r3, r3, r2
 800986c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	1d1a      	adds	r2, r3, #4
 8009872:	613a      	str	r2, [r7, #16]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d101      	bne.n	8009882 <clmt_clust+0x3a>
 800987e:	2300      	movs	r3, #0
 8009880:	e010      	b.n	80098a4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8009882:	697a      	ldr	r2, [r7, #20]
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	429a      	cmp	r2, r3
 8009888:	d307      	bcc.n	800989a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800988a:	697a      	ldr	r2, [r7, #20]
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	1ad3      	subs	r3, r2, r3
 8009890:	617b      	str	r3, [r7, #20]
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	3304      	adds	r3, #4
 8009896:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009898:	e7e9      	b.n	800986e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800989a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800989c:	693b      	ldr	r3, [r7, #16]
 800989e:	681a      	ldr	r2, [r3, #0]
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	4413      	add	r3, r2
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	371c      	adds	r7, #28
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr

080098b0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b086      	sub	sp, #24
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
 80098b8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80098c6:	d204      	bcs.n	80098d2 <dir_sdi+0x22>
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	f003 031f 	and.w	r3, r3, #31
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d001      	beq.n	80098d6 <dir_sdi+0x26>
		return FR_INT_ERR;
 80098d2:	2302      	movs	r3, #2
 80098d4:	e063      	b.n	800999e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	683a      	ldr	r2, [r7, #0]
 80098da:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	689b      	ldr	r3, [r3, #8]
 80098e0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d106      	bne.n	80098f6 <dir_sdi+0x46>
 80098e8:	693b      	ldr	r3, [r7, #16]
 80098ea:	781b      	ldrb	r3, [r3, #0]
 80098ec:	2b02      	cmp	r3, #2
 80098ee:	d902      	bls.n	80098f6 <dir_sdi+0x46>
		clst = fs->dirbase;
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098f4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d10c      	bne.n	8009916 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	095b      	lsrs	r3, r3, #5
 8009900:	693a      	ldr	r2, [r7, #16]
 8009902:	8912      	ldrh	r2, [r2, #8]
 8009904:	4293      	cmp	r3, r2
 8009906:	d301      	bcc.n	800990c <dir_sdi+0x5c>
 8009908:	2302      	movs	r3, #2
 800990a:	e048      	b.n	800999e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800990c:	693b      	ldr	r3, [r7, #16]
 800990e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	61da      	str	r2, [r3, #28]
 8009914:	e029      	b.n	800996a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009916:	693b      	ldr	r3, [r7, #16]
 8009918:	895b      	ldrh	r3, [r3, #10]
 800991a:	025b      	lsls	r3, r3, #9
 800991c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800991e:	e019      	b.n	8009954 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6979      	ldr	r1, [r7, #20]
 8009924:	4618      	mov	r0, r3
 8009926:	f7ff fcfe 	bl	8009326 <get_fat>
 800992a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009932:	d101      	bne.n	8009938 <dir_sdi+0x88>
 8009934:	2301      	movs	r3, #1
 8009936:	e032      	b.n	800999e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	2b01      	cmp	r3, #1
 800993c:	d904      	bls.n	8009948 <dir_sdi+0x98>
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	695b      	ldr	r3, [r3, #20]
 8009942:	697a      	ldr	r2, [r7, #20]
 8009944:	429a      	cmp	r2, r3
 8009946:	d301      	bcc.n	800994c <dir_sdi+0x9c>
 8009948:	2302      	movs	r3, #2
 800994a:	e028      	b.n	800999e <dir_sdi+0xee>
			ofs -= csz;
 800994c:	683a      	ldr	r2, [r7, #0]
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	1ad3      	subs	r3, r2, r3
 8009952:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009954:	683a      	ldr	r2, [r7, #0]
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	429a      	cmp	r2, r3
 800995a:	d2e1      	bcs.n	8009920 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800995c:	6979      	ldr	r1, [r7, #20]
 800995e:	6938      	ldr	r0, [r7, #16]
 8009960:	f7ff fcc2 	bl	80092e8 <clust2sect>
 8009964:	4602      	mov	r2, r0
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	697a      	ldr	r2, [r7, #20]
 800996e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	69db      	ldr	r3, [r3, #28]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d101      	bne.n	800997c <dir_sdi+0xcc>
 8009978:	2302      	movs	r3, #2
 800997a:	e010      	b.n	800999e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	69da      	ldr	r2, [r3, #28]
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	0a5b      	lsrs	r3, r3, #9
 8009984:	441a      	add	r2, r3
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800998a:	693b      	ldr	r3, [r7, #16]
 800998c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009996:	441a      	add	r2, r3
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800999c:	2300      	movs	r3, #0
}
 800999e:	4618      	mov	r0, r3
 80099a0:	3718      	adds	r7, #24
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}

080099a6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80099a6:	b580      	push	{r7, lr}
 80099a8:	b086      	sub	sp, #24
 80099aa:	af00      	add	r7, sp, #0
 80099ac:	6078      	str	r0, [r7, #4]
 80099ae:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	695b      	ldr	r3, [r3, #20]
 80099ba:	3320      	adds	r3, #32
 80099bc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	69db      	ldr	r3, [r3, #28]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d003      	beq.n	80099ce <dir_next+0x28>
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80099cc:	d301      	bcc.n	80099d2 <dir_next+0x2c>
 80099ce:	2304      	movs	r3, #4
 80099d0:	e0aa      	b.n	8009b28 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099d8:	2b00      	cmp	r3, #0
 80099da:	f040 8098 	bne.w	8009b0e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	69db      	ldr	r3, [r3, #28]
 80099e2:	1c5a      	adds	r2, r3, #1
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	699b      	ldr	r3, [r3, #24]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d10b      	bne.n	8009a08 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	095b      	lsrs	r3, r3, #5
 80099f4:	68fa      	ldr	r2, [r7, #12]
 80099f6:	8912      	ldrh	r2, [r2, #8]
 80099f8:	4293      	cmp	r3, r2
 80099fa:	f0c0 8088 	bcc.w	8009b0e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2200      	movs	r2, #0
 8009a02:	61da      	str	r2, [r3, #28]
 8009a04:	2304      	movs	r3, #4
 8009a06:	e08f      	b.n	8009b28 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	0a5b      	lsrs	r3, r3, #9
 8009a0c:	68fa      	ldr	r2, [r7, #12]
 8009a0e:	8952      	ldrh	r2, [r2, #10]
 8009a10:	3a01      	subs	r2, #1
 8009a12:	4013      	ands	r3, r2
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d17a      	bne.n	8009b0e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009a18:	687a      	ldr	r2, [r7, #4]
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	699b      	ldr	r3, [r3, #24]
 8009a1e:	4619      	mov	r1, r3
 8009a20:	4610      	mov	r0, r2
 8009a22:	f7ff fc80 	bl	8009326 <get_fat>
 8009a26:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009a28:	697b      	ldr	r3, [r7, #20]
 8009a2a:	2b01      	cmp	r3, #1
 8009a2c:	d801      	bhi.n	8009a32 <dir_next+0x8c>
 8009a2e:	2302      	movs	r3, #2
 8009a30:	e07a      	b.n	8009b28 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a38:	d101      	bne.n	8009a3e <dir_next+0x98>
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	e074      	b.n	8009b28 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	695b      	ldr	r3, [r3, #20]
 8009a42:	697a      	ldr	r2, [r7, #20]
 8009a44:	429a      	cmp	r2, r3
 8009a46:	d358      	bcc.n	8009afa <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d104      	bne.n	8009a58 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2200      	movs	r2, #0
 8009a52:	61da      	str	r2, [r3, #28]
 8009a54:	2304      	movs	r3, #4
 8009a56:	e067      	b.n	8009b28 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009a58:	687a      	ldr	r2, [r7, #4]
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	699b      	ldr	r3, [r3, #24]
 8009a5e:	4619      	mov	r1, r3
 8009a60:	4610      	mov	r0, r2
 8009a62:	f7ff fe59 	bl	8009718 <create_chain>
 8009a66:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d101      	bne.n	8009a72 <dir_next+0xcc>
 8009a6e:	2307      	movs	r3, #7
 8009a70:	e05a      	b.n	8009b28 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009a72:	697b      	ldr	r3, [r7, #20]
 8009a74:	2b01      	cmp	r3, #1
 8009a76:	d101      	bne.n	8009a7c <dir_next+0xd6>
 8009a78:	2302      	movs	r3, #2
 8009a7a:	e055      	b.n	8009b28 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009a7c:	697b      	ldr	r3, [r7, #20]
 8009a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a82:	d101      	bne.n	8009a88 <dir_next+0xe2>
 8009a84:	2301      	movs	r3, #1
 8009a86:	e04f      	b.n	8009b28 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009a88:	68f8      	ldr	r0, [r7, #12]
 8009a8a:	f7ff fb4d 	bl	8009128 <sync_window>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d001      	beq.n	8009a98 <dir_next+0xf2>
 8009a94:	2301      	movs	r3, #1
 8009a96:	e047      	b.n	8009b28 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	3330      	adds	r3, #48	; 0x30
 8009a9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009aa0:	2100      	movs	r1, #0
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f7ff f977 	bl	8008d96 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	613b      	str	r3, [r7, #16]
 8009aac:	6979      	ldr	r1, [r7, #20]
 8009aae:	68f8      	ldr	r0, [r7, #12]
 8009ab0:	f7ff fc1a 	bl	80092e8 <clust2sect>
 8009ab4:	4602      	mov	r2, r0
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	62da      	str	r2, [r3, #44]	; 0x2c
 8009aba:	e012      	b.n	8009ae2 <dir_next+0x13c>
						fs->wflag = 1;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	2201      	movs	r2, #1
 8009ac0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009ac2:	68f8      	ldr	r0, [r7, #12]
 8009ac4:	f7ff fb30 	bl	8009128 <sync_window>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d001      	beq.n	8009ad2 <dir_next+0x12c>
 8009ace:	2301      	movs	r3, #1
 8009ad0:	e02a      	b.n	8009b28 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009ad2:	693b      	ldr	r3, [r7, #16]
 8009ad4:	3301      	adds	r3, #1
 8009ad6:	613b      	str	r3, [r7, #16]
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009adc:	1c5a      	adds	r2, r3, #1
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	62da      	str	r2, [r3, #44]	; 0x2c
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	895b      	ldrh	r3, [r3, #10]
 8009ae6:	461a      	mov	r2, r3
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d3e6      	bcc.n	8009abc <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	1ad2      	subs	r2, r2, r3
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	697a      	ldr	r2, [r7, #20]
 8009afe:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009b00:	6979      	ldr	r1, [r7, #20]
 8009b02:	68f8      	ldr	r0, [r7, #12]
 8009b04:	f7ff fbf0 	bl	80092e8 <clust2sect>
 8009b08:	4602      	mov	r2, r0
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	68ba      	ldr	r2, [r7, #8]
 8009b12:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b20:	441a      	add	r2, r3
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009b26:	2300      	movs	r3, #0
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	3718      	adds	r7, #24
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}

08009b30 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b086      	sub	sp, #24
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
 8009b38:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009b40:	2100      	movs	r1, #0
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f7ff feb4 	bl	80098b0 <dir_sdi>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009b4c:	7dfb      	ldrb	r3, [r7, #23]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d12b      	bne.n	8009baa <dir_alloc+0x7a>
		n = 0;
 8009b52:	2300      	movs	r3, #0
 8009b54:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	69db      	ldr	r3, [r3, #28]
 8009b5a:	4619      	mov	r1, r3
 8009b5c:	68f8      	ldr	r0, [r7, #12]
 8009b5e:	f7ff fb27 	bl	80091b0 <move_window>
 8009b62:	4603      	mov	r3, r0
 8009b64:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009b66:	7dfb      	ldrb	r3, [r7, #23]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d11d      	bne.n	8009ba8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6a1b      	ldr	r3, [r3, #32]
 8009b70:	781b      	ldrb	r3, [r3, #0]
 8009b72:	2be5      	cmp	r3, #229	; 0xe5
 8009b74:	d004      	beq.n	8009b80 <dir_alloc+0x50>
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6a1b      	ldr	r3, [r3, #32]
 8009b7a:	781b      	ldrb	r3, [r3, #0]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d107      	bne.n	8009b90 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009b80:	693b      	ldr	r3, [r7, #16]
 8009b82:	3301      	adds	r3, #1
 8009b84:	613b      	str	r3, [r7, #16]
 8009b86:	693a      	ldr	r2, [r7, #16]
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	429a      	cmp	r2, r3
 8009b8c:	d102      	bne.n	8009b94 <dir_alloc+0x64>
 8009b8e:	e00c      	b.n	8009baa <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009b90:	2300      	movs	r3, #0
 8009b92:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009b94:	2101      	movs	r1, #1
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f7ff ff05 	bl	80099a6 <dir_next>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009ba0:	7dfb      	ldrb	r3, [r7, #23]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d0d7      	beq.n	8009b56 <dir_alloc+0x26>
 8009ba6:	e000      	b.n	8009baa <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009ba8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009baa:	7dfb      	ldrb	r3, [r7, #23]
 8009bac:	2b04      	cmp	r3, #4
 8009bae:	d101      	bne.n	8009bb4 <dir_alloc+0x84>
 8009bb0:	2307      	movs	r3, #7
 8009bb2:	75fb      	strb	r3, [r7, #23]
	return res;
 8009bb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	3718      	adds	r7, #24
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}

08009bbe <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009bbe:	b580      	push	{r7, lr}
 8009bc0:	b084      	sub	sp, #16
 8009bc2:	af00      	add	r7, sp, #0
 8009bc4:	6078      	str	r0, [r7, #4]
 8009bc6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	331a      	adds	r3, #26
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f7ff f83f 	bl	8008c50 <ld_word>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	781b      	ldrb	r3, [r3, #0]
 8009bda:	2b03      	cmp	r3, #3
 8009bdc:	d109      	bne.n	8009bf2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	3314      	adds	r3, #20
 8009be2:	4618      	mov	r0, r3
 8009be4:	f7ff f834 	bl	8008c50 <ld_word>
 8009be8:	4603      	mov	r3, r0
 8009bea:	041b      	lsls	r3, r3, #16
 8009bec:	68fa      	ldr	r2, [r7, #12]
 8009bee:	4313      	orrs	r3, r2
 8009bf0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	3710      	adds	r7, #16
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}

08009bfc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b084      	sub	sp, #16
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	60f8      	str	r0, [r7, #12]
 8009c04:	60b9      	str	r1, [r7, #8]
 8009c06:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	331a      	adds	r3, #26
 8009c0c:	687a      	ldr	r2, [r7, #4]
 8009c0e:	b292      	uxth	r2, r2
 8009c10:	4611      	mov	r1, r2
 8009c12:	4618      	mov	r0, r3
 8009c14:	f7ff f857 	bl	8008cc6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	781b      	ldrb	r3, [r3, #0]
 8009c1c:	2b03      	cmp	r3, #3
 8009c1e:	d109      	bne.n	8009c34 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	f103 0214 	add.w	r2, r3, #20
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	0c1b      	lsrs	r3, r3, #16
 8009c2a:	b29b      	uxth	r3, r3
 8009c2c:	4619      	mov	r1, r3
 8009c2e:	4610      	mov	r0, r2
 8009c30:	f7ff f849 	bl	8008cc6 <st_word>
	}
}
 8009c34:	bf00      	nop
 8009c36:	3710      	adds	r7, #16
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bd80      	pop	{r7, pc}

08009c3c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b086      	sub	sp, #24
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009c4a:	2100      	movs	r1, #0
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	f7ff fe2f 	bl	80098b0 <dir_sdi>
 8009c52:	4603      	mov	r3, r0
 8009c54:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009c56:	7dfb      	ldrb	r3, [r7, #23]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d001      	beq.n	8009c60 <dir_find+0x24>
 8009c5c:	7dfb      	ldrb	r3, [r7, #23]
 8009c5e:	e03e      	b.n	8009cde <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	69db      	ldr	r3, [r3, #28]
 8009c64:	4619      	mov	r1, r3
 8009c66:	6938      	ldr	r0, [r7, #16]
 8009c68:	f7ff faa2 	bl	80091b0 <move_window>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009c70:	7dfb      	ldrb	r3, [r7, #23]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d12f      	bne.n	8009cd6 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6a1b      	ldr	r3, [r3, #32]
 8009c7a:	781b      	ldrb	r3, [r3, #0]
 8009c7c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009c7e:	7bfb      	ldrb	r3, [r7, #15]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d102      	bne.n	8009c8a <dir_find+0x4e>
 8009c84:	2304      	movs	r3, #4
 8009c86:	75fb      	strb	r3, [r7, #23]
 8009c88:	e028      	b.n	8009cdc <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6a1b      	ldr	r3, [r3, #32]
 8009c8e:	330b      	adds	r3, #11
 8009c90:	781b      	ldrb	r3, [r3, #0]
 8009c92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009c96:	b2da      	uxtb	r2, r3
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	6a1b      	ldr	r3, [r3, #32]
 8009ca0:	330b      	adds	r3, #11
 8009ca2:	781b      	ldrb	r3, [r3, #0]
 8009ca4:	f003 0308 	and.w	r3, r3, #8
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d10a      	bne.n	8009cc2 <dir_find+0x86>
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6a18      	ldr	r0, [r3, #32]
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	3324      	adds	r3, #36	; 0x24
 8009cb4:	220b      	movs	r2, #11
 8009cb6:	4619      	mov	r1, r3
 8009cb8:	f7ff f888 	bl	8008dcc <mem_cmp>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d00b      	beq.n	8009cda <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009cc2:	2100      	movs	r1, #0
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	f7ff fe6e 	bl	80099a6 <dir_next>
 8009cca:	4603      	mov	r3, r0
 8009ccc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009cce:	7dfb      	ldrb	r3, [r7, #23]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d0c5      	beq.n	8009c60 <dir_find+0x24>
 8009cd4:	e002      	b.n	8009cdc <dir_find+0xa0>
		if (res != FR_OK) break;
 8009cd6:	bf00      	nop
 8009cd8:	e000      	b.n	8009cdc <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009cda:	bf00      	nop

	return res;
 8009cdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3718      	adds	r7, #24
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}

08009ce6 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009ce6:	b580      	push	{r7, lr}
 8009ce8:	b084      	sub	sp, #16
 8009cea:	af00      	add	r7, sp, #0
 8009cec:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8009cf4:	2101      	movs	r1, #1
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f7ff ff1a 	bl	8009b30 <dir_alloc>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009d00:	7bfb      	ldrb	r3, [r7, #15]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d11c      	bne.n	8009d40 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	69db      	ldr	r3, [r3, #28]
 8009d0a:	4619      	mov	r1, r3
 8009d0c:	68b8      	ldr	r0, [r7, #8]
 8009d0e:	f7ff fa4f 	bl	80091b0 <move_window>
 8009d12:	4603      	mov	r3, r0
 8009d14:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009d16:	7bfb      	ldrb	r3, [r7, #15]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d111      	bne.n	8009d40 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	6a1b      	ldr	r3, [r3, #32]
 8009d20:	2220      	movs	r2, #32
 8009d22:	2100      	movs	r1, #0
 8009d24:	4618      	mov	r0, r3
 8009d26:	f7ff f836 	bl	8008d96 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6a18      	ldr	r0, [r3, #32]
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	3324      	adds	r3, #36	; 0x24
 8009d32:	220b      	movs	r2, #11
 8009d34:	4619      	mov	r1, r3
 8009d36:	f7ff f80d 	bl	8008d54 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	2201      	movs	r2, #1
 8009d3e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	3710      	adds	r7, #16
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}
	...

08009d4c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b088      	sub	sp, #32
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	60fb      	str	r3, [r7, #12]
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	3324      	adds	r3, #36	; 0x24
 8009d60:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8009d62:	220b      	movs	r2, #11
 8009d64:	2120      	movs	r1, #32
 8009d66:	68b8      	ldr	r0, [r7, #8]
 8009d68:	f7ff f815 	bl	8008d96 <mem_set>
	si = i = 0; ni = 8;
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	613b      	str	r3, [r7, #16]
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	61fb      	str	r3, [r7, #28]
 8009d74:	2308      	movs	r3, #8
 8009d76:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8009d78:	69fb      	ldr	r3, [r7, #28]
 8009d7a:	1c5a      	adds	r2, r3, #1
 8009d7c:	61fa      	str	r2, [r7, #28]
 8009d7e:	68fa      	ldr	r2, [r7, #12]
 8009d80:	4413      	add	r3, r2
 8009d82:	781b      	ldrb	r3, [r3, #0]
 8009d84:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009d86:	7efb      	ldrb	r3, [r7, #27]
 8009d88:	2b20      	cmp	r3, #32
 8009d8a:	d94e      	bls.n	8009e2a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009d8c:	7efb      	ldrb	r3, [r7, #27]
 8009d8e:	2b2f      	cmp	r3, #47	; 0x2f
 8009d90:	d006      	beq.n	8009da0 <create_name+0x54>
 8009d92:	7efb      	ldrb	r3, [r7, #27]
 8009d94:	2b5c      	cmp	r3, #92	; 0x5c
 8009d96:	d110      	bne.n	8009dba <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009d98:	e002      	b.n	8009da0 <create_name+0x54>
 8009d9a:	69fb      	ldr	r3, [r7, #28]
 8009d9c:	3301      	adds	r3, #1
 8009d9e:	61fb      	str	r3, [r7, #28]
 8009da0:	68fa      	ldr	r2, [r7, #12]
 8009da2:	69fb      	ldr	r3, [r7, #28]
 8009da4:	4413      	add	r3, r2
 8009da6:	781b      	ldrb	r3, [r3, #0]
 8009da8:	2b2f      	cmp	r3, #47	; 0x2f
 8009daa:	d0f6      	beq.n	8009d9a <create_name+0x4e>
 8009dac:	68fa      	ldr	r2, [r7, #12]
 8009dae:	69fb      	ldr	r3, [r7, #28]
 8009db0:	4413      	add	r3, r2
 8009db2:	781b      	ldrb	r3, [r3, #0]
 8009db4:	2b5c      	cmp	r3, #92	; 0x5c
 8009db6:	d0f0      	beq.n	8009d9a <create_name+0x4e>
			break;
 8009db8:	e038      	b.n	8009e2c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8009dba:	7efb      	ldrb	r3, [r7, #27]
 8009dbc:	2b2e      	cmp	r3, #46	; 0x2e
 8009dbe:	d003      	beq.n	8009dc8 <create_name+0x7c>
 8009dc0:	693a      	ldr	r2, [r7, #16]
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	429a      	cmp	r2, r3
 8009dc6:	d30c      	bcc.n	8009de2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009dc8:	697b      	ldr	r3, [r7, #20]
 8009dca:	2b0b      	cmp	r3, #11
 8009dcc:	d002      	beq.n	8009dd4 <create_name+0x88>
 8009dce:	7efb      	ldrb	r3, [r7, #27]
 8009dd0:	2b2e      	cmp	r3, #46	; 0x2e
 8009dd2:	d001      	beq.n	8009dd8 <create_name+0x8c>
 8009dd4:	2306      	movs	r3, #6
 8009dd6:	e044      	b.n	8009e62 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8009dd8:	2308      	movs	r3, #8
 8009dda:	613b      	str	r3, [r7, #16]
 8009ddc:	230b      	movs	r3, #11
 8009dde:	617b      	str	r3, [r7, #20]
			continue;
 8009de0:	e022      	b.n	8009e28 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8009de2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	da04      	bge.n	8009df4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009dea:	7efb      	ldrb	r3, [r7, #27]
 8009dec:	3b80      	subs	r3, #128	; 0x80
 8009dee:	4a1f      	ldr	r2, [pc, #124]	; (8009e6c <create_name+0x120>)
 8009df0:	5cd3      	ldrb	r3, [r2, r3]
 8009df2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8009df4:	7efb      	ldrb	r3, [r7, #27]
 8009df6:	4619      	mov	r1, r3
 8009df8:	481d      	ldr	r0, [pc, #116]	; (8009e70 <create_name+0x124>)
 8009dfa:	f7ff f80e 	bl	8008e1a <chk_chr>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d001      	beq.n	8009e08 <create_name+0xbc>
 8009e04:	2306      	movs	r3, #6
 8009e06:	e02c      	b.n	8009e62 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009e08:	7efb      	ldrb	r3, [r7, #27]
 8009e0a:	2b60      	cmp	r3, #96	; 0x60
 8009e0c:	d905      	bls.n	8009e1a <create_name+0xce>
 8009e0e:	7efb      	ldrb	r3, [r7, #27]
 8009e10:	2b7a      	cmp	r3, #122	; 0x7a
 8009e12:	d802      	bhi.n	8009e1a <create_name+0xce>
 8009e14:	7efb      	ldrb	r3, [r7, #27]
 8009e16:	3b20      	subs	r3, #32
 8009e18:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	1c5a      	adds	r2, r3, #1
 8009e1e:	613a      	str	r2, [r7, #16]
 8009e20:	68ba      	ldr	r2, [r7, #8]
 8009e22:	4413      	add	r3, r2
 8009e24:	7efa      	ldrb	r2, [r7, #27]
 8009e26:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8009e28:	e7a6      	b.n	8009d78 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009e2a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009e2c:	68fa      	ldr	r2, [r7, #12]
 8009e2e:	69fb      	ldr	r3, [r7, #28]
 8009e30:	441a      	add	r2, r3
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009e36:	693b      	ldr	r3, [r7, #16]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d101      	bne.n	8009e40 <create_name+0xf4>
 8009e3c:	2306      	movs	r3, #6
 8009e3e:	e010      	b.n	8009e62 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	781b      	ldrb	r3, [r3, #0]
 8009e44:	2be5      	cmp	r3, #229	; 0xe5
 8009e46:	d102      	bne.n	8009e4e <create_name+0x102>
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	2205      	movs	r2, #5
 8009e4c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009e4e:	7efb      	ldrb	r3, [r7, #27]
 8009e50:	2b20      	cmp	r3, #32
 8009e52:	d801      	bhi.n	8009e58 <create_name+0x10c>
 8009e54:	2204      	movs	r2, #4
 8009e56:	e000      	b.n	8009e5a <create_name+0x10e>
 8009e58:	2200      	movs	r2, #0
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	330b      	adds	r3, #11
 8009e5e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009e60:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	3720      	adds	r7, #32
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}
 8009e6a:	bf00      	nop
 8009e6c:	0800c5d4 	.word	0x0800c5d4
 8009e70:	0800c578 	.word	0x0800c578

08009e74 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b086      	sub	sp, #24
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
 8009e7c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009e82:	693b      	ldr	r3, [r7, #16]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009e88:	e002      	b.n	8009e90 <follow_path+0x1c>
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	3301      	adds	r3, #1
 8009e8e:	603b      	str	r3, [r7, #0]
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	781b      	ldrb	r3, [r3, #0]
 8009e94:	2b2f      	cmp	r3, #47	; 0x2f
 8009e96:	d0f8      	beq.n	8009e8a <follow_path+0x16>
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	781b      	ldrb	r3, [r3, #0]
 8009e9c:	2b5c      	cmp	r3, #92	; 0x5c
 8009e9e:	d0f4      	beq.n	8009e8a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	781b      	ldrb	r3, [r3, #0]
 8009eaa:	2b1f      	cmp	r3, #31
 8009eac:	d80a      	bhi.n	8009ec4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2280      	movs	r2, #128	; 0x80
 8009eb2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8009eb6:	2100      	movs	r1, #0
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f7ff fcf9 	bl	80098b0 <dir_sdi>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	75fb      	strb	r3, [r7, #23]
 8009ec2:	e043      	b.n	8009f4c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009ec4:	463b      	mov	r3, r7
 8009ec6:	4619      	mov	r1, r3
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f7ff ff3f 	bl	8009d4c <create_name>
 8009ece:	4603      	mov	r3, r0
 8009ed0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009ed2:	7dfb      	ldrb	r3, [r7, #23]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d134      	bne.n	8009f42 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f7ff feaf 	bl	8009c3c <dir_find>
 8009ede:	4603      	mov	r3, r0
 8009ee0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009ee8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009eea:	7dfb      	ldrb	r3, [r7, #23]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d00a      	beq.n	8009f06 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009ef0:	7dfb      	ldrb	r3, [r7, #23]
 8009ef2:	2b04      	cmp	r3, #4
 8009ef4:	d127      	bne.n	8009f46 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009ef6:	7afb      	ldrb	r3, [r7, #11]
 8009ef8:	f003 0304 	and.w	r3, r3, #4
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d122      	bne.n	8009f46 <follow_path+0xd2>
 8009f00:	2305      	movs	r3, #5
 8009f02:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009f04:	e01f      	b.n	8009f46 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009f06:	7afb      	ldrb	r3, [r7, #11]
 8009f08:	f003 0304 	and.w	r3, r3, #4
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d11c      	bne.n	8009f4a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009f10:	693b      	ldr	r3, [r7, #16]
 8009f12:	799b      	ldrb	r3, [r3, #6]
 8009f14:	f003 0310 	and.w	r3, r3, #16
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d102      	bne.n	8009f22 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009f1c:	2305      	movs	r3, #5
 8009f1e:	75fb      	strb	r3, [r7, #23]
 8009f20:	e014      	b.n	8009f4c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	695b      	ldr	r3, [r3, #20]
 8009f2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f30:	4413      	add	r3, r2
 8009f32:	4619      	mov	r1, r3
 8009f34:	68f8      	ldr	r0, [r7, #12]
 8009f36:	f7ff fe42 	bl	8009bbe <ld_clust>
 8009f3a:	4602      	mov	r2, r0
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009f40:	e7c0      	b.n	8009ec4 <follow_path+0x50>
			if (res != FR_OK) break;
 8009f42:	bf00      	nop
 8009f44:	e002      	b.n	8009f4c <follow_path+0xd8>
				break;
 8009f46:	bf00      	nop
 8009f48:	e000      	b.n	8009f4c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009f4a:	bf00      	nop
			}
		}
	}

	return res;
 8009f4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3718      	adds	r7, #24
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}

08009f56 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009f56:	b480      	push	{r7}
 8009f58:	b087      	sub	sp, #28
 8009f5a:	af00      	add	r7, sp, #0
 8009f5c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8009f62:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d031      	beq.n	8009fd0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	617b      	str	r3, [r7, #20]
 8009f72:	e002      	b.n	8009f7a <get_ldnumber+0x24>
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	3301      	adds	r3, #1
 8009f78:	617b      	str	r3, [r7, #20]
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	781b      	ldrb	r3, [r3, #0]
 8009f7e:	2b20      	cmp	r3, #32
 8009f80:	d903      	bls.n	8009f8a <get_ldnumber+0x34>
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	781b      	ldrb	r3, [r3, #0]
 8009f86:	2b3a      	cmp	r3, #58	; 0x3a
 8009f88:	d1f4      	bne.n	8009f74 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	781b      	ldrb	r3, [r3, #0]
 8009f8e:	2b3a      	cmp	r3, #58	; 0x3a
 8009f90:	d11c      	bne.n	8009fcc <get_ldnumber+0x76>
			tp = *path;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	1c5a      	adds	r2, r3, #1
 8009f9c:	60fa      	str	r2, [r7, #12]
 8009f9e:	781b      	ldrb	r3, [r3, #0]
 8009fa0:	3b30      	subs	r3, #48	; 0x30
 8009fa2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	2b09      	cmp	r3, #9
 8009fa8:	d80e      	bhi.n	8009fc8 <get_ldnumber+0x72>
 8009faa:	68fa      	ldr	r2, [r7, #12]
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	d10a      	bne.n	8009fc8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d107      	bne.n	8009fc8 <get_ldnumber+0x72>
					vol = (int)i;
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009fbc:	697b      	ldr	r3, [r7, #20]
 8009fbe:	3301      	adds	r3, #1
 8009fc0:	617b      	str	r3, [r7, #20]
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	697a      	ldr	r2, [r7, #20]
 8009fc6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	e002      	b.n	8009fd2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009fcc:	2300      	movs	r3, #0
 8009fce:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009fd0:	693b      	ldr	r3, [r7, #16]
}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	371c      	adds	r7, #28
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fdc:	4770      	bx	lr
	...

08009fe0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b082      	sub	sp, #8
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
 8009fe8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2200      	movs	r2, #0
 8009fee:	70da      	strb	r2, [r3, #3]
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f04f 32ff 	mov.w	r2, #4294967295
 8009ff6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009ff8:	6839      	ldr	r1, [r7, #0]
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f7ff f8d8 	bl	80091b0 <move_window>
 800a000:	4603      	mov	r3, r0
 800a002:	2b00      	cmp	r3, #0
 800a004:	d001      	beq.n	800a00a <check_fs+0x2a>
 800a006:	2304      	movs	r3, #4
 800a008:	e038      	b.n	800a07c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	3330      	adds	r3, #48	; 0x30
 800a00e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a012:	4618      	mov	r0, r3
 800a014:	f7fe fe1c 	bl	8008c50 <ld_word>
 800a018:	4603      	mov	r3, r0
 800a01a:	461a      	mov	r2, r3
 800a01c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a020:	429a      	cmp	r2, r3
 800a022:	d001      	beq.n	800a028 <check_fs+0x48>
 800a024:	2303      	movs	r3, #3
 800a026:	e029      	b.n	800a07c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a02e:	2be9      	cmp	r3, #233	; 0xe9
 800a030:	d009      	beq.n	800a046 <check_fs+0x66>
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a038:	2beb      	cmp	r3, #235	; 0xeb
 800a03a:	d11e      	bne.n	800a07a <check_fs+0x9a>
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a042:	2b90      	cmp	r3, #144	; 0x90
 800a044:	d119      	bne.n	800a07a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	3330      	adds	r3, #48	; 0x30
 800a04a:	3336      	adds	r3, #54	; 0x36
 800a04c:	4618      	mov	r0, r3
 800a04e:	f7fe fe17 	bl	8008c80 <ld_dword>
 800a052:	4603      	mov	r3, r0
 800a054:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a058:	4a0a      	ldr	r2, [pc, #40]	; (800a084 <check_fs+0xa4>)
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d101      	bne.n	800a062 <check_fs+0x82>
 800a05e:	2300      	movs	r3, #0
 800a060:	e00c      	b.n	800a07c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	3330      	adds	r3, #48	; 0x30
 800a066:	3352      	adds	r3, #82	; 0x52
 800a068:	4618      	mov	r0, r3
 800a06a:	f7fe fe09 	bl	8008c80 <ld_dword>
 800a06e:	4603      	mov	r3, r0
 800a070:	4a05      	ldr	r2, [pc, #20]	; (800a088 <check_fs+0xa8>)
 800a072:	4293      	cmp	r3, r2
 800a074:	d101      	bne.n	800a07a <check_fs+0x9a>
 800a076:	2300      	movs	r3, #0
 800a078:	e000      	b.n	800a07c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a07a:	2302      	movs	r3, #2
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3708      	adds	r7, #8
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}
 800a084:	00544146 	.word	0x00544146
 800a088:	33544146 	.word	0x33544146

0800a08c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b096      	sub	sp, #88	; 0x58
 800a090:	af00      	add	r7, sp, #0
 800a092:	60f8      	str	r0, [r7, #12]
 800a094:	60b9      	str	r1, [r7, #8]
 800a096:	4613      	mov	r3, r2
 800a098:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	2200      	movs	r2, #0
 800a09e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a0a0:	68f8      	ldr	r0, [r7, #12]
 800a0a2:	f7ff ff58 	bl	8009f56 <get_ldnumber>
 800a0a6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a0a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	da01      	bge.n	800a0b2 <find_volume+0x26>
 800a0ae:	230b      	movs	r3, #11
 800a0b0:	e22e      	b.n	800a510 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a0b2:	4aa8      	ldr	r2, [pc, #672]	; (800a354 <find_volume+0x2c8>)
 800a0b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a0ba:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a0bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d101      	bne.n	800a0c6 <find_volume+0x3a>
 800a0c2:	230c      	movs	r3, #12
 800a0c4:	e224      	b.n	800a510 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a0c6:	68bb      	ldr	r3, [r7, #8]
 800a0c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a0ca:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a0cc:	79fb      	ldrb	r3, [r7, #7]
 800a0ce:	f023 0301 	bic.w	r3, r3, #1
 800a0d2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a0d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0d6:	781b      	ldrb	r3, [r3, #0]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d01a      	beq.n	800a112 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800a0dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0de:	785b      	ldrb	r3, [r3, #1]
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	f7fe fd17 	bl	8008b14 <disk_status>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a0ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a0f0:	f003 0301 	and.w	r3, r3, #1
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d10c      	bne.n	800a112 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a0f8:	79fb      	ldrb	r3, [r7, #7]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d007      	beq.n	800a10e <find_volume+0x82>
 800a0fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a102:	f003 0304 	and.w	r3, r3, #4
 800a106:	2b00      	cmp	r3, #0
 800a108:	d001      	beq.n	800a10e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a10a:	230a      	movs	r3, #10
 800a10c:	e200      	b.n	800a510 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800a10e:	2300      	movs	r3, #0
 800a110:	e1fe      	b.n	800a510 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a114:	2200      	movs	r2, #0
 800a116:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a11a:	b2da      	uxtb	r2, r3
 800a11c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a11e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a122:	785b      	ldrb	r3, [r3, #1]
 800a124:	4618      	mov	r0, r3
 800a126:	f7fe fd0f 	bl	8008b48 <disk_initialize>
 800a12a:	4603      	mov	r3, r0
 800a12c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a130:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a134:	f003 0301 	and.w	r3, r3, #1
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d001      	beq.n	800a140 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a13c:	2303      	movs	r3, #3
 800a13e:	e1e7      	b.n	800a510 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a140:	79fb      	ldrb	r3, [r7, #7]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d007      	beq.n	800a156 <find_volume+0xca>
 800a146:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a14a:	f003 0304 	and.w	r3, r3, #4
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d001      	beq.n	800a156 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800a152:	230a      	movs	r3, #10
 800a154:	e1dc      	b.n	800a510 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a156:	2300      	movs	r3, #0
 800a158:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a15a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a15c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a15e:	f7ff ff3f 	bl	8009fe0 <check_fs>
 800a162:	4603      	mov	r3, r0
 800a164:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a168:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a16c:	2b02      	cmp	r3, #2
 800a16e:	d14b      	bne.n	800a208 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a170:	2300      	movs	r3, #0
 800a172:	643b      	str	r3, [r7, #64]	; 0x40
 800a174:	e01f      	b.n	800a1b6 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a178:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a17c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a17e:	011b      	lsls	r3, r3, #4
 800a180:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a184:	4413      	add	r3, r2
 800a186:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a18a:	3304      	adds	r3, #4
 800a18c:	781b      	ldrb	r3, [r3, #0]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d006      	beq.n	800a1a0 <find_volume+0x114>
 800a192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a194:	3308      	adds	r3, #8
 800a196:	4618      	mov	r0, r3
 800a198:	f7fe fd72 	bl	8008c80 <ld_dword>
 800a19c:	4602      	mov	r2, r0
 800a19e:	e000      	b.n	800a1a2 <find_volume+0x116>
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1a4:	009b      	lsls	r3, r3, #2
 800a1a6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800a1aa:	440b      	add	r3, r1
 800a1ac:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a1b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1b2:	3301      	adds	r3, #1
 800a1b4:	643b      	str	r3, [r7, #64]	; 0x40
 800a1b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1b8:	2b03      	cmp	r3, #3
 800a1ba:	d9dc      	bls.n	800a176 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a1bc:	2300      	movs	r3, #0
 800a1be:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a1c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d002      	beq.n	800a1cc <find_volume+0x140>
 800a1c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1c8:	3b01      	subs	r3, #1
 800a1ca:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a1cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1ce:	009b      	lsls	r3, r3, #2
 800a1d0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a1d4:	4413      	add	r3, r2
 800a1d6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a1da:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a1dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d005      	beq.n	800a1ee <find_volume+0x162>
 800a1e2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a1e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a1e6:	f7ff fefb 	bl	8009fe0 <check_fs>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	e000      	b.n	800a1f0 <find_volume+0x164>
 800a1ee:	2303      	movs	r3, #3
 800a1f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a1f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a1f8:	2b01      	cmp	r3, #1
 800a1fa:	d905      	bls.n	800a208 <find_volume+0x17c>
 800a1fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1fe:	3301      	adds	r3, #1
 800a200:	643b      	str	r3, [r7, #64]	; 0x40
 800a202:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a204:	2b03      	cmp	r3, #3
 800a206:	d9e1      	bls.n	800a1cc <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a208:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a20c:	2b04      	cmp	r3, #4
 800a20e:	d101      	bne.n	800a214 <find_volume+0x188>
 800a210:	2301      	movs	r3, #1
 800a212:	e17d      	b.n	800a510 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a214:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a218:	2b01      	cmp	r3, #1
 800a21a:	d901      	bls.n	800a220 <find_volume+0x194>
 800a21c:	230d      	movs	r3, #13
 800a21e:	e177      	b.n	800a510 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a222:	3330      	adds	r3, #48	; 0x30
 800a224:	330b      	adds	r3, #11
 800a226:	4618      	mov	r0, r3
 800a228:	f7fe fd12 	bl	8008c50 <ld_word>
 800a22c:	4603      	mov	r3, r0
 800a22e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a232:	d001      	beq.n	800a238 <find_volume+0x1ac>
 800a234:	230d      	movs	r3, #13
 800a236:	e16b      	b.n	800a510 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a23a:	3330      	adds	r3, #48	; 0x30
 800a23c:	3316      	adds	r3, #22
 800a23e:	4618      	mov	r0, r3
 800a240:	f7fe fd06 	bl	8008c50 <ld_word>
 800a244:	4603      	mov	r3, r0
 800a246:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a248:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d106      	bne.n	800a25c <find_volume+0x1d0>
 800a24e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a250:	3330      	adds	r3, #48	; 0x30
 800a252:	3324      	adds	r3, #36	; 0x24
 800a254:	4618      	mov	r0, r3
 800a256:	f7fe fd13 	bl	8008c80 <ld_dword>
 800a25a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a25c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a25e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a260:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a264:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800a268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a26a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a26c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a26e:	789b      	ldrb	r3, [r3, #2]
 800a270:	2b01      	cmp	r3, #1
 800a272:	d005      	beq.n	800a280 <find_volume+0x1f4>
 800a274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a276:	789b      	ldrb	r3, [r3, #2]
 800a278:	2b02      	cmp	r3, #2
 800a27a:	d001      	beq.n	800a280 <find_volume+0x1f4>
 800a27c:	230d      	movs	r3, #13
 800a27e:	e147      	b.n	800a510 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a282:	789b      	ldrb	r3, [r3, #2]
 800a284:	461a      	mov	r2, r3
 800a286:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a288:	fb02 f303 	mul.w	r3, r2, r3
 800a28c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a28e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a290:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a294:	b29a      	uxth	r2, r3
 800a296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a298:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a29a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a29c:	895b      	ldrh	r3, [r3, #10]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d008      	beq.n	800a2b4 <find_volume+0x228>
 800a2a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2a4:	895b      	ldrh	r3, [r3, #10]
 800a2a6:	461a      	mov	r2, r3
 800a2a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2aa:	895b      	ldrh	r3, [r3, #10]
 800a2ac:	3b01      	subs	r3, #1
 800a2ae:	4013      	ands	r3, r2
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d001      	beq.n	800a2b8 <find_volume+0x22c>
 800a2b4:	230d      	movs	r3, #13
 800a2b6:	e12b      	b.n	800a510 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ba:	3330      	adds	r3, #48	; 0x30
 800a2bc:	3311      	adds	r3, #17
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f7fe fcc6 	bl	8008c50 <ld_word>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	461a      	mov	r2, r3
 800a2c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ca:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a2cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ce:	891b      	ldrh	r3, [r3, #8]
 800a2d0:	f003 030f 	and.w	r3, r3, #15
 800a2d4:	b29b      	uxth	r3, r3
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d001      	beq.n	800a2de <find_volume+0x252>
 800a2da:	230d      	movs	r3, #13
 800a2dc:	e118      	b.n	800a510 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a2de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2e0:	3330      	adds	r3, #48	; 0x30
 800a2e2:	3313      	adds	r3, #19
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f7fe fcb3 	bl	8008c50 <ld_word>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a2ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d106      	bne.n	800a302 <find_volume+0x276>
 800a2f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2f6:	3330      	adds	r3, #48	; 0x30
 800a2f8:	3320      	adds	r3, #32
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f7fe fcc0 	bl	8008c80 <ld_dword>
 800a300:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a304:	3330      	adds	r3, #48	; 0x30
 800a306:	330e      	adds	r3, #14
 800a308:	4618      	mov	r0, r3
 800a30a:	f7fe fca1 	bl	8008c50 <ld_word>
 800a30e:	4603      	mov	r3, r0
 800a310:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a312:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a314:	2b00      	cmp	r3, #0
 800a316:	d101      	bne.n	800a31c <find_volume+0x290>
 800a318:	230d      	movs	r3, #13
 800a31a:	e0f9      	b.n	800a510 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a31c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a31e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a320:	4413      	add	r3, r2
 800a322:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a324:	8912      	ldrh	r2, [r2, #8]
 800a326:	0912      	lsrs	r2, r2, #4
 800a328:	b292      	uxth	r2, r2
 800a32a:	4413      	add	r3, r2
 800a32c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a32e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a332:	429a      	cmp	r2, r3
 800a334:	d201      	bcs.n	800a33a <find_volume+0x2ae>
 800a336:	230d      	movs	r3, #13
 800a338:	e0ea      	b.n	800a510 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a33a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a33e:	1ad3      	subs	r3, r2, r3
 800a340:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a342:	8952      	ldrh	r2, [r2, #10]
 800a344:	fbb3 f3f2 	udiv	r3, r3, r2
 800a348:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d103      	bne.n	800a358 <find_volume+0x2cc>
 800a350:	230d      	movs	r3, #13
 800a352:	e0dd      	b.n	800a510 <find_volume+0x484>
 800a354:	200001cc 	.word	0x200001cc
		fmt = FS_FAT32;
 800a358:	2303      	movs	r3, #3
 800a35a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a35e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a360:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a364:	4293      	cmp	r3, r2
 800a366:	d802      	bhi.n	800a36e <find_volume+0x2e2>
 800a368:	2302      	movs	r3, #2
 800a36a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a36e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a370:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a374:	4293      	cmp	r3, r2
 800a376:	d802      	bhi.n	800a37e <find_volume+0x2f2>
 800a378:	2301      	movs	r3, #1
 800a37a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a37e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a380:	1c9a      	adds	r2, r3, #2
 800a382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a384:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800a386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a388:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a38a:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a38c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a38e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a390:	441a      	add	r2, r3
 800a392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a394:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800a396:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a39a:	441a      	add	r2, r3
 800a39c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a39e:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800a3a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a3a4:	2b03      	cmp	r3, #3
 800a3a6:	d11e      	bne.n	800a3e6 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a3a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3aa:	3330      	adds	r3, #48	; 0x30
 800a3ac:	332a      	adds	r3, #42	; 0x2a
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	f7fe fc4e 	bl	8008c50 <ld_word>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d001      	beq.n	800a3be <find_volume+0x332>
 800a3ba:	230d      	movs	r3, #13
 800a3bc:	e0a8      	b.n	800a510 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a3be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3c0:	891b      	ldrh	r3, [r3, #8]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d001      	beq.n	800a3ca <find_volume+0x33e>
 800a3c6:	230d      	movs	r3, #13
 800a3c8:	e0a2      	b.n	800a510 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a3ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3cc:	3330      	adds	r3, #48	; 0x30
 800a3ce:	332c      	adds	r3, #44	; 0x2c
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f7fe fc55 	bl	8008c80 <ld_dword>
 800a3d6:	4602      	mov	r2, r0
 800a3d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3da:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a3dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3de:	695b      	ldr	r3, [r3, #20]
 800a3e0:	009b      	lsls	r3, r3, #2
 800a3e2:	647b      	str	r3, [r7, #68]	; 0x44
 800a3e4:	e01f      	b.n	800a426 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a3e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3e8:	891b      	ldrh	r3, [r3, #8]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d101      	bne.n	800a3f2 <find_volume+0x366>
 800a3ee:	230d      	movs	r3, #13
 800a3f0:	e08e      	b.n	800a510 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a3f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3f4:	6a1a      	ldr	r2, [r3, #32]
 800a3f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3f8:	441a      	add	r2, r3
 800a3fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3fc:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a3fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a402:	2b02      	cmp	r3, #2
 800a404:	d103      	bne.n	800a40e <find_volume+0x382>
 800a406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a408:	695b      	ldr	r3, [r3, #20]
 800a40a:	005b      	lsls	r3, r3, #1
 800a40c:	e00a      	b.n	800a424 <find_volume+0x398>
 800a40e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a410:	695a      	ldr	r2, [r3, #20]
 800a412:	4613      	mov	r3, r2
 800a414:	005b      	lsls	r3, r3, #1
 800a416:	4413      	add	r3, r2
 800a418:	085a      	lsrs	r2, r3, #1
 800a41a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a41c:	695b      	ldr	r3, [r3, #20]
 800a41e:	f003 0301 	and.w	r3, r3, #1
 800a422:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a424:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a428:	699a      	ldr	r2, [r3, #24]
 800a42a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a42c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a430:	0a5b      	lsrs	r3, r3, #9
 800a432:	429a      	cmp	r2, r3
 800a434:	d201      	bcs.n	800a43a <find_volume+0x3ae>
 800a436:	230d      	movs	r3, #13
 800a438:	e06a      	b.n	800a510 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a43a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a43c:	f04f 32ff 	mov.w	r2, #4294967295
 800a440:	611a      	str	r2, [r3, #16]
 800a442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a444:	691a      	ldr	r2, [r3, #16]
 800a446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a448:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800a44a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a44c:	2280      	movs	r2, #128	; 0x80
 800a44e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a450:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a454:	2b03      	cmp	r3, #3
 800a456:	d149      	bne.n	800a4ec <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a45a:	3330      	adds	r3, #48	; 0x30
 800a45c:	3330      	adds	r3, #48	; 0x30
 800a45e:	4618      	mov	r0, r3
 800a460:	f7fe fbf6 	bl	8008c50 <ld_word>
 800a464:	4603      	mov	r3, r0
 800a466:	2b01      	cmp	r3, #1
 800a468:	d140      	bne.n	800a4ec <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a46a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a46c:	3301      	adds	r3, #1
 800a46e:	4619      	mov	r1, r3
 800a470:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a472:	f7fe fe9d 	bl	80091b0 <move_window>
 800a476:	4603      	mov	r3, r0
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d137      	bne.n	800a4ec <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800a47c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a47e:	2200      	movs	r2, #0
 800a480:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a484:	3330      	adds	r3, #48	; 0x30
 800a486:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a48a:	4618      	mov	r0, r3
 800a48c:	f7fe fbe0 	bl	8008c50 <ld_word>
 800a490:	4603      	mov	r3, r0
 800a492:	461a      	mov	r2, r3
 800a494:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a498:	429a      	cmp	r2, r3
 800a49a:	d127      	bne.n	800a4ec <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a49c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a49e:	3330      	adds	r3, #48	; 0x30
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	f7fe fbed 	bl	8008c80 <ld_dword>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	4a1b      	ldr	r2, [pc, #108]	; (800a518 <find_volume+0x48c>)
 800a4aa:	4293      	cmp	r3, r2
 800a4ac:	d11e      	bne.n	800a4ec <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a4ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b0:	3330      	adds	r3, #48	; 0x30
 800a4b2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f7fe fbe2 	bl	8008c80 <ld_dword>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	4a17      	ldr	r2, [pc, #92]	; (800a51c <find_volume+0x490>)
 800a4c0:	4293      	cmp	r3, r2
 800a4c2:	d113      	bne.n	800a4ec <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a4c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4c6:	3330      	adds	r3, #48	; 0x30
 800a4c8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f7fe fbd7 	bl	8008c80 <ld_dword>
 800a4d2:	4602      	mov	r2, r0
 800a4d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4d6:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a4d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4da:	3330      	adds	r3, #48	; 0x30
 800a4dc:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f7fe fbcd 	bl	8008c80 <ld_dword>
 800a4e6:	4602      	mov	r2, r0
 800a4e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ea:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a4ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ee:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a4f2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a4f4:	4b0a      	ldr	r3, [pc, #40]	; (800a520 <find_volume+0x494>)
 800a4f6:	881b      	ldrh	r3, [r3, #0]
 800a4f8:	3301      	adds	r3, #1
 800a4fa:	b29a      	uxth	r2, r3
 800a4fc:	4b08      	ldr	r3, [pc, #32]	; (800a520 <find_volume+0x494>)
 800a4fe:	801a      	strh	r2, [r3, #0]
 800a500:	4b07      	ldr	r3, [pc, #28]	; (800a520 <find_volume+0x494>)
 800a502:	881a      	ldrh	r2, [r3, #0]
 800a504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a506:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a508:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a50a:	f7fe fde9 	bl	80090e0 <clear_lock>
#endif
	return FR_OK;
 800a50e:	2300      	movs	r3, #0
}
 800a510:	4618      	mov	r0, r3
 800a512:	3758      	adds	r7, #88	; 0x58
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}
 800a518:	41615252 	.word	0x41615252
 800a51c:	61417272 	.word	0x61417272
 800a520:	200001d0 	.word	0x200001d0

0800a524 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b084      	sub	sp, #16
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
 800a52c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a52e:	2309      	movs	r3, #9
 800a530:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d01c      	beq.n	800a572 <validate+0x4e>
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d018      	beq.n	800a572 <validate+0x4e>
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	781b      	ldrb	r3, [r3, #0]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d013      	beq.n	800a572 <validate+0x4e>
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	889a      	ldrh	r2, [r3, #4]
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	88db      	ldrh	r3, [r3, #6]
 800a554:	429a      	cmp	r2, r3
 800a556:	d10c      	bne.n	800a572 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	785b      	ldrb	r3, [r3, #1]
 800a55e:	4618      	mov	r0, r3
 800a560:	f7fe fad8 	bl	8008b14 <disk_status>
 800a564:	4603      	mov	r3, r0
 800a566:	f003 0301 	and.w	r3, r3, #1
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d101      	bne.n	800a572 <validate+0x4e>
			res = FR_OK;
 800a56e:	2300      	movs	r3, #0
 800a570:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a572:	7bfb      	ldrb	r3, [r7, #15]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d102      	bne.n	800a57e <validate+0x5a>
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	e000      	b.n	800a580 <validate+0x5c>
 800a57e:	2300      	movs	r3, #0
 800a580:	683a      	ldr	r2, [r7, #0]
 800a582:	6013      	str	r3, [r2, #0]
	return res;
 800a584:	7bfb      	ldrb	r3, [r7, #15]
}
 800a586:	4618      	mov	r0, r3
 800a588:	3710      	adds	r7, #16
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}
	...

0800a590 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b088      	sub	sp, #32
 800a594:	af00      	add	r7, sp, #0
 800a596:	60f8      	str	r0, [r7, #12]
 800a598:	60b9      	str	r1, [r7, #8]
 800a59a:	4613      	mov	r3, r2
 800a59c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a5a2:	f107 0310 	add.w	r3, r7, #16
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f7ff fcd5 	bl	8009f56 <get_ldnumber>
 800a5ac:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a5ae:	69fb      	ldr	r3, [r7, #28]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	da01      	bge.n	800a5b8 <f_mount+0x28>
 800a5b4:	230b      	movs	r3, #11
 800a5b6:	e02b      	b.n	800a610 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a5b8:	4a17      	ldr	r2, [pc, #92]	; (800a618 <f_mount+0x88>)
 800a5ba:	69fb      	ldr	r3, [r7, #28]
 800a5bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a5c0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a5c2:	69bb      	ldr	r3, [r7, #24]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d005      	beq.n	800a5d4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a5c8:	69b8      	ldr	r0, [r7, #24]
 800a5ca:	f7fe fd89 	bl	80090e0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a5ce:	69bb      	ldr	r3, [r7, #24]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d002      	beq.n	800a5e0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a5e0:	68fa      	ldr	r2, [r7, #12]
 800a5e2:	490d      	ldr	r1, [pc, #52]	; (800a618 <f_mount+0x88>)
 800a5e4:	69fb      	ldr	r3, [r7, #28]
 800a5e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d002      	beq.n	800a5f6 <f_mount+0x66>
 800a5f0:	79fb      	ldrb	r3, [r7, #7]
 800a5f2:	2b01      	cmp	r3, #1
 800a5f4:	d001      	beq.n	800a5fa <f_mount+0x6a>
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	e00a      	b.n	800a610 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a5fa:	f107 010c 	add.w	r1, r7, #12
 800a5fe:	f107 0308 	add.w	r3, r7, #8
 800a602:	2200      	movs	r2, #0
 800a604:	4618      	mov	r0, r3
 800a606:	f7ff fd41 	bl	800a08c <find_volume>
 800a60a:	4603      	mov	r3, r0
 800a60c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a60e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a610:	4618      	mov	r0, r3
 800a612:	3720      	adds	r7, #32
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}
 800a618:	200001cc 	.word	0x200001cc

0800a61c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b098      	sub	sp, #96	; 0x60
 800a620:	af00      	add	r7, sp, #0
 800a622:	60f8      	str	r0, [r7, #12]
 800a624:	60b9      	str	r1, [r7, #8]
 800a626:	4613      	mov	r3, r2
 800a628:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d101      	bne.n	800a634 <f_open+0x18>
 800a630:	2309      	movs	r3, #9
 800a632:	e1ad      	b.n	800a990 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a634:	79fb      	ldrb	r3, [r7, #7]
 800a636:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a63a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a63c:	79fa      	ldrb	r2, [r7, #7]
 800a63e:	f107 0110 	add.w	r1, r7, #16
 800a642:	f107 0308 	add.w	r3, r7, #8
 800a646:	4618      	mov	r0, r3
 800a648:	f7ff fd20 	bl	800a08c <find_volume>
 800a64c:	4603      	mov	r3, r0
 800a64e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800a652:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a656:	2b00      	cmp	r3, #0
 800a658:	f040 8191 	bne.w	800a97e <f_open+0x362>
		dj.obj.fs = fs;
 800a65c:	693b      	ldr	r3, [r7, #16]
 800a65e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a660:	68ba      	ldr	r2, [r7, #8]
 800a662:	f107 0314 	add.w	r3, r7, #20
 800a666:	4611      	mov	r1, r2
 800a668:	4618      	mov	r0, r3
 800a66a:	f7ff fc03 	bl	8009e74 <follow_path>
 800a66e:	4603      	mov	r3, r0
 800a670:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a674:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d11a      	bne.n	800a6b2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a67c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a680:	b25b      	sxtb	r3, r3
 800a682:	2b00      	cmp	r3, #0
 800a684:	da03      	bge.n	800a68e <f_open+0x72>
				res = FR_INVALID_NAME;
 800a686:	2306      	movs	r3, #6
 800a688:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a68c:	e011      	b.n	800a6b2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a68e:	79fb      	ldrb	r3, [r7, #7]
 800a690:	f023 0301 	bic.w	r3, r3, #1
 800a694:	2b00      	cmp	r3, #0
 800a696:	bf14      	ite	ne
 800a698:	2301      	movne	r3, #1
 800a69a:	2300      	moveq	r3, #0
 800a69c:	b2db      	uxtb	r3, r3
 800a69e:	461a      	mov	r2, r3
 800a6a0:	f107 0314 	add.w	r3, r7, #20
 800a6a4:	4611      	mov	r1, r2
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f7fe fbd2 	bl	8008e50 <chk_lock>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a6b2:	79fb      	ldrb	r3, [r7, #7]
 800a6b4:	f003 031c 	and.w	r3, r3, #28
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d07f      	beq.n	800a7bc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800a6bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d017      	beq.n	800a6f4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a6c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a6c8:	2b04      	cmp	r3, #4
 800a6ca:	d10e      	bne.n	800a6ea <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a6cc:	f7fe fc1c 	bl	8008f08 <enq_lock>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d006      	beq.n	800a6e4 <f_open+0xc8>
 800a6d6:	f107 0314 	add.w	r3, r7, #20
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f7ff fb03 	bl	8009ce6 <dir_register>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	e000      	b.n	800a6e6 <f_open+0xca>
 800a6e4:	2312      	movs	r3, #18
 800a6e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a6ea:	79fb      	ldrb	r3, [r7, #7]
 800a6ec:	f043 0308 	orr.w	r3, r3, #8
 800a6f0:	71fb      	strb	r3, [r7, #7]
 800a6f2:	e010      	b.n	800a716 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a6f4:	7ebb      	ldrb	r3, [r7, #26]
 800a6f6:	f003 0311 	and.w	r3, r3, #17
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d003      	beq.n	800a706 <f_open+0xea>
					res = FR_DENIED;
 800a6fe:	2307      	movs	r3, #7
 800a700:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a704:	e007      	b.n	800a716 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a706:	79fb      	ldrb	r3, [r7, #7]
 800a708:	f003 0304 	and.w	r3, r3, #4
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d002      	beq.n	800a716 <f_open+0xfa>
 800a710:	2308      	movs	r3, #8
 800a712:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a716:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d168      	bne.n	800a7f0 <f_open+0x1d4>
 800a71e:	79fb      	ldrb	r3, [r7, #7]
 800a720:	f003 0308 	and.w	r3, r3, #8
 800a724:	2b00      	cmp	r3, #0
 800a726:	d063      	beq.n	800a7f0 <f_open+0x1d4>
				dw = GET_FATTIME();
 800a728:	f7fb fdc2 	bl	80062b0 <get_fattime>
 800a72c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a72e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a730:	330e      	adds	r3, #14
 800a732:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a734:	4618      	mov	r0, r3
 800a736:	f7fe fae1 	bl	8008cfc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a73a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a73c:	3316      	adds	r3, #22
 800a73e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a740:	4618      	mov	r0, r3
 800a742:	f7fe fadb 	bl	8008cfc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a748:	330b      	adds	r3, #11
 800a74a:	2220      	movs	r2, #32
 800a74c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a74e:	693b      	ldr	r3, [r7, #16]
 800a750:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a752:	4611      	mov	r1, r2
 800a754:	4618      	mov	r0, r3
 800a756:	f7ff fa32 	bl	8009bbe <ld_clust>
 800a75a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a760:	2200      	movs	r2, #0
 800a762:	4618      	mov	r0, r3
 800a764:	f7ff fa4a 	bl	8009bfc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a76a:	331c      	adds	r3, #28
 800a76c:	2100      	movs	r1, #0
 800a76e:	4618      	mov	r0, r3
 800a770:	f7fe fac4 	bl	8008cfc <st_dword>
					fs->wflag = 1;
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	2201      	movs	r2, #1
 800a778:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a77a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d037      	beq.n	800a7f0 <f_open+0x1d4>
						dw = fs->winsect;
 800a780:	693b      	ldr	r3, [r7, #16]
 800a782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a784:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800a786:	f107 0314 	add.w	r3, r7, #20
 800a78a:	2200      	movs	r2, #0
 800a78c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a78e:	4618      	mov	r0, r3
 800a790:	f7fe ff5d 	bl	800964e <remove_chain>
 800a794:	4603      	mov	r3, r0
 800a796:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800a79a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d126      	bne.n	800a7f0 <f_open+0x1d4>
							res = move_window(fs, dw);
 800a7a2:	693b      	ldr	r3, [r7, #16]
 800a7a4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f7fe fd02 	bl	80091b0 <move_window>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a7b2:	693b      	ldr	r3, [r7, #16]
 800a7b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a7b6:	3a01      	subs	r2, #1
 800a7b8:	60da      	str	r2, [r3, #12]
 800a7ba:	e019      	b.n	800a7f0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a7bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d115      	bne.n	800a7f0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a7c4:	7ebb      	ldrb	r3, [r7, #26]
 800a7c6:	f003 0310 	and.w	r3, r3, #16
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d003      	beq.n	800a7d6 <f_open+0x1ba>
					res = FR_NO_FILE;
 800a7ce:	2304      	movs	r3, #4
 800a7d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a7d4:	e00c      	b.n	800a7f0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a7d6:	79fb      	ldrb	r3, [r7, #7]
 800a7d8:	f003 0302 	and.w	r3, r3, #2
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d007      	beq.n	800a7f0 <f_open+0x1d4>
 800a7e0:	7ebb      	ldrb	r3, [r7, #26]
 800a7e2:	f003 0301 	and.w	r3, r3, #1
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d002      	beq.n	800a7f0 <f_open+0x1d4>
						res = FR_DENIED;
 800a7ea:	2307      	movs	r3, #7
 800a7ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800a7f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d128      	bne.n	800a84a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a7f8:	79fb      	ldrb	r3, [r7, #7]
 800a7fa:	f003 0308 	and.w	r3, r3, #8
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d003      	beq.n	800a80a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800a802:	79fb      	ldrb	r3, [r7, #7]
 800a804:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a808:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a80a:	693b      	ldr	r3, [r7, #16]
 800a80c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800a812:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a818:	79fb      	ldrb	r3, [r7, #7]
 800a81a:	f023 0301 	bic.w	r3, r3, #1
 800a81e:	2b00      	cmp	r3, #0
 800a820:	bf14      	ite	ne
 800a822:	2301      	movne	r3, #1
 800a824:	2300      	moveq	r3, #0
 800a826:	b2db      	uxtb	r3, r3
 800a828:	461a      	mov	r2, r3
 800a82a:	f107 0314 	add.w	r3, r7, #20
 800a82e:	4611      	mov	r1, r2
 800a830:	4618      	mov	r0, r3
 800a832:	f7fe fb8b 	bl	8008f4c <inc_lock>
 800a836:	4602      	mov	r2, r0
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	691b      	ldr	r3, [r3, #16]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d102      	bne.n	800a84a <f_open+0x22e>
 800a844:	2302      	movs	r3, #2
 800a846:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a84a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a84e:	2b00      	cmp	r3, #0
 800a850:	f040 8095 	bne.w	800a97e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a854:	693b      	ldr	r3, [r7, #16]
 800a856:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a858:	4611      	mov	r1, r2
 800a85a:	4618      	mov	r0, r3
 800a85c:	f7ff f9af 	bl	8009bbe <ld_clust>
 800a860:	4602      	mov	r2, r0
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a868:	331c      	adds	r3, #28
 800a86a:	4618      	mov	r0, r3
 800a86c:	f7fe fa08 	bl	8008c80 <ld_dword>
 800a870:	4602      	mov	r2, r0
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	2200      	movs	r2, #0
 800a87a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a87c:	693a      	ldr	r2, [r7, #16]
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a882:	693b      	ldr	r3, [r7, #16]
 800a884:	88da      	ldrh	r2, [r3, #6]
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	79fa      	ldrb	r2, [r7, #7]
 800a88e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	2200      	movs	r2, #0
 800a894:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	2200      	movs	r2, #0
 800a89a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	3330      	adds	r3, #48	; 0x30
 800a8a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a8aa:	2100      	movs	r1, #0
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	f7fe fa72 	bl	8008d96 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a8b2:	79fb      	ldrb	r3, [r7, #7]
 800a8b4:	f003 0320 	and.w	r3, r3, #32
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d060      	beq.n	800a97e <f_open+0x362>
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	68db      	ldr	r3, [r3, #12]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d05c      	beq.n	800a97e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	68da      	ldr	r2, [r3, #12]
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a8cc:	693b      	ldr	r3, [r7, #16]
 800a8ce:	895b      	ldrh	r3, [r3, #10]
 800a8d0:	025b      	lsls	r3, r3, #9
 800a8d2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	689b      	ldr	r3, [r3, #8]
 800a8d8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	68db      	ldr	r3, [r3, #12]
 800a8de:	657b      	str	r3, [r7, #84]	; 0x54
 800a8e0:	e016      	b.n	800a910 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	f7fe fd1d 	bl	8009326 <get_fat>
 800a8ec:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800a8ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a8f0:	2b01      	cmp	r3, #1
 800a8f2:	d802      	bhi.n	800a8fa <f_open+0x2de>
 800a8f4:	2302      	movs	r3, #2
 800a8f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a8fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a8fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a900:	d102      	bne.n	800a908 <f_open+0x2ec>
 800a902:	2301      	movs	r3, #1
 800a904:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a908:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a90a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a90c:	1ad3      	subs	r3, r2, r3
 800a90e:	657b      	str	r3, [r7, #84]	; 0x54
 800a910:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a914:	2b00      	cmp	r3, #0
 800a916:	d103      	bne.n	800a920 <f_open+0x304>
 800a918:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a91a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a91c:	429a      	cmp	r2, r3
 800a91e:	d8e0      	bhi.n	800a8e2 <f_open+0x2c6>
				}
				fp->clust = clst;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a924:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a926:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d127      	bne.n	800a97e <f_open+0x362>
 800a92e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a930:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a934:	2b00      	cmp	r3, #0
 800a936:	d022      	beq.n	800a97e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a938:	693b      	ldr	r3, [r7, #16]
 800a93a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a93c:	4618      	mov	r0, r3
 800a93e:	f7fe fcd3 	bl	80092e8 <clust2sect>
 800a942:	6478      	str	r0, [r7, #68]	; 0x44
 800a944:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a946:	2b00      	cmp	r3, #0
 800a948:	d103      	bne.n	800a952 <f_open+0x336>
						res = FR_INT_ERR;
 800a94a:	2302      	movs	r3, #2
 800a94c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a950:	e015      	b.n	800a97e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a952:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a954:	0a5a      	lsrs	r2, r3, #9
 800a956:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a958:	441a      	add	r2, r3
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a95e:	693b      	ldr	r3, [r7, #16]
 800a960:	7858      	ldrb	r0, [r3, #1]
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	6a1a      	ldr	r2, [r3, #32]
 800a96c:	2301      	movs	r3, #1
 800a96e:	f7fe f911 	bl	8008b94 <disk_read>
 800a972:	4603      	mov	r3, r0
 800a974:	2b00      	cmp	r3, #0
 800a976:	d002      	beq.n	800a97e <f_open+0x362>
 800a978:	2301      	movs	r3, #1
 800a97a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a97e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a982:	2b00      	cmp	r3, #0
 800a984:	d002      	beq.n	800a98c <f_open+0x370>
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	2200      	movs	r2, #0
 800a98a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a98c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800a990:	4618      	mov	r0, r3
 800a992:	3760      	adds	r7, #96	; 0x60
 800a994:	46bd      	mov	sp, r7
 800a996:	bd80      	pop	{r7, pc}

0800a998 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b08e      	sub	sp, #56	; 0x38
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	60f8      	str	r0, [r7, #12]
 800a9a0:	60b9      	str	r1, [r7, #8]
 800a9a2:	607a      	str	r2, [r7, #4]
 800a9a4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	f107 0214 	add.w	r2, r7, #20
 800a9b6:	4611      	mov	r1, r2
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	f7ff fdb3 	bl	800a524 <validate>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a9c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d107      	bne.n	800a9dc <f_read+0x44>
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	7d5b      	ldrb	r3, [r3, #21]
 800a9d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a9d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d002      	beq.n	800a9e2 <f_read+0x4a>
 800a9dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a9e0:	e115      	b.n	800ac0e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	7d1b      	ldrb	r3, [r3, #20]
 800a9e6:	f003 0301 	and.w	r3, r3, #1
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d101      	bne.n	800a9f2 <f_read+0x5a>
 800a9ee:	2307      	movs	r3, #7
 800a9f0:	e10d      	b.n	800ac0e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	68da      	ldr	r2, [r3, #12]
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	699b      	ldr	r3, [r3, #24]
 800a9fa:	1ad3      	subs	r3, r2, r3
 800a9fc:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800a9fe:	687a      	ldr	r2, [r7, #4]
 800aa00:	6a3b      	ldr	r3, [r7, #32]
 800aa02:	429a      	cmp	r2, r3
 800aa04:	f240 80fe 	bls.w	800ac04 <f_read+0x26c>
 800aa08:	6a3b      	ldr	r3, [r7, #32]
 800aa0a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800aa0c:	e0fa      	b.n	800ac04 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	699b      	ldr	r3, [r3, #24]
 800aa12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	f040 80c6 	bne.w	800aba8 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	699b      	ldr	r3, [r3, #24]
 800aa20:	0a5b      	lsrs	r3, r3, #9
 800aa22:	697a      	ldr	r2, [r7, #20]
 800aa24:	8952      	ldrh	r2, [r2, #10]
 800aa26:	3a01      	subs	r2, #1
 800aa28:	4013      	ands	r3, r2
 800aa2a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800aa2c:	69fb      	ldr	r3, [r7, #28]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d12f      	bne.n	800aa92 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	699b      	ldr	r3, [r3, #24]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d103      	bne.n	800aa42 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	689b      	ldr	r3, [r3, #8]
 800aa3e:	633b      	str	r3, [r7, #48]	; 0x30
 800aa40:	e013      	b.n	800aa6a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d007      	beq.n	800aa5a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	699b      	ldr	r3, [r3, #24]
 800aa4e:	4619      	mov	r1, r3
 800aa50:	68f8      	ldr	r0, [r7, #12]
 800aa52:	f7fe fef9 	bl	8009848 <clmt_clust>
 800aa56:	6338      	str	r0, [r7, #48]	; 0x30
 800aa58:	e007      	b.n	800aa6a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800aa5a:	68fa      	ldr	r2, [r7, #12]
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	69db      	ldr	r3, [r3, #28]
 800aa60:	4619      	mov	r1, r3
 800aa62:	4610      	mov	r0, r2
 800aa64:	f7fe fc5f 	bl	8009326 <get_fat>
 800aa68:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800aa6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa6c:	2b01      	cmp	r3, #1
 800aa6e:	d804      	bhi.n	800aa7a <f_read+0xe2>
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	2202      	movs	r2, #2
 800aa74:	755a      	strb	r2, [r3, #21]
 800aa76:	2302      	movs	r3, #2
 800aa78:	e0c9      	b.n	800ac0e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800aa7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa80:	d104      	bne.n	800aa8c <f_read+0xf4>
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	2201      	movs	r2, #1
 800aa86:	755a      	strb	r2, [r3, #21]
 800aa88:	2301      	movs	r3, #1
 800aa8a:	e0c0      	b.n	800ac0e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa90:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800aa92:	697a      	ldr	r2, [r7, #20]
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	69db      	ldr	r3, [r3, #28]
 800aa98:	4619      	mov	r1, r3
 800aa9a:	4610      	mov	r0, r2
 800aa9c:	f7fe fc24 	bl	80092e8 <clust2sect>
 800aaa0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800aaa2:	69bb      	ldr	r3, [r7, #24]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d104      	bne.n	800aab2 <f_read+0x11a>
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	2202      	movs	r2, #2
 800aaac:	755a      	strb	r2, [r3, #21]
 800aaae:	2302      	movs	r3, #2
 800aab0:	e0ad      	b.n	800ac0e <f_read+0x276>
			sect += csect;
 800aab2:	69ba      	ldr	r2, [r7, #24]
 800aab4:	69fb      	ldr	r3, [r7, #28]
 800aab6:	4413      	add	r3, r2
 800aab8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	0a5b      	lsrs	r3, r3, #9
 800aabe:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800aac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d039      	beq.n	800ab3a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800aac6:	69fa      	ldr	r2, [r7, #28]
 800aac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaca:	4413      	add	r3, r2
 800aacc:	697a      	ldr	r2, [r7, #20]
 800aace:	8952      	ldrh	r2, [r2, #10]
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d905      	bls.n	800aae0 <f_read+0x148>
					cc = fs->csize - csect;
 800aad4:	697b      	ldr	r3, [r7, #20]
 800aad6:	895b      	ldrh	r3, [r3, #10]
 800aad8:	461a      	mov	r2, r3
 800aada:	69fb      	ldr	r3, [r7, #28]
 800aadc:	1ad3      	subs	r3, r2, r3
 800aade:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800aae0:	697b      	ldr	r3, [r7, #20]
 800aae2:	7858      	ldrb	r0, [r3, #1]
 800aae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aae6:	69ba      	ldr	r2, [r7, #24]
 800aae8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aaea:	f7fe f853 	bl	8008b94 <disk_read>
 800aaee:	4603      	mov	r3, r0
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d004      	beq.n	800aafe <f_read+0x166>
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	2201      	movs	r2, #1
 800aaf8:	755a      	strb	r2, [r3, #21]
 800aafa:	2301      	movs	r3, #1
 800aafc:	e087      	b.n	800ac0e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	7d1b      	ldrb	r3, [r3, #20]
 800ab02:	b25b      	sxtb	r3, r3
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	da14      	bge.n	800ab32 <f_read+0x19a>
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	6a1a      	ldr	r2, [r3, #32]
 800ab0c:	69bb      	ldr	r3, [r7, #24]
 800ab0e:	1ad3      	subs	r3, r2, r3
 800ab10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab12:	429a      	cmp	r2, r3
 800ab14:	d90d      	bls.n	800ab32 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	6a1a      	ldr	r2, [r3, #32]
 800ab1a:	69bb      	ldr	r3, [r7, #24]
 800ab1c:	1ad3      	subs	r3, r2, r3
 800ab1e:	025b      	lsls	r3, r3, #9
 800ab20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab22:	18d0      	adds	r0, r2, r3
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	3330      	adds	r3, #48	; 0x30
 800ab28:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ab2c:	4619      	mov	r1, r3
 800ab2e:	f7fe f911 	bl	8008d54 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800ab32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab34:	025b      	lsls	r3, r3, #9
 800ab36:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800ab38:	e050      	b.n	800abdc <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	6a1b      	ldr	r3, [r3, #32]
 800ab3e:	69ba      	ldr	r2, [r7, #24]
 800ab40:	429a      	cmp	r2, r3
 800ab42:	d02e      	beq.n	800aba2 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	7d1b      	ldrb	r3, [r3, #20]
 800ab48:	b25b      	sxtb	r3, r3
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	da18      	bge.n	800ab80 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ab4e:	697b      	ldr	r3, [r7, #20]
 800ab50:	7858      	ldrb	r0, [r3, #1]
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	6a1a      	ldr	r2, [r3, #32]
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	f7fe f839 	bl	8008bd4 <disk_write>
 800ab62:	4603      	mov	r3, r0
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d004      	beq.n	800ab72 <f_read+0x1da>
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	2201      	movs	r2, #1
 800ab6c:	755a      	strb	r2, [r3, #21]
 800ab6e:	2301      	movs	r3, #1
 800ab70:	e04d      	b.n	800ac0e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	7d1b      	ldrb	r3, [r3, #20]
 800ab76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab7a:	b2da      	uxtb	r2, r3
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ab80:	697b      	ldr	r3, [r7, #20]
 800ab82:	7858      	ldrb	r0, [r3, #1]
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	69ba      	ldr	r2, [r7, #24]
 800ab8e:	f7fe f801 	bl	8008b94 <disk_read>
 800ab92:	4603      	mov	r3, r0
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d004      	beq.n	800aba2 <f_read+0x20a>
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	2201      	movs	r2, #1
 800ab9c:	755a      	strb	r2, [r3, #21]
 800ab9e:	2301      	movs	r3, #1
 800aba0:	e035      	b.n	800ac0e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	69ba      	ldr	r2, [r7, #24]
 800aba6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	699b      	ldr	r3, [r3, #24]
 800abac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abb0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800abb4:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800abb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	429a      	cmp	r2, r3
 800abbc:	d901      	bls.n	800abc2 <f_read+0x22a>
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	699b      	ldr	r3, [r3, #24]
 800abcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abd0:	4413      	add	r3, r2
 800abd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800abd4:	4619      	mov	r1, r3
 800abd6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800abd8:	f7fe f8bc 	bl	8008d54 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800abdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abe0:	4413      	add	r3, r2
 800abe2:	627b      	str	r3, [r7, #36]	; 0x24
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	699a      	ldr	r2, [r3, #24]
 800abe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abea:	441a      	add	r2, r3
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	619a      	str	r2, [r3, #24]
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	681a      	ldr	r2, [r3, #0]
 800abf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abf6:	441a      	add	r2, r3
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	601a      	str	r2, [r3, #0]
 800abfc:	687a      	ldr	r2, [r7, #4]
 800abfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac00:	1ad3      	subs	r3, r2, r3
 800ac02:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	f47f af01 	bne.w	800aa0e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800ac0c:	2300      	movs	r3, #0
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	3738      	adds	r7, #56	; 0x38
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}

0800ac16 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800ac16:	b580      	push	{r7, lr}
 800ac18:	b08c      	sub	sp, #48	; 0x30
 800ac1a:	af00      	add	r7, sp, #0
 800ac1c:	60f8      	str	r0, [r7, #12]
 800ac1e:	60b9      	str	r1, [r7, #8]
 800ac20:	607a      	str	r2, [r7, #4]
 800ac22:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	f107 0210 	add.w	r2, r7, #16
 800ac34:	4611      	mov	r1, r2
 800ac36:	4618      	mov	r0, r3
 800ac38:	f7ff fc74 	bl	800a524 <validate>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ac42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d107      	bne.n	800ac5a <f_write+0x44>
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	7d5b      	ldrb	r3, [r3, #21]
 800ac4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ac52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d002      	beq.n	800ac60 <f_write+0x4a>
 800ac5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ac5e:	e14b      	b.n	800aef8 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	7d1b      	ldrb	r3, [r3, #20]
 800ac64:	f003 0302 	and.w	r3, r3, #2
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d101      	bne.n	800ac70 <f_write+0x5a>
 800ac6c:	2307      	movs	r3, #7
 800ac6e:	e143      	b.n	800aef8 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	699a      	ldr	r2, [r3, #24]
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	441a      	add	r2, r3
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	699b      	ldr	r3, [r3, #24]
 800ac7c:	429a      	cmp	r2, r3
 800ac7e:	f080 812d 	bcs.w	800aedc <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	699b      	ldr	r3, [r3, #24]
 800ac86:	43db      	mvns	r3, r3
 800ac88:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800ac8a:	e127      	b.n	800aedc <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	699b      	ldr	r3, [r3, #24]
 800ac90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	f040 80e3 	bne.w	800ae60 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	699b      	ldr	r3, [r3, #24]
 800ac9e:	0a5b      	lsrs	r3, r3, #9
 800aca0:	693a      	ldr	r2, [r7, #16]
 800aca2:	8952      	ldrh	r2, [r2, #10]
 800aca4:	3a01      	subs	r2, #1
 800aca6:	4013      	ands	r3, r2
 800aca8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800acaa:	69bb      	ldr	r3, [r7, #24]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d143      	bne.n	800ad38 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	699b      	ldr	r3, [r3, #24]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d10c      	bne.n	800acd2 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	689b      	ldr	r3, [r3, #8]
 800acbc:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800acbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d11a      	bne.n	800acfa <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	2100      	movs	r1, #0
 800acc8:	4618      	mov	r0, r3
 800acca:	f7fe fd25 	bl	8009718 <create_chain>
 800acce:	62b8      	str	r0, [r7, #40]	; 0x28
 800acd0:	e013      	b.n	800acfa <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d007      	beq.n	800acea <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	699b      	ldr	r3, [r3, #24]
 800acde:	4619      	mov	r1, r3
 800ace0:	68f8      	ldr	r0, [r7, #12]
 800ace2:	f7fe fdb1 	bl	8009848 <clmt_clust>
 800ace6:	62b8      	str	r0, [r7, #40]	; 0x28
 800ace8:	e007      	b.n	800acfa <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800acea:	68fa      	ldr	r2, [r7, #12]
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	69db      	ldr	r3, [r3, #28]
 800acf0:	4619      	mov	r1, r3
 800acf2:	4610      	mov	r0, r2
 800acf4:	f7fe fd10 	bl	8009718 <create_chain>
 800acf8:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800acfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	f000 80f2 	beq.w	800aee6 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ad02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad04:	2b01      	cmp	r3, #1
 800ad06:	d104      	bne.n	800ad12 <f_write+0xfc>
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	2202      	movs	r2, #2
 800ad0c:	755a      	strb	r2, [r3, #21]
 800ad0e:	2302      	movs	r3, #2
 800ad10:	e0f2      	b.n	800aef8 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ad12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad18:	d104      	bne.n	800ad24 <f_write+0x10e>
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	2201      	movs	r2, #1
 800ad1e:	755a      	strb	r2, [r3, #21]
 800ad20:	2301      	movs	r3, #1
 800ad22:	e0e9      	b.n	800aef8 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad28:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	689b      	ldr	r3, [r3, #8]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d102      	bne.n	800ad38 <f_write+0x122>
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad36:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	7d1b      	ldrb	r3, [r3, #20]
 800ad3c:	b25b      	sxtb	r3, r3
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	da18      	bge.n	800ad74 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ad42:	693b      	ldr	r3, [r7, #16]
 800ad44:	7858      	ldrb	r0, [r3, #1]
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	6a1a      	ldr	r2, [r3, #32]
 800ad50:	2301      	movs	r3, #1
 800ad52:	f7fd ff3f 	bl	8008bd4 <disk_write>
 800ad56:	4603      	mov	r3, r0
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d004      	beq.n	800ad66 <f_write+0x150>
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	2201      	movs	r2, #1
 800ad60:	755a      	strb	r2, [r3, #21]
 800ad62:	2301      	movs	r3, #1
 800ad64:	e0c8      	b.n	800aef8 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	7d1b      	ldrb	r3, [r3, #20]
 800ad6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad6e:	b2da      	uxtb	r2, r3
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ad74:	693a      	ldr	r2, [r7, #16]
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	69db      	ldr	r3, [r3, #28]
 800ad7a:	4619      	mov	r1, r3
 800ad7c:	4610      	mov	r0, r2
 800ad7e:	f7fe fab3 	bl	80092e8 <clust2sect>
 800ad82:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ad84:	697b      	ldr	r3, [r7, #20]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d104      	bne.n	800ad94 <f_write+0x17e>
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	2202      	movs	r2, #2
 800ad8e:	755a      	strb	r2, [r3, #21]
 800ad90:	2302      	movs	r3, #2
 800ad92:	e0b1      	b.n	800aef8 <f_write+0x2e2>
			sect += csect;
 800ad94:	697a      	ldr	r2, [r7, #20]
 800ad96:	69bb      	ldr	r3, [r7, #24]
 800ad98:	4413      	add	r3, r2
 800ad9a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	0a5b      	lsrs	r3, r3, #9
 800ada0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ada2:	6a3b      	ldr	r3, [r7, #32]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d03c      	beq.n	800ae22 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ada8:	69ba      	ldr	r2, [r7, #24]
 800adaa:	6a3b      	ldr	r3, [r7, #32]
 800adac:	4413      	add	r3, r2
 800adae:	693a      	ldr	r2, [r7, #16]
 800adb0:	8952      	ldrh	r2, [r2, #10]
 800adb2:	4293      	cmp	r3, r2
 800adb4:	d905      	bls.n	800adc2 <f_write+0x1ac>
					cc = fs->csize - csect;
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	895b      	ldrh	r3, [r3, #10]
 800adba:	461a      	mov	r2, r3
 800adbc:	69bb      	ldr	r3, [r7, #24]
 800adbe:	1ad3      	subs	r3, r2, r3
 800adc0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800adc2:	693b      	ldr	r3, [r7, #16]
 800adc4:	7858      	ldrb	r0, [r3, #1]
 800adc6:	6a3b      	ldr	r3, [r7, #32]
 800adc8:	697a      	ldr	r2, [r7, #20]
 800adca:	69f9      	ldr	r1, [r7, #28]
 800adcc:	f7fd ff02 	bl	8008bd4 <disk_write>
 800add0:	4603      	mov	r3, r0
 800add2:	2b00      	cmp	r3, #0
 800add4:	d004      	beq.n	800ade0 <f_write+0x1ca>
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	2201      	movs	r2, #1
 800adda:	755a      	strb	r2, [r3, #21]
 800addc:	2301      	movs	r3, #1
 800adde:	e08b      	b.n	800aef8 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	6a1a      	ldr	r2, [r3, #32]
 800ade4:	697b      	ldr	r3, [r7, #20]
 800ade6:	1ad3      	subs	r3, r2, r3
 800ade8:	6a3a      	ldr	r2, [r7, #32]
 800adea:	429a      	cmp	r2, r3
 800adec:	d915      	bls.n	800ae1a <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	6a1a      	ldr	r2, [r3, #32]
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	1ad3      	subs	r3, r2, r3
 800adfc:	025b      	lsls	r3, r3, #9
 800adfe:	69fa      	ldr	r2, [r7, #28]
 800ae00:	4413      	add	r3, r2
 800ae02:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ae06:	4619      	mov	r1, r3
 800ae08:	f7fd ffa4 	bl	8008d54 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	7d1b      	ldrb	r3, [r3, #20]
 800ae10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae14:	b2da      	uxtb	r2, r3
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800ae1a:	6a3b      	ldr	r3, [r7, #32]
 800ae1c:	025b      	lsls	r3, r3, #9
 800ae1e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800ae20:	e03f      	b.n	800aea2 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	6a1b      	ldr	r3, [r3, #32]
 800ae26:	697a      	ldr	r2, [r7, #20]
 800ae28:	429a      	cmp	r2, r3
 800ae2a:	d016      	beq.n	800ae5a <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	699a      	ldr	r2, [r3, #24]
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ae34:	429a      	cmp	r2, r3
 800ae36:	d210      	bcs.n	800ae5a <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800ae38:	693b      	ldr	r3, [r7, #16]
 800ae3a:	7858      	ldrb	r0, [r3, #1]
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ae42:	2301      	movs	r3, #1
 800ae44:	697a      	ldr	r2, [r7, #20]
 800ae46:	f7fd fea5 	bl	8008b94 <disk_read>
 800ae4a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d004      	beq.n	800ae5a <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	2201      	movs	r2, #1
 800ae54:	755a      	strb	r2, [r3, #21]
 800ae56:	2301      	movs	r3, #1
 800ae58:	e04e      	b.n	800aef8 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	697a      	ldr	r2, [r7, #20]
 800ae5e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	699b      	ldr	r3, [r3, #24]
 800ae64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae68:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800ae6c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800ae6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	429a      	cmp	r2, r3
 800ae74:	d901      	bls.n	800ae7a <f_write+0x264>
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	699b      	ldr	r3, [r3, #24]
 800ae84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae88:	4413      	add	r3, r2
 800ae8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae8c:	69f9      	ldr	r1, [r7, #28]
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f7fd ff60 	bl	8008d54 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	7d1b      	ldrb	r3, [r3, #20]
 800ae98:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ae9c:	b2da      	uxtb	r2, r3
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800aea2:	69fa      	ldr	r2, [r7, #28]
 800aea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aea6:	4413      	add	r3, r2
 800aea8:	61fb      	str	r3, [r7, #28]
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	699a      	ldr	r2, [r3, #24]
 800aeae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeb0:	441a      	add	r2, r3
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	619a      	str	r2, [r3, #24]
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	68da      	ldr	r2, [r3, #12]
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	699b      	ldr	r3, [r3, #24]
 800aebe:	429a      	cmp	r2, r3
 800aec0:	bf38      	it	cc
 800aec2:	461a      	movcc	r2, r3
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	60da      	str	r2, [r3, #12]
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	681a      	ldr	r2, [r3, #0]
 800aecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aece:	441a      	add	r2, r3
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	601a      	str	r2, [r3, #0]
 800aed4:	687a      	ldr	r2, [r7, #4]
 800aed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aed8:	1ad3      	subs	r3, r2, r3
 800aeda:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	f47f aed4 	bne.w	800ac8c <f_write+0x76>
 800aee4:	e000      	b.n	800aee8 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800aee6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	7d1b      	ldrb	r3, [r3, #20]
 800aeec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aef0:	b2da      	uxtb	r2, r3
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800aef6:	2300      	movs	r3, #0
}
 800aef8:	4618      	mov	r0, r3
 800aefa:	3730      	adds	r7, #48	; 0x30
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}

0800af00 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b086      	sub	sp, #24
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f107 0208 	add.w	r2, r7, #8
 800af0e:	4611      	mov	r1, r2
 800af10:	4618      	mov	r0, r3
 800af12:	f7ff fb07 	bl	800a524 <validate>
 800af16:	4603      	mov	r3, r0
 800af18:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800af1a:	7dfb      	ldrb	r3, [r7, #23]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d168      	bne.n	800aff2 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	7d1b      	ldrb	r3, [r3, #20]
 800af24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d062      	beq.n	800aff2 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	7d1b      	ldrb	r3, [r3, #20]
 800af30:	b25b      	sxtb	r3, r3
 800af32:	2b00      	cmp	r3, #0
 800af34:	da15      	bge.n	800af62 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	7858      	ldrb	r0, [r3, #1]
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	6a1a      	ldr	r2, [r3, #32]
 800af44:	2301      	movs	r3, #1
 800af46:	f7fd fe45 	bl	8008bd4 <disk_write>
 800af4a:	4603      	mov	r3, r0
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d001      	beq.n	800af54 <f_sync+0x54>
 800af50:	2301      	movs	r3, #1
 800af52:	e04f      	b.n	800aff4 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	7d1b      	ldrb	r3, [r3, #20]
 800af58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af5c:	b2da      	uxtb	r2, r3
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800af62:	f7fb f9a5 	bl	80062b0 <get_fattime>
 800af66:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800af68:	68ba      	ldr	r2, [r7, #8]
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af6e:	4619      	mov	r1, r3
 800af70:	4610      	mov	r0, r2
 800af72:	f7fe f91d 	bl	80091b0 <move_window>
 800af76:	4603      	mov	r3, r0
 800af78:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800af7a:	7dfb      	ldrb	r3, [r7, #23]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d138      	bne.n	800aff2 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af84:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	330b      	adds	r3, #11
 800af8a:	781a      	ldrb	r2, [r3, #0]
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	330b      	adds	r3, #11
 800af90:	f042 0220 	orr.w	r2, r2, #32
 800af94:	b2d2      	uxtb	r2, r2
 800af96:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	6818      	ldr	r0, [r3, #0]
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	689b      	ldr	r3, [r3, #8]
 800afa0:	461a      	mov	r2, r3
 800afa2:	68f9      	ldr	r1, [r7, #12]
 800afa4:	f7fe fe2a 	bl	8009bfc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	f103 021c 	add.w	r2, r3, #28
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	68db      	ldr	r3, [r3, #12]
 800afb2:	4619      	mov	r1, r3
 800afb4:	4610      	mov	r0, r2
 800afb6:	f7fd fea1 	bl	8008cfc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	3316      	adds	r3, #22
 800afbe:	6939      	ldr	r1, [r7, #16]
 800afc0:	4618      	mov	r0, r3
 800afc2:	f7fd fe9b 	bl	8008cfc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	3312      	adds	r3, #18
 800afca:	2100      	movs	r1, #0
 800afcc:	4618      	mov	r0, r3
 800afce:	f7fd fe7a 	bl	8008cc6 <st_word>
					fs->wflag = 1;
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	2201      	movs	r2, #1
 800afd6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	4618      	mov	r0, r3
 800afdc:	f7fe f916 	bl	800920c <sync_fs>
 800afe0:	4603      	mov	r3, r0
 800afe2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	7d1b      	ldrb	r3, [r3, #20]
 800afe8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800afec:	b2da      	uxtb	r2, r3
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800aff2:	7dfb      	ldrb	r3, [r7, #23]
}
 800aff4:	4618      	mov	r0, r3
 800aff6:	3718      	adds	r7, #24
 800aff8:	46bd      	mov	sp, r7
 800affa:	bd80      	pop	{r7, pc}

0800affc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b084      	sub	sp, #16
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	f7ff ff7b 	bl	800af00 <f_sync>
 800b00a:	4603      	mov	r3, r0
 800b00c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b00e:	7bfb      	ldrb	r3, [r7, #15]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d118      	bne.n	800b046 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f107 0208 	add.w	r2, r7, #8
 800b01a:	4611      	mov	r1, r2
 800b01c:	4618      	mov	r0, r3
 800b01e:	f7ff fa81 	bl	800a524 <validate>
 800b022:	4603      	mov	r3, r0
 800b024:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b026:	7bfb      	ldrb	r3, [r7, #15]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d10c      	bne.n	800b046 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	691b      	ldr	r3, [r3, #16]
 800b030:	4618      	mov	r0, r3
 800b032:	f7fe f819 	bl	8009068 <dec_lock>
 800b036:	4603      	mov	r3, r0
 800b038:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b03a:	7bfb      	ldrb	r3, [r7, #15]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d102      	bne.n	800b046 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2200      	movs	r2, #0
 800b044:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800b046:	7bfb      	ldrb	r3, [r7, #15]
}
 800b048:	4618      	mov	r0, r3
 800b04a:	3710      	adds	r7, #16
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bd80      	pop	{r7, pc}

0800b050 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b092      	sub	sp, #72	; 0x48
 800b054:	af00      	add	r7, sp, #0
 800b056:	60f8      	str	r0, [r7, #12]
 800b058:	60b9      	str	r1, [r7, #8]
 800b05a:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800b05c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800b060:	f107 030c 	add.w	r3, r7, #12
 800b064:	2200      	movs	r2, #0
 800b066:	4618      	mov	r0, r3
 800b068:	f7ff f810 	bl	800a08c <find_volume>
 800b06c:	4603      	mov	r3, r0
 800b06e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800b072:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b076:	2b00      	cmp	r3, #0
 800b078:	f040 8099 	bne.w	800b1ae <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800b07c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800b082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b084:	691a      	ldr	r2, [r3, #16]
 800b086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b088:	695b      	ldr	r3, [r3, #20]
 800b08a:	3b02      	subs	r3, #2
 800b08c:	429a      	cmp	r2, r3
 800b08e:	d804      	bhi.n	800b09a <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800b090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b092:	691a      	ldr	r2, [r3, #16]
 800b094:	68bb      	ldr	r3, [r7, #8]
 800b096:	601a      	str	r2, [r3, #0]
 800b098:	e089      	b.n	800b1ae <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800b09a:	2300      	movs	r3, #0
 800b09c:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800b09e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0a0:	781b      	ldrb	r3, [r3, #0]
 800b0a2:	2b01      	cmp	r3, #1
 800b0a4:	d128      	bne.n	800b0f8 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800b0a6:	2302      	movs	r3, #2
 800b0a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ac:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800b0ae:	f107 0314 	add.w	r3, r7, #20
 800b0b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	f7fe f936 	bl	8009326 <get_fat>
 800b0ba:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800b0bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0c2:	d103      	bne.n	800b0cc <f_getfree+0x7c>
 800b0c4:	2301      	movs	r3, #1
 800b0c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800b0ca:	e063      	b.n	800b194 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800b0cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0ce:	2b01      	cmp	r3, #1
 800b0d0:	d103      	bne.n	800b0da <f_getfree+0x8a>
 800b0d2:	2302      	movs	r3, #2
 800b0d4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800b0d8:	e05c      	b.n	800b194 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800b0da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d102      	bne.n	800b0e6 <f_getfree+0x96>
 800b0e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0e2:	3301      	adds	r3, #1
 800b0e4:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800b0e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0e8:	3301      	adds	r3, #1
 800b0ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ee:	695b      	ldr	r3, [r3, #20]
 800b0f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b0f2:	429a      	cmp	r2, r3
 800b0f4:	d3db      	bcc.n	800b0ae <f_getfree+0x5e>
 800b0f6:	e04d      	b.n	800b194 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800b0f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0fa:	695b      	ldr	r3, [r3, #20]
 800b0fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b100:	6a1b      	ldr	r3, [r3, #32]
 800b102:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800b104:	2300      	movs	r3, #0
 800b106:	637b      	str	r3, [r7, #52]	; 0x34
 800b108:	2300      	movs	r3, #0
 800b10a:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800b10c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d113      	bne.n	800b13a <f_getfree+0xea>
							res = move_window(fs, sect++);
 800b112:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b116:	1c5a      	adds	r2, r3, #1
 800b118:	63ba      	str	r2, [r7, #56]	; 0x38
 800b11a:	4619      	mov	r1, r3
 800b11c:	f7fe f848 	bl	80091b0 <move_window>
 800b120:	4603      	mov	r3, r0
 800b122:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800b126:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d131      	bne.n	800b192 <f_getfree+0x142>
							p = fs->win;
 800b12e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b130:	3330      	adds	r3, #48	; 0x30
 800b132:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800b134:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b138:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800b13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b13c:	781b      	ldrb	r3, [r3, #0]
 800b13e:	2b02      	cmp	r3, #2
 800b140:	d10f      	bne.n	800b162 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800b142:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b144:	f7fd fd84 	bl	8008c50 <ld_word>
 800b148:	4603      	mov	r3, r0
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d102      	bne.n	800b154 <f_getfree+0x104>
 800b14e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b150:	3301      	adds	r3, #1
 800b152:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800b154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b156:	3302      	adds	r3, #2
 800b158:	633b      	str	r3, [r7, #48]	; 0x30
 800b15a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b15c:	3b02      	subs	r3, #2
 800b15e:	637b      	str	r3, [r7, #52]	; 0x34
 800b160:	e010      	b.n	800b184 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800b162:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b164:	f7fd fd8c 	bl	8008c80 <ld_dword>
 800b168:	4603      	mov	r3, r0
 800b16a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d102      	bne.n	800b178 <f_getfree+0x128>
 800b172:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b174:	3301      	adds	r3, #1
 800b176:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800b178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b17a:	3304      	adds	r3, #4
 800b17c:	633b      	str	r3, [r7, #48]	; 0x30
 800b17e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b180:	3b04      	subs	r3, #4
 800b182:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800b184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b186:	3b01      	subs	r3, #1
 800b188:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b18a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d1bd      	bne.n	800b10c <f_getfree+0xbc>
 800b190:	e000      	b.n	800b194 <f_getfree+0x144>
							if (res != FR_OK) break;
 800b192:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800b194:	68bb      	ldr	r3, [r7, #8]
 800b196:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b198:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800b19a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b19c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b19e:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800b1a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1a2:	791a      	ldrb	r2, [r3, #4]
 800b1a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1a6:	f042 0201 	orr.w	r2, r2, #1
 800b1aa:	b2d2      	uxtb	r2, r2
 800b1ac:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800b1ae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3748      	adds	r7, #72	; 0x48
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}

0800b1ba <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800b1ba:	b580      	push	{r7, lr}
 800b1bc:	b088      	sub	sp, #32
 800b1be:	af00      	add	r7, sp, #0
 800b1c0:	60f8      	str	r0, [r7, #12]
 800b1c2:	60b9      	str	r1, [r7, #8]
 800b1c4:	607a      	str	r2, [r7, #4]
	int n = 0;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800b1ce:	e01b      	b.n	800b208 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800b1d0:	f107 0310 	add.w	r3, r7, #16
 800b1d4:	f107 0114 	add.w	r1, r7, #20
 800b1d8:	2201      	movs	r2, #1
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	f7ff fbdc 	bl	800a998 <f_read>
		if (rc != 1) break;
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	2b01      	cmp	r3, #1
 800b1e4:	d116      	bne.n	800b214 <f_gets+0x5a>
		c = s[0];
 800b1e6:	7d3b      	ldrb	r3, [r7, #20]
 800b1e8:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800b1ea:	7dfb      	ldrb	r3, [r7, #23]
 800b1ec:	2b0d      	cmp	r3, #13
 800b1ee:	d100      	bne.n	800b1f2 <f_gets+0x38>
 800b1f0:	e00a      	b.n	800b208 <f_gets+0x4e>
		*p++ = c;
 800b1f2:	69bb      	ldr	r3, [r7, #24]
 800b1f4:	1c5a      	adds	r2, r3, #1
 800b1f6:	61ba      	str	r2, [r7, #24]
 800b1f8:	7dfa      	ldrb	r2, [r7, #23]
 800b1fa:	701a      	strb	r2, [r3, #0]
		n++;
 800b1fc:	69fb      	ldr	r3, [r7, #28]
 800b1fe:	3301      	adds	r3, #1
 800b200:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800b202:	7dfb      	ldrb	r3, [r7, #23]
 800b204:	2b0a      	cmp	r3, #10
 800b206:	d007      	beq.n	800b218 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	3b01      	subs	r3, #1
 800b20c:	69fa      	ldr	r2, [r7, #28]
 800b20e:	429a      	cmp	r2, r3
 800b210:	dbde      	blt.n	800b1d0 <f_gets+0x16>
 800b212:	e002      	b.n	800b21a <f_gets+0x60>
		if (rc != 1) break;
 800b214:	bf00      	nop
 800b216:	e000      	b.n	800b21a <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800b218:	bf00      	nop
	}
	*p = 0;
 800b21a:	69bb      	ldr	r3, [r7, #24]
 800b21c:	2200      	movs	r2, #0
 800b21e:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800b220:	69fb      	ldr	r3, [r7, #28]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d001      	beq.n	800b22a <f_gets+0x70>
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	e000      	b.n	800b22c <f_gets+0x72>
 800b22a:	2300      	movs	r3, #0
}
 800b22c:	4618      	mov	r0, r3
 800b22e:	3720      	adds	r7, #32
 800b230:	46bd      	mov	sp, r7
 800b232:	bd80      	pop	{r7, pc}

0800b234 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b234:	b480      	push	{r7}
 800b236:	b087      	sub	sp, #28
 800b238:	af00      	add	r7, sp, #0
 800b23a:	60f8      	str	r0, [r7, #12]
 800b23c:	60b9      	str	r1, [r7, #8]
 800b23e:	4613      	mov	r3, r2
 800b240:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b242:	2301      	movs	r3, #1
 800b244:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b246:	2300      	movs	r3, #0
 800b248:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b24a:	4b1f      	ldr	r3, [pc, #124]	; (800b2c8 <FATFS_LinkDriverEx+0x94>)
 800b24c:	7a5b      	ldrb	r3, [r3, #9]
 800b24e:	b2db      	uxtb	r3, r3
 800b250:	2b00      	cmp	r3, #0
 800b252:	d131      	bne.n	800b2b8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b254:	4b1c      	ldr	r3, [pc, #112]	; (800b2c8 <FATFS_LinkDriverEx+0x94>)
 800b256:	7a5b      	ldrb	r3, [r3, #9]
 800b258:	b2db      	uxtb	r3, r3
 800b25a:	461a      	mov	r2, r3
 800b25c:	4b1a      	ldr	r3, [pc, #104]	; (800b2c8 <FATFS_LinkDriverEx+0x94>)
 800b25e:	2100      	movs	r1, #0
 800b260:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b262:	4b19      	ldr	r3, [pc, #100]	; (800b2c8 <FATFS_LinkDriverEx+0x94>)
 800b264:	7a5b      	ldrb	r3, [r3, #9]
 800b266:	b2db      	uxtb	r3, r3
 800b268:	4a17      	ldr	r2, [pc, #92]	; (800b2c8 <FATFS_LinkDriverEx+0x94>)
 800b26a:	009b      	lsls	r3, r3, #2
 800b26c:	4413      	add	r3, r2
 800b26e:	68fa      	ldr	r2, [r7, #12]
 800b270:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b272:	4b15      	ldr	r3, [pc, #84]	; (800b2c8 <FATFS_LinkDriverEx+0x94>)
 800b274:	7a5b      	ldrb	r3, [r3, #9]
 800b276:	b2db      	uxtb	r3, r3
 800b278:	461a      	mov	r2, r3
 800b27a:	4b13      	ldr	r3, [pc, #76]	; (800b2c8 <FATFS_LinkDriverEx+0x94>)
 800b27c:	4413      	add	r3, r2
 800b27e:	79fa      	ldrb	r2, [r7, #7]
 800b280:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b282:	4b11      	ldr	r3, [pc, #68]	; (800b2c8 <FATFS_LinkDriverEx+0x94>)
 800b284:	7a5b      	ldrb	r3, [r3, #9]
 800b286:	b2db      	uxtb	r3, r3
 800b288:	1c5a      	adds	r2, r3, #1
 800b28a:	b2d1      	uxtb	r1, r2
 800b28c:	4a0e      	ldr	r2, [pc, #56]	; (800b2c8 <FATFS_LinkDriverEx+0x94>)
 800b28e:	7251      	strb	r1, [r2, #9]
 800b290:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b292:	7dbb      	ldrb	r3, [r7, #22]
 800b294:	3330      	adds	r3, #48	; 0x30
 800b296:	b2da      	uxtb	r2, r3
 800b298:	68bb      	ldr	r3, [r7, #8]
 800b29a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	3301      	adds	r3, #1
 800b2a0:	223a      	movs	r2, #58	; 0x3a
 800b2a2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	3302      	adds	r3, #2
 800b2a8:	222f      	movs	r2, #47	; 0x2f
 800b2aa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	3303      	adds	r3, #3
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b2b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	371c      	adds	r7, #28
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c4:	4770      	bx	lr
 800b2c6:	bf00      	nop
 800b2c8:	200001f4 	.word	0x200001f4

0800b2cc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b082      	sub	sp, #8
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
 800b2d4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	6839      	ldr	r1, [r7, #0]
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	f7ff ffaa 	bl	800b234 <FATFS_LinkDriverEx>
 800b2e0:	4603      	mov	r3, r0
}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	3708      	adds	r7, #8
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}
	...

0800b2ec <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b2f0:	2201      	movs	r2, #1
 800b2f2:	490e      	ldr	r1, [pc, #56]	; (800b32c <MX_USB_HOST_Init+0x40>)
 800b2f4:	480e      	ldr	r0, [pc, #56]	; (800b330 <MX_USB_HOST_Init+0x44>)
 800b2f6:	f7fc f8b5 	bl	8007464 <USBH_Init>
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d001      	beq.n	800b304 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b300:	f7f5 fc8a 	bl	8000c18 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800b304:	490b      	ldr	r1, [pc, #44]	; (800b334 <MX_USB_HOST_Init+0x48>)
 800b306:	480a      	ldr	r0, [pc, #40]	; (800b330 <MX_USB_HOST_Init+0x44>)
 800b308:	f7fc f93a 	bl	8007580 <USBH_RegisterClass>
 800b30c:	4603      	mov	r3, r0
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d001      	beq.n	800b316 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b312:	f7f5 fc81 	bl	8000c18 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b316:	4806      	ldr	r0, [pc, #24]	; (800b330 <MX_USB_HOST_Init+0x44>)
 800b318:	f7fc f9be 	bl	8007698 <USBH_Start>
 800b31c:	4603      	mov	r3, r0
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d001      	beq.n	800b326 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b322:	f7f5 fc79 	bl	8000c18 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b326:	bf00      	nop
 800b328:	bd80      	pop	{r7, pc}
 800b32a:	bf00      	nop
 800b32c:	0800b34d 	.word	0x0800b34d
 800b330:	20000770 	.word	0x20000770
 800b334:	20000024 	.word	0x20000024

0800b338 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800b33c:	4802      	ldr	r0, [pc, #8]	; (800b348 <MX_USB_HOST_Process+0x10>)
 800b33e:	f7fc f9bb 	bl	80076b8 <USBH_Process>
}
 800b342:	bf00      	nop
 800b344:	bd80      	pop	{r7, pc}
 800b346:	bf00      	nop
 800b348:	20000770 	.word	0x20000770

0800b34c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b34c:	b480      	push	{r7}
 800b34e:	b083      	sub	sp, #12
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
 800b354:	460b      	mov	r3, r1
 800b356:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b358:	78fb      	ldrb	r3, [r7, #3]
 800b35a:	3b01      	subs	r3, #1
 800b35c:	2b04      	cmp	r3, #4
 800b35e:	d819      	bhi.n	800b394 <USBH_UserProcess+0x48>
 800b360:	a201      	add	r2, pc, #4	; (adr r2, 800b368 <USBH_UserProcess+0x1c>)
 800b362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b366:	bf00      	nop
 800b368:	0800b395 	.word	0x0800b395
 800b36c:	0800b385 	.word	0x0800b385
 800b370:	0800b395 	.word	0x0800b395
 800b374:	0800b38d 	.word	0x0800b38d
 800b378:	0800b37d 	.word	0x0800b37d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b37c:	4b09      	ldr	r3, [pc, #36]	; (800b3a4 <USBH_UserProcess+0x58>)
 800b37e:	2203      	movs	r2, #3
 800b380:	701a      	strb	r2, [r3, #0]
  break;
 800b382:	e008      	b.n	800b396 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b384:	4b07      	ldr	r3, [pc, #28]	; (800b3a4 <USBH_UserProcess+0x58>)
 800b386:	2202      	movs	r2, #2
 800b388:	701a      	strb	r2, [r3, #0]
  break;
 800b38a:	e004      	b.n	800b396 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b38c:	4b05      	ldr	r3, [pc, #20]	; (800b3a4 <USBH_UserProcess+0x58>)
 800b38e:	2201      	movs	r2, #1
 800b390:	701a      	strb	r2, [r3, #0]
  break;
 800b392:	e000      	b.n	800b396 <USBH_UserProcess+0x4a>

  default:
  break;
 800b394:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b396:	bf00      	nop
 800b398:	370c      	adds	r7, #12
 800b39a:	46bd      	mov	sp, r7
 800b39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a0:	4770      	bx	lr
 800b3a2:	bf00      	nop
 800b3a4:	20000200 	.word	0x20000200

0800b3a8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b08a      	sub	sp, #40	; 0x28
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b3b0:	f107 0314 	add.w	r3, r7, #20
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	601a      	str	r2, [r3, #0]
 800b3b8:	605a      	str	r2, [r3, #4]
 800b3ba:	609a      	str	r2, [r3, #8]
 800b3bc:	60da      	str	r2, [r3, #12]
 800b3be:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b3c8:	d147      	bne.n	800b45a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	613b      	str	r3, [r7, #16]
 800b3ce:	4b25      	ldr	r3, [pc, #148]	; (800b464 <HAL_HCD_MspInit+0xbc>)
 800b3d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3d2:	4a24      	ldr	r2, [pc, #144]	; (800b464 <HAL_HCD_MspInit+0xbc>)
 800b3d4:	f043 0301 	orr.w	r3, r3, #1
 800b3d8:	6313      	str	r3, [r2, #48]	; 0x30
 800b3da:	4b22      	ldr	r3, [pc, #136]	; (800b464 <HAL_HCD_MspInit+0xbc>)
 800b3dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3de:	f003 0301 	and.w	r3, r3, #1
 800b3e2:	613b      	str	r3, [r7, #16]
 800b3e4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b3e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b3ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b3f4:	f107 0314 	add.w	r3, r7, #20
 800b3f8:	4619      	mov	r1, r3
 800b3fa:	481b      	ldr	r0, [pc, #108]	; (800b468 <HAL_HCD_MspInit+0xc0>)
 800b3fc:	f7f5 ffb0 	bl	8001360 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b400:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800b404:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b406:	2302      	movs	r3, #2
 800b408:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b40a:	2300      	movs	r3, #0
 800b40c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b40e:	2303      	movs	r3, #3
 800b410:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b412:	230a      	movs	r3, #10
 800b414:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b416:	f107 0314 	add.w	r3, r7, #20
 800b41a:	4619      	mov	r1, r3
 800b41c:	4812      	ldr	r0, [pc, #72]	; (800b468 <HAL_HCD_MspInit+0xc0>)
 800b41e:	f7f5 ff9f 	bl	8001360 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b422:	4b10      	ldr	r3, [pc, #64]	; (800b464 <HAL_HCD_MspInit+0xbc>)
 800b424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b426:	4a0f      	ldr	r2, [pc, #60]	; (800b464 <HAL_HCD_MspInit+0xbc>)
 800b428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b42c:	6353      	str	r3, [r2, #52]	; 0x34
 800b42e:	2300      	movs	r3, #0
 800b430:	60fb      	str	r3, [r7, #12]
 800b432:	4b0c      	ldr	r3, [pc, #48]	; (800b464 <HAL_HCD_MspInit+0xbc>)
 800b434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b436:	4a0b      	ldr	r2, [pc, #44]	; (800b464 <HAL_HCD_MspInit+0xbc>)
 800b438:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b43c:	6453      	str	r3, [r2, #68]	; 0x44
 800b43e:	4b09      	ldr	r3, [pc, #36]	; (800b464 <HAL_HCD_MspInit+0xbc>)
 800b440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b442:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b446:	60fb      	str	r3, [r7, #12]
 800b448:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b44a:	2200      	movs	r2, #0
 800b44c:	2100      	movs	r1, #0
 800b44e:	2043      	movs	r0, #67	; 0x43
 800b450:	f7f5 ff36 	bl	80012c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b454:	2043      	movs	r0, #67	; 0x43
 800b456:	f7f5 ff5f 	bl	8001318 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b45a:	bf00      	nop
 800b45c:	3728      	adds	r7, #40	; 0x28
 800b45e:	46bd      	mov	sp, r7
 800b460:	bd80      	pop	{r7, pc}
 800b462:	bf00      	nop
 800b464:	40023800 	.word	0x40023800
 800b468:	40020000 	.word	0x40020000

0800b46c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b082      	sub	sp, #8
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b47a:	4618      	mov	r0, r3
 800b47c:	f7fc fcef 	bl	8007e5e <USBH_LL_IncTimer>
}
 800b480:	bf00      	nop
 800b482:	3708      	adds	r7, #8
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}

0800b488 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b082      	sub	sp, #8
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b496:	4618      	mov	r0, r3
 800b498:	f7fc fd27 	bl	8007eea <USBH_LL_Connect>
}
 800b49c:	bf00      	nop
 800b49e:	3708      	adds	r7, #8
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}

0800b4a4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b082      	sub	sp, #8
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f7fc fd30 	bl	8007f18 <USBH_LL_Disconnect>
}
 800b4b8:	bf00      	nop
 800b4ba:	3708      	adds	r7, #8
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bd80      	pop	{r7, pc}

0800b4c0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b4c0:	b480      	push	{r7}
 800b4c2:	b083      	sub	sp, #12
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
 800b4c8:	460b      	mov	r3, r1
 800b4ca:	70fb      	strb	r3, [r7, #3]
 800b4cc:	4613      	mov	r3, r2
 800b4ce:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b4d0:	bf00      	nop
 800b4d2:	370c      	adds	r7, #12
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4da:	4770      	bx	lr

0800b4dc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b082      	sub	sp, #8
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	f7fc fce1 	bl	8007eb2 <USBH_LL_PortEnabled>
}
 800b4f0:	bf00      	nop
 800b4f2:	3708      	adds	r7, #8
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}

0800b4f8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b082      	sub	sp, #8
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b506:	4618      	mov	r0, r3
 800b508:	f7fc fce1 	bl	8007ece <USBH_LL_PortDisabled>
}
 800b50c:	bf00      	nop
 800b50e:	3708      	adds	r7, #8
 800b510:	46bd      	mov	sp, r7
 800b512:	bd80      	pop	{r7, pc}

0800b514 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b082      	sub	sp, #8
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b522:	2b01      	cmp	r3, #1
 800b524:	d12a      	bne.n	800b57c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b526:	4a18      	ldr	r2, [pc, #96]	; (800b588 <USBH_LL_Init+0x74>)
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	4a15      	ldr	r2, [pc, #84]	; (800b588 <USBH_LL_Init+0x74>)
 800b532:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b536:	4b14      	ldr	r3, [pc, #80]	; (800b588 <USBH_LL_Init+0x74>)
 800b538:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b53c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b53e:	4b12      	ldr	r3, [pc, #72]	; (800b588 <USBH_LL_Init+0x74>)
 800b540:	2208      	movs	r2, #8
 800b542:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b544:	4b10      	ldr	r3, [pc, #64]	; (800b588 <USBH_LL_Init+0x74>)
 800b546:	2201      	movs	r2, #1
 800b548:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b54a:	4b0f      	ldr	r3, [pc, #60]	; (800b588 <USBH_LL_Init+0x74>)
 800b54c:	2200      	movs	r2, #0
 800b54e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b550:	4b0d      	ldr	r3, [pc, #52]	; (800b588 <USBH_LL_Init+0x74>)
 800b552:	2202      	movs	r2, #2
 800b554:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b556:	4b0c      	ldr	r3, [pc, #48]	; (800b588 <USBH_LL_Init+0x74>)
 800b558:	2200      	movs	r2, #0
 800b55a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b55c:	480a      	ldr	r0, [pc, #40]	; (800b588 <USBH_LL_Init+0x74>)
 800b55e:	f7f6 f9f5 	bl	800194c <HAL_HCD_Init>
 800b562:	4603      	mov	r3, r0
 800b564:	2b00      	cmp	r3, #0
 800b566:	d001      	beq.n	800b56c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b568:	f7f5 fb56 	bl	8000c18 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b56c:	4806      	ldr	r0, [pc, #24]	; (800b588 <USBH_LL_Init+0x74>)
 800b56e:	f7f6 fde4 	bl	800213a <HAL_HCD_GetCurrentFrame>
 800b572:	4603      	mov	r3, r0
 800b574:	4619      	mov	r1, r3
 800b576:	6878      	ldr	r0, [r7, #4]
 800b578:	f7fc fc62 	bl	8007e40 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b57c:	2300      	movs	r3, #0
}
 800b57e:	4618      	mov	r0, r3
 800b580:	3708      	adds	r7, #8
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}
 800b586:	bf00      	nop
 800b588:	20000b48 	.word	0x20000b48

0800b58c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b084      	sub	sp, #16
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b594:	2300      	movs	r3, #0
 800b596:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b598:	2300      	movs	r3, #0
 800b59a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	f7f6 fd53 	bl	800204e <HAL_HCD_Start>
 800b5a8:	4603      	mov	r3, r0
 800b5aa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b5ac:	7bfb      	ldrb	r3, [r7, #15]
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f000 f95c 	bl	800b86c <USBH_Get_USB_Status>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b5b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	3710      	adds	r7, #16
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	bd80      	pop	{r7, pc}

0800b5c2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b5c2:	b580      	push	{r7, lr}
 800b5c4:	b084      	sub	sp, #16
 800b5c6:	af00      	add	r7, sp, #0
 800b5c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b5d8:	4618      	mov	r0, r3
 800b5da:	f7f6 fd5b 	bl	8002094 <HAL_HCD_Stop>
 800b5de:	4603      	mov	r3, r0
 800b5e0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b5e2:	7bfb      	ldrb	r3, [r7, #15]
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	f000 f941 	bl	800b86c <USBH_Get_USB_Status>
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b5ee:	7bbb      	ldrb	r3, [r7, #14]
}
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	3710      	adds	r7, #16
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	bd80      	pop	{r7, pc}

0800b5f8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b084      	sub	sp, #16
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b600:	2301      	movs	r3, #1
 800b602:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b60a:	4618      	mov	r0, r3
 800b60c:	f7f6 fda3 	bl	8002156 <HAL_HCD_GetCurrentSpeed>
 800b610:	4603      	mov	r3, r0
 800b612:	2b02      	cmp	r3, #2
 800b614:	d00c      	beq.n	800b630 <USBH_LL_GetSpeed+0x38>
 800b616:	2b02      	cmp	r3, #2
 800b618:	d80d      	bhi.n	800b636 <USBH_LL_GetSpeed+0x3e>
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d002      	beq.n	800b624 <USBH_LL_GetSpeed+0x2c>
 800b61e:	2b01      	cmp	r3, #1
 800b620:	d003      	beq.n	800b62a <USBH_LL_GetSpeed+0x32>
 800b622:	e008      	b.n	800b636 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b624:	2300      	movs	r3, #0
 800b626:	73fb      	strb	r3, [r7, #15]
    break;
 800b628:	e008      	b.n	800b63c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b62a:	2301      	movs	r3, #1
 800b62c:	73fb      	strb	r3, [r7, #15]
    break;
 800b62e:	e005      	b.n	800b63c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b630:	2302      	movs	r3, #2
 800b632:	73fb      	strb	r3, [r7, #15]
    break;
 800b634:	e002      	b.n	800b63c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b636:	2301      	movs	r3, #1
 800b638:	73fb      	strb	r3, [r7, #15]
    break;
 800b63a:	bf00      	nop
  }
  return  speed;
 800b63c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b63e:	4618      	mov	r0, r3
 800b640:	3710      	adds	r7, #16
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}

0800b646 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b646:	b580      	push	{r7, lr}
 800b648:	b084      	sub	sp, #16
 800b64a:	af00      	add	r7, sp, #0
 800b64c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b64e:	2300      	movs	r3, #0
 800b650:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b652:	2300      	movs	r3, #0
 800b654:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b65c:	4618      	mov	r0, r3
 800b65e:	f7f6 fd36 	bl	80020ce <HAL_HCD_ResetPort>
 800b662:	4603      	mov	r3, r0
 800b664:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b666:	7bfb      	ldrb	r3, [r7, #15]
 800b668:	4618      	mov	r0, r3
 800b66a:	f000 f8ff 	bl	800b86c <USBH_Get_USB_Status>
 800b66e:	4603      	mov	r3, r0
 800b670:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b672:	7bbb      	ldrb	r3, [r7, #14]
}
 800b674:	4618      	mov	r0, r3
 800b676:	3710      	adds	r7, #16
 800b678:	46bd      	mov	sp, r7
 800b67a:	bd80      	pop	{r7, pc}

0800b67c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b082      	sub	sp, #8
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
 800b684:	460b      	mov	r3, r1
 800b686:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b68e:	78fa      	ldrb	r2, [r7, #3]
 800b690:	4611      	mov	r1, r2
 800b692:	4618      	mov	r0, r3
 800b694:	f7f6 fd3d 	bl	8002112 <HAL_HCD_HC_GetXferCount>
 800b698:	4603      	mov	r3, r0
}
 800b69a:	4618      	mov	r0, r3
 800b69c:	3708      	adds	r7, #8
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}

0800b6a2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b6a2:	b590      	push	{r4, r7, lr}
 800b6a4:	b089      	sub	sp, #36	; 0x24
 800b6a6:	af04      	add	r7, sp, #16
 800b6a8:	6078      	str	r0, [r7, #4]
 800b6aa:	4608      	mov	r0, r1
 800b6ac:	4611      	mov	r1, r2
 800b6ae:	461a      	mov	r2, r3
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	70fb      	strb	r3, [r7, #3]
 800b6b4:	460b      	mov	r3, r1
 800b6b6:	70bb      	strb	r3, [r7, #2]
 800b6b8:	4613      	mov	r3, r2
 800b6ba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6bc:	2300      	movs	r3, #0
 800b6be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b6ca:	787c      	ldrb	r4, [r7, #1]
 800b6cc:	78ba      	ldrb	r2, [r7, #2]
 800b6ce:	78f9      	ldrb	r1, [r7, #3]
 800b6d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b6d2:	9302      	str	r3, [sp, #8]
 800b6d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b6d8:	9301      	str	r3, [sp, #4]
 800b6da:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b6de:	9300      	str	r3, [sp, #0]
 800b6e0:	4623      	mov	r3, r4
 800b6e2:	f7f6 f9a1 	bl	8001a28 <HAL_HCD_HC_Init>
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b6ea:	7bfb      	ldrb	r3, [r7, #15]
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	f000 f8bd 	bl	800b86c <USBH_Get_USB_Status>
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b6f6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	3714      	adds	r7, #20
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bd90      	pop	{r4, r7, pc}

0800b700 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b084      	sub	sp, #16
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
 800b708:	460b      	mov	r3, r1
 800b70a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b70c:	2300      	movs	r3, #0
 800b70e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b710:	2300      	movs	r3, #0
 800b712:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b71a:	78fa      	ldrb	r2, [r7, #3]
 800b71c:	4611      	mov	r1, r2
 800b71e:	4618      	mov	r0, r3
 800b720:	f7f6 fa11 	bl	8001b46 <HAL_HCD_HC_Halt>
 800b724:	4603      	mov	r3, r0
 800b726:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b728:	7bfb      	ldrb	r3, [r7, #15]
 800b72a:	4618      	mov	r0, r3
 800b72c:	f000 f89e 	bl	800b86c <USBH_Get_USB_Status>
 800b730:	4603      	mov	r3, r0
 800b732:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b734:	7bbb      	ldrb	r3, [r7, #14]
}
 800b736:	4618      	mov	r0, r3
 800b738:	3710      	adds	r7, #16
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bd80      	pop	{r7, pc}

0800b73e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b73e:	b590      	push	{r4, r7, lr}
 800b740:	b089      	sub	sp, #36	; 0x24
 800b742:	af04      	add	r7, sp, #16
 800b744:	6078      	str	r0, [r7, #4]
 800b746:	4608      	mov	r0, r1
 800b748:	4611      	mov	r1, r2
 800b74a:	461a      	mov	r2, r3
 800b74c:	4603      	mov	r3, r0
 800b74e:	70fb      	strb	r3, [r7, #3]
 800b750:	460b      	mov	r3, r1
 800b752:	70bb      	strb	r3, [r7, #2]
 800b754:	4613      	mov	r3, r2
 800b756:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b758:	2300      	movs	r3, #0
 800b75a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b75c:	2300      	movs	r3, #0
 800b75e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b766:	787c      	ldrb	r4, [r7, #1]
 800b768:	78ba      	ldrb	r2, [r7, #2]
 800b76a:	78f9      	ldrb	r1, [r7, #3]
 800b76c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b770:	9303      	str	r3, [sp, #12]
 800b772:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b774:	9302      	str	r3, [sp, #8]
 800b776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b778:	9301      	str	r3, [sp, #4]
 800b77a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b77e:	9300      	str	r3, [sp, #0]
 800b780:	4623      	mov	r3, r4
 800b782:	f7f6 fa03 	bl	8001b8c <HAL_HCD_HC_SubmitRequest>
 800b786:	4603      	mov	r3, r0
 800b788:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b78a:	7bfb      	ldrb	r3, [r7, #15]
 800b78c:	4618      	mov	r0, r3
 800b78e:	f000 f86d 	bl	800b86c <USBH_Get_USB_Status>
 800b792:	4603      	mov	r3, r0
 800b794:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b796:	7bbb      	ldrb	r3, [r7, #14]
}
 800b798:	4618      	mov	r0, r3
 800b79a:	3714      	adds	r7, #20
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd90      	pop	{r4, r7, pc}

0800b7a0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b082      	sub	sp, #8
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
 800b7a8:	460b      	mov	r3, r1
 800b7aa:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b7b2:	78fa      	ldrb	r2, [r7, #3]
 800b7b4:	4611      	mov	r1, r2
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	f7f6 fc97 	bl	80020ea <HAL_HCD_HC_GetURBState>
 800b7bc:	4603      	mov	r3, r0
}
 800b7be:	4618      	mov	r0, r3
 800b7c0:	3708      	adds	r7, #8
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bd80      	pop	{r7, pc}

0800b7c6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b7c6:	b580      	push	{r7, lr}
 800b7c8:	b082      	sub	sp, #8
 800b7ca:	af00      	add	r7, sp, #0
 800b7cc:	6078      	str	r0, [r7, #4]
 800b7ce:	460b      	mov	r3, r1
 800b7d0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b7d8:	2b01      	cmp	r3, #1
 800b7da:	d103      	bne.n	800b7e4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b7dc:	78fb      	ldrb	r3, [r7, #3]
 800b7de:	4618      	mov	r0, r3
 800b7e0:	f000 f870 	bl	800b8c4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b7e4:	20c8      	movs	r0, #200	; 0xc8
 800b7e6:	f7f5 fc57 	bl	8001098 <HAL_Delay>
  return USBH_OK;
 800b7ea:	2300      	movs	r3, #0
}
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	3708      	adds	r7, #8
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bd80      	pop	{r7, pc}

0800b7f4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b7f4:	b480      	push	{r7}
 800b7f6:	b085      	sub	sp, #20
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
 800b7fc:	460b      	mov	r3, r1
 800b7fe:	70fb      	strb	r3, [r7, #3]
 800b800:	4613      	mov	r3, r2
 800b802:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b80a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b80c:	78fb      	ldrb	r3, [r7, #3]
 800b80e:	68fa      	ldr	r2, [r7, #12]
 800b810:	212c      	movs	r1, #44	; 0x2c
 800b812:	fb01 f303 	mul.w	r3, r1, r3
 800b816:	4413      	add	r3, r2
 800b818:	333b      	adds	r3, #59	; 0x3b
 800b81a:	781b      	ldrb	r3, [r3, #0]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d009      	beq.n	800b834 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b820:	78fb      	ldrb	r3, [r7, #3]
 800b822:	68fa      	ldr	r2, [r7, #12]
 800b824:	212c      	movs	r1, #44	; 0x2c
 800b826:	fb01 f303 	mul.w	r3, r1, r3
 800b82a:	4413      	add	r3, r2
 800b82c:	3354      	adds	r3, #84	; 0x54
 800b82e:	78ba      	ldrb	r2, [r7, #2]
 800b830:	701a      	strb	r2, [r3, #0]
 800b832:	e008      	b.n	800b846 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b834:	78fb      	ldrb	r3, [r7, #3]
 800b836:	68fa      	ldr	r2, [r7, #12]
 800b838:	212c      	movs	r1, #44	; 0x2c
 800b83a:	fb01 f303 	mul.w	r3, r1, r3
 800b83e:	4413      	add	r3, r2
 800b840:	3355      	adds	r3, #85	; 0x55
 800b842:	78ba      	ldrb	r2, [r7, #2]
 800b844:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b846:	2300      	movs	r3, #0
}
 800b848:	4618      	mov	r0, r3
 800b84a:	3714      	adds	r7, #20
 800b84c:	46bd      	mov	sp, r7
 800b84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b852:	4770      	bx	lr

0800b854 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b082      	sub	sp, #8
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f7f5 fc1b 	bl	8001098 <HAL_Delay>
}
 800b862:	bf00      	nop
 800b864:	3708      	adds	r7, #8
 800b866:	46bd      	mov	sp, r7
 800b868:	bd80      	pop	{r7, pc}
	...

0800b86c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b86c:	b480      	push	{r7}
 800b86e:	b085      	sub	sp, #20
 800b870:	af00      	add	r7, sp, #0
 800b872:	4603      	mov	r3, r0
 800b874:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b876:	2300      	movs	r3, #0
 800b878:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b87a:	79fb      	ldrb	r3, [r7, #7]
 800b87c:	2b03      	cmp	r3, #3
 800b87e:	d817      	bhi.n	800b8b0 <USBH_Get_USB_Status+0x44>
 800b880:	a201      	add	r2, pc, #4	; (adr r2, 800b888 <USBH_Get_USB_Status+0x1c>)
 800b882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b886:	bf00      	nop
 800b888:	0800b899 	.word	0x0800b899
 800b88c:	0800b89f 	.word	0x0800b89f
 800b890:	0800b8a5 	.word	0x0800b8a5
 800b894:	0800b8ab 	.word	0x0800b8ab
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b898:	2300      	movs	r3, #0
 800b89a:	73fb      	strb	r3, [r7, #15]
    break;
 800b89c:	e00b      	b.n	800b8b6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b89e:	2302      	movs	r3, #2
 800b8a0:	73fb      	strb	r3, [r7, #15]
    break;
 800b8a2:	e008      	b.n	800b8b6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b8a4:	2301      	movs	r3, #1
 800b8a6:	73fb      	strb	r3, [r7, #15]
    break;
 800b8a8:	e005      	b.n	800b8b6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b8aa:	2302      	movs	r3, #2
 800b8ac:	73fb      	strb	r3, [r7, #15]
    break;
 800b8ae:	e002      	b.n	800b8b6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b8b0:	2302      	movs	r3, #2
 800b8b2:	73fb      	strb	r3, [r7, #15]
    break;
 800b8b4:	bf00      	nop
  }
  return usb_status;
 800b8b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	3714      	adds	r7, #20
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c2:	4770      	bx	lr

0800b8c4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b084      	sub	sp, #16
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b8ce:	79fb      	ldrb	r3, [r7, #7]
 800b8d0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b8d2:	79fb      	ldrb	r3, [r7, #7]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d102      	bne.n	800b8de <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800b8d8:	2301      	movs	r3, #1
 800b8da:	73fb      	strb	r3, [r7, #15]
 800b8dc:	e001      	b.n	800b8e2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800b8de:	2300      	movs	r3, #0
 800b8e0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b8e2:	7bfb      	ldrb	r3, [r7, #15]
 800b8e4:	461a      	mov	r2, r3
 800b8e6:	2101      	movs	r1, #1
 800b8e8:	4803      	ldr	r0, [pc, #12]	; (800b8f8 <MX_DriverVbusFS+0x34>)
 800b8ea:	f7f5 ffd5 	bl	8001898 <HAL_GPIO_WritePin>
}
 800b8ee:	bf00      	nop
 800b8f0:	3710      	adds	r7, #16
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}
 800b8f6:	bf00      	nop
 800b8f8:	40020800 	.word	0x40020800

0800b8fc <__errno>:
 800b8fc:	4b01      	ldr	r3, [pc, #4]	; (800b904 <__errno+0x8>)
 800b8fe:	6818      	ldr	r0, [r3, #0]
 800b900:	4770      	bx	lr
 800b902:	bf00      	nop
 800b904:	20000044 	.word	0x20000044

0800b908 <__libc_init_array>:
 800b908:	b570      	push	{r4, r5, r6, lr}
 800b90a:	4d0d      	ldr	r5, [pc, #52]	; (800b940 <__libc_init_array+0x38>)
 800b90c:	4c0d      	ldr	r4, [pc, #52]	; (800b944 <__libc_init_array+0x3c>)
 800b90e:	1b64      	subs	r4, r4, r5
 800b910:	10a4      	asrs	r4, r4, #2
 800b912:	2600      	movs	r6, #0
 800b914:	42a6      	cmp	r6, r4
 800b916:	d109      	bne.n	800b92c <__libc_init_array+0x24>
 800b918:	4d0b      	ldr	r5, [pc, #44]	; (800b948 <__libc_init_array+0x40>)
 800b91a:	4c0c      	ldr	r4, [pc, #48]	; (800b94c <__libc_init_array+0x44>)
 800b91c:	f000 fc78 	bl	800c210 <_init>
 800b920:	1b64      	subs	r4, r4, r5
 800b922:	10a4      	asrs	r4, r4, #2
 800b924:	2600      	movs	r6, #0
 800b926:	42a6      	cmp	r6, r4
 800b928:	d105      	bne.n	800b936 <__libc_init_array+0x2e>
 800b92a:	bd70      	pop	{r4, r5, r6, pc}
 800b92c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b930:	4798      	blx	r3
 800b932:	3601      	adds	r6, #1
 800b934:	e7ee      	b.n	800b914 <__libc_init_array+0xc>
 800b936:	f855 3b04 	ldr.w	r3, [r5], #4
 800b93a:	4798      	blx	r3
 800b93c:	3601      	adds	r6, #1
 800b93e:	e7f2      	b.n	800b926 <__libc_init_array+0x1e>
 800b940:	0800c690 	.word	0x0800c690
 800b944:	0800c690 	.word	0x0800c690
 800b948:	0800c690 	.word	0x0800c690
 800b94c:	0800c694 	.word	0x0800c694

0800b950 <malloc>:
 800b950:	4b02      	ldr	r3, [pc, #8]	; (800b95c <malloc+0xc>)
 800b952:	4601      	mov	r1, r0
 800b954:	6818      	ldr	r0, [r3, #0]
 800b956:	f000 b863 	b.w	800ba20 <_malloc_r>
 800b95a:	bf00      	nop
 800b95c:	20000044 	.word	0x20000044

0800b960 <free>:
 800b960:	4b02      	ldr	r3, [pc, #8]	; (800b96c <free+0xc>)
 800b962:	4601      	mov	r1, r0
 800b964:	6818      	ldr	r0, [r3, #0]
 800b966:	f000 b80b 	b.w	800b980 <_free_r>
 800b96a:	bf00      	nop
 800b96c:	20000044 	.word	0x20000044

0800b970 <memset>:
 800b970:	4402      	add	r2, r0
 800b972:	4603      	mov	r3, r0
 800b974:	4293      	cmp	r3, r2
 800b976:	d100      	bne.n	800b97a <memset+0xa>
 800b978:	4770      	bx	lr
 800b97a:	f803 1b01 	strb.w	r1, [r3], #1
 800b97e:	e7f9      	b.n	800b974 <memset+0x4>

0800b980 <_free_r>:
 800b980:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b982:	2900      	cmp	r1, #0
 800b984:	d048      	beq.n	800ba18 <_free_r+0x98>
 800b986:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b98a:	9001      	str	r0, [sp, #4]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	f1a1 0404 	sub.w	r4, r1, #4
 800b992:	bfb8      	it	lt
 800b994:	18e4      	addlt	r4, r4, r3
 800b996:	f000 f8e7 	bl	800bb68 <__malloc_lock>
 800b99a:	4a20      	ldr	r2, [pc, #128]	; (800ba1c <_free_r+0x9c>)
 800b99c:	9801      	ldr	r0, [sp, #4]
 800b99e:	6813      	ldr	r3, [r2, #0]
 800b9a0:	4615      	mov	r5, r2
 800b9a2:	b933      	cbnz	r3, 800b9b2 <_free_r+0x32>
 800b9a4:	6063      	str	r3, [r4, #4]
 800b9a6:	6014      	str	r4, [r2, #0]
 800b9a8:	b003      	add	sp, #12
 800b9aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b9ae:	f000 b8e1 	b.w	800bb74 <__malloc_unlock>
 800b9b2:	42a3      	cmp	r3, r4
 800b9b4:	d90b      	bls.n	800b9ce <_free_r+0x4e>
 800b9b6:	6821      	ldr	r1, [r4, #0]
 800b9b8:	1862      	adds	r2, r4, r1
 800b9ba:	4293      	cmp	r3, r2
 800b9bc:	bf04      	itt	eq
 800b9be:	681a      	ldreq	r2, [r3, #0]
 800b9c0:	685b      	ldreq	r3, [r3, #4]
 800b9c2:	6063      	str	r3, [r4, #4]
 800b9c4:	bf04      	itt	eq
 800b9c6:	1852      	addeq	r2, r2, r1
 800b9c8:	6022      	streq	r2, [r4, #0]
 800b9ca:	602c      	str	r4, [r5, #0]
 800b9cc:	e7ec      	b.n	800b9a8 <_free_r+0x28>
 800b9ce:	461a      	mov	r2, r3
 800b9d0:	685b      	ldr	r3, [r3, #4]
 800b9d2:	b10b      	cbz	r3, 800b9d8 <_free_r+0x58>
 800b9d4:	42a3      	cmp	r3, r4
 800b9d6:	d9fa      	bls.n	800b9ce <_free_r+0x4e>
 800b9d8:	6811      	ldr	r1, [r2, #0]
 800b9da:	1855      	adds	r5, r2, r1
 800b9dc:	42a5      	cmp	r5, r4
 800b9de:	d10b      	bne.n	800b9f8 <_free_r+0x78>
 800b9e0:	6824      	ldr	r4, [r4, #0]
 800b9e2:	4421      	add	r1, r4
 800b9e4:	1854      	adds	r4, r2, r1
 800b9e6:	42a3      	cmp	r3, r4
 800b9e8:	6011      	str	r1, [r2, #0]
 800b9ea:	d1dd      	bne.n	800b9a8 <_free_r+0x28>
 800b9ec:	681c      	ldr	r4, [r3, #0]
 800b9ee:	685b      	ldr	r3, [r3, #4]
 800b9f0:	6053      	str	r3, [r2, #4]
 800b9f2:	4421      	add	r1, r4
 800b9f4:	6011      	str	r1, [r2, #0]
 800b9f6:	e7d7      	b.n	800b9a8 <_free_r+0x28>
 800b9f8:	d902      	bls.n	800ba00 <_free_r+0x80>
 800b9fa:	230c      	movs	r3, #12
 800b9fc:	6003      	str	r3, [r0, #0]
 800b9fe:	e7d3      	b.n	800b9a8 <_free_r+0x28>
 800ba00:	6825      	ldr	r5, [r4, #0]
 800ba02:	1961      	adds	r1, r4, r5
 800ba04:	428b      	cmp	r3, r1
 800ba06:	bf04      	itt	eq
 800ba08:	6819      	ldreq	r1, [r3, #0]
 800ba0a:	685b      	ldreq	r3, [r3, #4]
 800ba0c:	6063      	str	r3, [r4, #4]
 800ba0e:	bf04      	itt	eq
 800ba10:	1949      	addeq	r1, r1, r5
 800ba12:	6021      	streq	r1, [r4, #0]
 800ba14:	6054      	str	r4, [r2, #4]
 800ba16:	e7c7      	b.n	800b9a8 <_free_r+0x28>
 800ba18:	b003      	add	sp, #12
 800ba1a:	bd30      	pop	{r4, r5, pc}
 800ba1c:	20000204 	.word	0x20000204

0800ba20 <_malloc_r>:
 800ba20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba22:	1ccd      	adds	r5, r1, #3
 800ba24:	f025 0503 	bic.w	r5, r5, #3
 800ba28:	3508      	adds	r5, #8
 800ba2a:	2d0c      	cmp	r5, #12
 800ba2c:	bf38      	it	cc
 800ba2e:	250c      	movcc	r5, #12
 800ba30:	2d00      	cmp	r5, #0
 800ba32:	4606      	mov	r6, r0
 800ba34:	db01      	blt.n	800ba3a <_malloc_r+0x1a>
 800ba36:	42a9      	cmp	r1, r5
 800ba38:	d903      	bls.n	800ba42 <_malloc_r+0x22>
 800ba3a:	230c      	movs	r3, #12
 800ba3c:	6033      	str	r3, [r6, #0]
 800ba3e:	2000      	movs	r0, #0
 800ba40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba42:	f000 f891 	bl	800bb68 <__malloc_lock>
 800ba46:	4921      	ldr	r1, [pc, #132]	; (800bacc <_malloc_r+0xac>)
 800ba48:	680a      	ldr	r2, [r1, #0]
 800ba4a:	4614      	mov	r4, r2
 800ba4c:	b99c      	cbnz	r4, 800ba76 <_malloc_r+0x56>
 800ba4e:	4f20      	ldr	r7, [pc, #128]	; (800bad0 <_malloc_r+0xb0>)
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	b923      	cbnz	r3, 800ba5e <_malloc_r+0x3e>
 800ba54:	4621      	mov	r1, r4
 800ba56:	4630      	mov	r0, r6
 800ba58:	f000 f83c 	bl	800bad4 <_sbrk_r>
 800ba5c:	6038      	str	r0, [r7, #0]
 800ba5e:	4629      	mov	r1, r5
 800ba60:	4630      	mov	r0, r6
 800ba62:	f000 f837 	bl	800bad4 <_sbrk_r>
 800ba66:	1c43      	adds	r3, r0, #1
 800ba68:	d123      	bne.n	800bab2 <_malloc_r+0x92>
 800ba6a:	230c      	movs	r3, #12
 800ba6c:	6033      	str	r3, [r6, #0]
 800ba6e:	4630      	mov	r0, r6
 800ba70:	f000 f880 	bl	800bb74 <__malloc_unlock>
 800ba74:	e7e3      	b.n	800ba3e <_malloc_r+0x1e>
 800ba76:	6823      	ldr	r3, [r4, #0]
 800ba78:	1b5b      	subs	r3, r3, r5
 800ba7a:	d417      	bmi.n	800baac <_malloc_r+0x8c>
 800ba7c:	2b0b      	cmp	r3, #11
 800ba7e:	d903      	bls.n	800ba88 <_malloc_r+0x68>
 800ba80:	6023      	str	r3, [r4, #0]
 800ba82:	441c      	add	r4, r3
 800ba84:	6025      	str	r5, [r4, #0]
 800ba86:	e004      	b.n	800ba92 <_malloc_r+0x72>
 800ba88:	6863      	ldr	r3, [r4, #4]
 800ba8a:	42a2      	cmp	r2, r4
 800ba8c:	bf0c      	ite	eq
 800ba8e:	600b      	streq	r3, [r1, #0]
 800ba90:	6053      	strne	r3, [r2, #4]
 800ba92:	4630      	mov	r0, r6
 800ba94:	f000 f86e 	bl	800bb74 <__malloc_unlock>
 800ba98:	f104 000b 	add.w	r0, r4, #11
 800ba9c:	1d23      	adds	r3, r4, #4
 800ba9e:	f020 0007 	bic.w	r0, r0, #7
 800baa2:	1ac2      	subs	r2, r0, r3
 800baa4:	d0cc      	beq.n	800ba40 <_malloc_r+0x20>
 800baa6:	1a1b      	subs	r3, r3, r0
 800baa8:	50a3      	str	r3, [r4, r2]
 800baaa:	e7c9      	b.n	800ba40 <_malloc_r+0x20>
 800baac:	4622      	mov	r2, r4
 800baae:	6864      	ldr	r4, [r4, #4]
 800bab0:	e7cc      	b.n	800ba4c <_malloc_r+0x2c>
 800bab2:	1cc4      	adds	r4, r0, #3
 800bab4:	f024 0403 	bic.w	r4, r4, #3
 800bab8:	42a0      	cmp	r0, r4
 800baba:	d0e3      	beq.n	800ba84 <_malloc_r+0x64>
 800babc:	1a21      	subs	r1, r4, r0
 800babe:	4630      	mov	r0, r6
 800bac0:	f000 f808 	bl	800bad4 <_sbrk_r>
 800bac4:	3001      	adds	r0, #1
 800bac6:	d1dd      	bne.n	800ba84 <_malloc_r+0x64>
 800bac8:	e7cf      	b.n	800ba6a <_malloc_r+0x4a>
 800baca:	bf00      	nop
 800bacc:	20000204 	.word	0x20000204
 800bad0:	20000208 	.word	0x20000208

0800bad4 <_sbrk_r>:
 800bad4:	b538      	push	{r3, r4, r5, lr}
 800bad6:	4d06      	ldr	r5, [pc, #24]	; (800baf0 <_sbrk_r+0x1c>)
 800bad8:	2300      	movs	r3, #0
 800bada:	4604      	mov	r4, r0
 800badc:	4608      	mov	r0, r1
 800bade:	602b      	str	r3, [r5, #0]
 800bae0:	f7f5 f984 	bl	8000dec <_sbrk>
 800bae4:	1c43      	adds	r3, r0, #1
 800bae6:	d102      	bne.n	800baee <_sbrk_r+0x1a>
 800bae8:	682b      	ldr	r3, [r5, #0]
 800baea:	b103      	cbz	r3, 800baee <_sbrk_r+0x1a>
 800baec:	6023      	str	r3, [r4, #0]
 800baee:	bd38      	pop	{r3, r4, r5, pc}
 800baf0:	20000e4c 	.word	0x20000e4c

0800baf4 <_vsniprintf_r>:
 800baf4:	b530      	push	{r4, r5, lr}
 800baf6:	1e14      	subs	r4, r2, #0
 800baf8:	4605      	mov	r5, r0
 800bafa:	b09b      	sub	sp, #108	; 0x6c
 800bafc:	4618      	mov	r0, r3
 800bafe:	da05      	bge.n	800bb0c <_vsniprintf_r+0x18>
 800bb00:	238b      	movs	r3, #139	; 0x8b
 800bb02:	602b      	str	r3, [r5, #0]
 800bb04:	f04f 30ff 	mov.w	r0, #4294967295
 800bb08:	b01b      	add	sp, #108	; 0x6c
 800bb0a:	bd30      	pop	{r4, r5, pc}
 800bb0c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800bb10:	f8ad 300c 	strh.w	r3, [sp, #12]
 800bb14:	bf14      	ite	ne
 800bb16:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bb1a:	4623      	moveq	r3, r4
 800bb1c:	9302      	str	r3, [sp, #8]
 800bb1e:	9305      	str	r3, [sp, #20]
 800bb20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bb24:	9100      	str	r1, [sp, #0]
 800bb26:	9104      	str	r1, [sp, #16]
 800bb28:	f8ad 300e 	strh.w	r3, [sp, #14]
 800bb2c:	4602      	mov	r2, r0
 800bb2e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800bb30:	4669      	mov	r1, sp
 800bb32:	4628      	mov	r0, r5
 800bb34:	f000 f880 	bl	800bc38 <_svfiprintf_r>
 800bb38:	1c43      	adds	r3, r0, #1
 800bb3a:	bfbc      	itt	lt
 800bb3c:	238b      	movlt	r3, #139	; 0x8b
 800bb3e:	602b      	strlt	r3, [r5, #0]
 800bb40:	2c00      	cmp	r4, #0
 800bb42:	d0e1      	beq.n	800bb08 <_vsniprintf_r+0x14>
 800bb44:	9b00      	ldr	r3, [sp, #0]
 800bb46:	2200      	movs	r2, #0
 800bb48:	701a      	strb	r2, [r3, #0]
 800bb4a:	e7dd      	b.n	800bb08 <_vsniprintf_r+0x14>

0800bb4c <vsniprintf>:
 800bb4c:	b507      	push	{r0, r1, r2, lr}
 800bb4e:	9300      	str	r3, [sp, #0]
 800bb50:	4613      	mov	r3, r2
 800bb52:	460a      	mov	r2, r1
 800bb54:	4601      	mov	r1, r0
 800bb56:	4803      	ldr	r0, [pc, #12]	; (800bb64 <vsniprintf+0x18>)
 800bb58:	6800      	ldr	r0, [r0, #0]
 800bb5a:	f7ff ffcb 	bl	800baf4 <_vsniprintf_r>
 800bb5e:	b003      	add	sp, #12
 800bb60:	f85d fb04 	ldr.w	pc, [sp], #4
 800bb64:	20000044 	.word	0x20000044

0800bb68 <__malloc_lock>:
 800bb68:	4801      	ldr	r0, [pc, #4]	; (800bb70 <__malloc_lock+0x8>)
 800bb6a:	f000 baf9 	b.w	800c160 <__retarget_lock_acquire_recursive>
 800bb6e:	bf00      	nop
 800bb70:	20000e54 	.word	0x20000e54

0800bb74 <__malloc_unlock>:
 800bb74:	4801      	ldr	r0, [pc, #4]	; (800bb7c <__malloc_unlock+0x8>)
 800bb76:	f000 baf4 	b.w	800c162 <__retarget_lock_release_recursive>
 800bb7a:	bf00      	nop
 800bb7c:	20000e54 	.word	0x20000e54

0800bb80 <__ssputs_r>:
 800bb80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb84:	688e      	ldr	r6, [r1, #8]
 800bb86:	429e      	cmp	r6, r3
 800bb88:	4682      	mov	sl, r0
 800bb8a:	460c      	mov	r4, r1
 800bb8c:	4690      	mov	r8, r2
 800bb8e:	461f      	mov	r7, r3
 800bb90:	d838      	bhi.n	800bc04 <__ssputs_r+0x84>
 800bb92:	898a      	ldrh	r2, [r1, #12]
 800bb94:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bb98:	d032      	beq.n	800bc00 <__ssputs_r+0x80>
 800bb9a:	6825      	ldr	r5, [r4, #0]
 800bb9c:	6909      	ldr	r1, [r1, #16]
 800bb9e:	eba5 0901 	sub.w	r9, r5, r1
 800bba2:	6965      	ldr	r5, [r4, #20]
 800bba4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bba8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bbac:	3301      	adds	r3, #1
 800bbae:	444b      	add	r3, r9
 800bbb0:	106d      	asrs	r5, r5, #1
 800bbb2:	429d      	cmp	r5, r3
 800bbb4:	bf38      	it	cc
 800bbb6:	461d      	movcc	r5, r3
 800bbb8:	0553      	lsls	r3, r2, #21
 800bbba:	d531      	bpl.n	800bc20 <__ssputs_r+0xa0>
 800bbbc:	4629      	mov	r1, r5
 800bbbe:	f7ff ff2f 	bl	800ba20 <_malloc_r>
 800bbc2:	4606      	mov	r6, r0
 800bbc4:	b950      	cbnz	r0, 800bbdc <__ssputs_r+0x5c>
 800bbc6:	230c      	movs	r3, #12
 800bbc8:	f8ca 3000 	str.w	r3, [sl]
 800bbcc:	89a3      	ldrh	r3, [r4, #12]
 800bbce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbd2:	81a3      	strh	r3, [r4, #12]
 800bbd4:	f04f 30ff 	mov.w	r0, #4294967295
 800bbd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbdc:	6921      	ldr	r1, [r4, #16]
 800bbde:	464a      	mov	r2, r9
 800bbe0:	f000 fac0 	bl	800c164 <memcpy>
 800bbe4:	89a3      	ldrh	r3, [r4, #12]
 800bbe6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bbea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bbee:	81a3      	strh	r3, [r4, #12]
 800bbf0:	6126      	str	r6, [r4, #16]
 800bbf2:	6165      	str	r5, [r4, #20]
 800bbf4:	444e      	add	r6, r9
 800bbf6:	eba5 0509 	sub.w	r5, r5, r9
 800bbfa:	6026      	str	r6, [r4, #0]
 800bbfc:	60a5      	str	r5, [r4, #8]
 800bbfe:	463e      	mov	r6, r7
 800bc00:	42be      	cmp	r6, r7
 800bc02:	d900      	bls.n	800bc06 <__ssputs_r+0x86>
 800bc04:	463e      	mov	r6, r7
 800bc06:	4632      	mov	r2, r6
 800bc08:	6820      	ldr	r0, [r4, #0]
 800bc0a:	4641      	mov	r1, r8
 800bc0c:	f000 fab8 	bl	800c180 <memmove>
 800bc10:	68a3      	ldr	r3, [r4, #8]
 800bc12:	6822      	ldr	r2, [r4, #0]
 800bc14:	1b9b      	subs	r3, r3, r6
 800bc16:	4432      	add	r2, r6
 800bc18:	60a3      	str	r3, [r4, #8]
 800bc1a:	6022      	str	r2, [r4, #0]
 800bc1c:	2000      	movs	r0, #0
 800bc1e:	e7db      	b.n	800bbd8 <__ssputs_r+0x58>
 800bc20:	462a      	mov	r2, r5
 800bc22:	f000 fac7 	bl	800c1b4 <_realloc_r>
 800bc26:	4606      	mov	r6, r0
 800bc28:	2800      	cmp	r0, #0
 800bc2a:	d1e1      	bne.n	800bbf0 <__ssputs_r+0x70>
 800bc2c:	6921      	ldr	r1, [r4, #16]
 800bc2e:	4650      	mov	r0, sl
 800bc30:	f7ff fea6 	bl	800b980 <_free_r>
 800bc34:	e7c7      	b.n	800bbc6 <__ssputs_r+0x46>
	...

0800bc38 <_svfiprintf_r>:
 800bc38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc3c:	4698      	mov	r8, r3
 800bc3e:	898b      	ldrh	r3, [r1, #12]
 800bc40:	061b      	lsls	r3, r3, #24
 800bc42:	b09d      	sub	sp, #116	; 0x74
 800bc44:	4607      	mov	r7, r0
 800bc46:	460d      	mov	r5, r1
 800bc48:	4614      	mov	r4, r2
 800bc4a:	d50e      	bpl.n	800bc6a <_svfiprintf_r+0x32>
 800bc4c:	690b      	ldr	r3, [r1, #16]
 800bc4e:	b963      	cbnz	r3, 800bc6a <_svfiprintf_r+0x32>
 800bc50:	2140      	movs	r1, #64	; 0x40
 800bc52:	f7ff fee5 	bl	800ba20 <_malloc_r>
 800bc56:	6028      	str	r0, [r5, #0]
 800bc58:	6128      	str	r0, [r5, #16]
 800bc5a:	b920      	cbnz	r0, 800bc66 <_svfiprintf_r+0x2e>
 800bc5c:	230c      	movs	r3, #12
 800bc5e:	603b      	str	r3, [r7, #0]
 800bc60:	f04f 30ff 	mov.w	r0, #4294967295
 800bc64:	e0d1      	b.n	800be0a <_svfiprintf_r+0x1d2>
 800bc66:	2340      	movs	r3, #64	; 0x40
 800bc68:	616b      	str	r3, [r5, #20]
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	9309      	str	r3, [sp, #36]	; 0x24
 800bc6e:	2320      	movs	r3, #32
 800bc70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc74:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc78:	2330      	movs	r3, #48	; 0x30
 800bc7a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800be24 <_svfiprintf_r+0x1ec>
 800bc7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bc82:	f04f 0901 	mov.w	r9, #1
 800bc86:	4623      	mov	r3, r4
 800bc88:	469a      	mov	sl, r3
 800bc8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc8e:	b10a      	cbz	r2, 800bc94 <_svfiprintf_r+0x5c>
 800bc90:	2a25      	cmp	r2, #37	; 0x25
 800bc92:	d1f9      	bne.n	800bc88 <_svfiprintf_r+0x50>
 800bc94:	ebba 0b04 	subs.w	fp, sl, r4
 800bc98:	d00b      	beq.n	800bcb2 <_svfiprintf_r+0x7a>
 800bc9a:	465b      	mov	r3, fp
 800bc9c:	4622      	mov	r2, r4
 800bc9e:	4629      	mov	r1, r5
 800bca0:	4638      	mov	r0, r7
 800bca2:	f7ff ff6d 	bl	800bb80 <__ssputs_r>
 800bca6:	3001      	adds	r0, #1
 800bca8:	f000 80aa 	beq.w	800be00 <_svfiprintf_r+0x1c8>
 800bcac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bcae:	445a      	add	r2, fp
 800bcb0:	9209      	str	r2, [sp, #36]	; 0x24
 800bcb2:	f89a 3000 	ldrb.w	r3, [sl]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	f000 80a2 	beq.w	800be00 <_svfiprintf_r+0x1c8>
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	f04f 32ff 	mov.w	r2, #4294967295
 800bcc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bcc6:	f10a 0a01 	add.w	sl, sl, #1
 800bcca:	9304      	str	r3, [sp, #16]
 800bccc:	9307      	str	r3, [sp, #28]
 800bcce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bcd2:	931a      	str	r3, [sp, #104]	; 0x68
 800bcd4:	4654      	mov	r4, sl
 800bcd6:	2205      	movs	r2, #5
 800bcd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcdc:	4851      	ldr	r0, [pc, #324]	; (800be24 <_svfiprintf_r+0x1ec>)
 800bcde:	f7f4 fa87 	bl	80001f0 <memchr>
 800bce2:	9a04      	ldr	r2, [sp, #16]
 800bce4:	b9d8      	cbnz	r0, 800bd1e <_svfiprintf_r+0xe6>
 800bce6:	06d0      	lsls	r0, r2, #27
 800bce8:	bf44      	itt	mi
 800bcea:	2320      	movmi	r3, #32
 800bcec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bcf0:	0711      	lsls	r1, r2, #28
 800bcf2:	bf44      	itt	mi
 800bcf4:	232b      	movmi	r3, #43	; 0x2b
 800bcf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bcfa:	f89a 3000 	ldrb.w	r3, [sl]
 800bcfe:	2b2a      	cmp	r3, #42	; 0x2a
 800bd00:	d015      	beq.n	800bd2e <_svfiprintf_r+0xf6>
 800bd02:	9a07      	ldr	r2, [sp, #28]
 800bd04:	4654      	mov	r4, sl
 800bd06:	2000      	movs	r0, #0
 800bd08:	f04f 0c0a 	mov.w	ip, #10
 800bd0c:	4621      	mov	r1, r4
 800bd0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd12:	3b30      	subs	r3, #48	; 0x30
 800bd14:	2b09      	cmp	r3, #9
 800bd16:	d94e      	bls.n	800bdb6 <_svfiprintf_r+0x17e>
 800bd18:	b1b0      	cbz	r0, 800bd48 <_svfiprintf_r+0x110>
 800bd1a:	9207      	str	r2, [sp, #28]
 800bd1c:	e014      	b.n	800bd48 <_svfiprintf_r+0x110>
 800bd1e:	eba0 0308 	sub.w	r3, r0, r8
 800bd22:	fa09 f303 	lsl.w	r3, r9, r3
 800bd26:	4313      	orrs	r3, r2
 800bd28:	9304      	str	r3, [sp, #16]
 800bd2a:	46a2      	mov	sl, r4
 800bd2c:	e7d2      	b.n	800bcd4 <_svfiprintf_r+0x9c>
 800bd2e:	9b03      	ldr	r3, [sp, #12]
 800bd30:	1d19      	adds	r1, r3, #4
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	9103      	str	r1, [sp, #12]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	bfbb      	ittet	lt
 800bd3a:	425b      	neglt	r3, r3
 800bd3c:	f042 0202 	orrlt.w	r2, r2, #2
 800bd40:	9307      	strge	r3, [sp, #28]
 800bd42:	9307      	strlt	r3, [sp, #28]
 800bd44:	bfb8      	it	lt
 800bd46:	9204      	strlt	r2, [sp, #16]
 800bd48:	7823      	ldrb	r3, [r4, #0]
 800bd4a:	2b2e      	cmp	r3, #46	; 0x2e
 800bd4c:	d10c      	bne.n	800bd68 <_svfiprintf_r+0x130>
 800bd4e:	7863      	ldrb	r3, [r4, #1]
 800bd50:	2b2a      	cmp	r3, #42	; 0x2a
 800bd52:	d135      	bne.n	800bdc0 <_svfiprintf_r+0x188>
 800bd54:	9b03      	ldr	r3, [sp, #12]
 800bd56:	1d1a      	adds	r2, r3, #4
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	9203      	str	r2, [sp, #12]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	bfb8      	it	lt
 800bd60:	f04f 33ff 	movlt.w	r3, #4294967295
 800bd64:	3402      	adds	r4, #2
 800bd66:	9305      	str	r3, [sp, #20]
 800bd68:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800be34 <_svfiprintf_r+0x1fc>
 800bd6c:	7821      	ldrb	r1, [r4, #0]
 800bd6e:	2203      	movs	r2, #3
 800bd70:	4650      	mov	r0, sl
 800bd72:	f7f4 fa3d 	bl	80001f0 <memchr>
 800bd76:	b140      	cbz	r0, 800bd8a <_svfiprintf_r+0x152>
 800bd78:	2340      	movs	r3, #64	; 0x40
 800bd7a:	eba0 000a 	sub.w	r0, r0, sl
 800bd7e:	fa03 f000 	lsl.w	r0, r3, r0
 800bd82:	9b04      	ldr	r3, [sp, #16]
 800bd84:	4303      	orrs	r3, r0
 800bd86:	3401      	adds	r4, #1
 800bd88:	9304      	str	r3, [sp, #16]
 800bd8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd8e:	4826      	ldr	r0, [pc, #152]	; (800be28 <_svfiprintf_r+0x1f0>)
 800bd90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bd94:	2206      	movs	r2, #6
 800bd96:	f7f4 fa2b 	bl	80001f0 <memchr>
 800bd9a:	2800      	cmp	r0, #0
 800bd9c:	d038      	beq.n	800be10 <_svfiprintf_r+0x1d8>
 800bd9e:	4b23      	ldr	r3, [pc, #140]	; (800be2c <_svfiprintf_r+0x1f4>)
 800bda0:	bb1b      	cbnz	r3, 800bdea <_svfiprintf_r+0x1b2>
 800bda2:	9b03      	ldr	r3, [sp, #12]
 800bda4:	3307      	adds	r3, #7
 800bda6:	f023 0307 	bic.w	r3, r3, #7
 800bdaa:	3308      	adds	r3, #8
 800bdac:	9303      	str	r3, [sp, #12]
 800bdae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdb0:	4433      	add	r3, r6
 800bdb2:	9309      	str	r3, [sp, #36]	; 0x24
 800bdb4:	e767      	b.n	800bc86 <_svfiprintf_r+0x4e>
 800bdb6:	fb0c 3202 	mla	r2, ip, r2, r3
 800bdba:	460c      	mov	r4, r1
 800bdbc:	2001      	movs	r0, #1
 800bdbe:	e7a5      	b.n	800bd0c <_svfiprintf_r+0xd4>
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	3401      	adds	r4, #1
 800bdc4:	9305      	str	r3, [sp, #20]
 800bdc6:	4619      	mov	r1, r3
 800bdc8:	f04f 0c0a 	mov.w	ip, #10
 800bdcc:	4620      	mov	r0, r4
 800bdce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bdd2:	3a30      	subs	r2, #48	; 0x30
 800bdd4:	2a09      	cmp	r2, #9
 800bdd6:	d903      	bls.n	800bde0 <_svfiprintf_r+0x1a8>
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d0c5      	beq.n	800bd68 <_svfiprintf_r+0x130>
 800bddc:	9105      	str	r1, [sp, #20]
 800bdde:	e7c3      	b.n	800bd68 <_svfiprintf_r+0x130>
 800bde0:	fb0c 2101 	mla	r1, ip, r1, r2
 800bde4:	4604      	mov	r4, r0
 800bde6:	2301      	movs	r3, #1
 800bde8:	e7f0      	b.n	800bdcc <_svfiprintf_r+0x194>
 800bdea:	ab03      	add	r3, sp, #12
 800bdec:	9300      	str	r3, [sp, #0]
 800bdee:	462a      	mov	r2, r5
 800bdf0:	4b0f      	ldr	r3, [pc, #60]	; (800be30 <_svfiprintf_r+0x1f8>)
 800bdf2:	a904      	add	r1, sp, #16
 800bdf4:	4638      	mov	r0, r7
 800bdf6:	f3af 8000 	nop.w
 800bdfa:	1c42      	adds	r2, r0, #1
 800bdfc:	4606      	mov	r6, r0
 800bdfe:	d1d6      	bne.n	800bdae <_svfiprintf_r+0x176>
 800be00:	89ab      	ldrh	r3, [r5, #12]
 800be02:	065b      	lsls	r3, r3, #25
 800be04:	f53f af2c 	bmi.w	800bc60 <_svfiprintf_r+0x28>
 800be08:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be0a:	b01d      	add	sp, #116	; 0x74
 800be0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be10:	ab03      	add	r3, sp, #12
 800be12:	9300      	str	r3, [sp, #0]
 800be14:	462a      	mov	r2, r5
 800be16:	4b06      	ldr	r3, [pc, #24]	; (800be30 <_svfiprintf_r+0x1f8>)
 800be18:	a904      	add	r1, sp, #16
 800be1a:	4638      	mov	r0, r7
 800be1c:	f000 f87a 	bl	800bf14 <_printf_i>
 800be20:	e7eb      	b.n	800bdfa <_svfiprintf_r+0x1c2>
 800be22:	bf00      	nop
 800be24:	0800c654 	.word	0x0800c654
 800be28:	0800c65e 	.word	0x0800c65e
 800be2c:	00000000 	.word	0x00000000
 800be30:	0800bb81 	.word	0x0800bb81
 800be34:	0800c65a 	.word	0x0800c65a

0800be38 <_printf_common>:
 800be38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be3c:	4616      	mov	r6, r2
 800be3e:	4699      	mov	r9, r3
 800be40:	688a      	ldr	r2, [r1, #8]
 800be42:	690b      	ldr	r3, [r1, #16]
 800be44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800be48:	4293      	cmp	r3, r2
 800be4a:	bfb8      	it	lt
 800be4c:	4613      	movlt	r3, r2
 800be4e:	6033      	str	r3, [r6, #0]
 800be50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800be54:	4607      	mov	r7, r0
 800be56:	460c      	mov	r4, r1
 800be58:	b10a      	cbz	r2, 800be5e <_printf_common+0x26>
 800be5a:	3301      	adds	r3, #1
 800be5c:	6033      	str	r3, [r6, #0]
 800be5e:	6823      	ldr	r3, [r4, #0]
 800be60:	0699      	lsls	r1, r3, #26
 800be62:	bf42      	ittt	mi
 800be64:	6833      	ldrmi	r3, [r6, #0]
 800be66:	3302      	addmi	r3, #2
 800be68:	6033      	strmi	r3, [r6, #0]
 800be6a:	6825      	ldr	r5, [r4, #0]
 800be6c:	f015 0506 	ands.w	r5, r5, #6
 800be70:	d106      	bne.n	800be80 <_printf_common+0x48>
 800be72:	f104 0a19 	add.w	sl, r4, #25
 800be76:	68e3      	ldr	r3, [r4, #12]
 800be78:	6832      	ldr	r2, [r6, #0]
 800be7a:	1a9b      	subs	r3, r3, r2
 800be7c:	42ab      	cmp	r3, r5
 800be7e:	dc26      	bgt.n	800bece <_printf_common+0x96>
 800be80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800be84:	1e13      	subs	r3, r2, #0
 800be86:	6822      	ldr	r2, [r4, #0]
 800be88:	bf18      	it	ne
 800be8a:	2301      	movne	r3, #1
 800be8c:	0692      	lsls	r2, r2, #26
 800be8e:	d42b      	bmi.n	800bee8 <_printf_common+0xb0>
 800be90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800be94:	4649      	mov	r1, r9
 800be96:	4638      	mov	r0, r7
 800be98:	47c0      	blx	r8
 800be9a:	3001      	adds	r0, #1
 800be9c:	d01e      	beq.n	800bedc <_printf_common+0xa4>
 800be9e:	6823      	ldr	r3, [r4, #0]
 800bea0:	68e5      	ldr	r5, [r4, #12]
 800bea2:	6832      	ldr	r2, [r6, #0]
 800bea4:	f003 0306 	and.w	r3, r3, #6
 800bea8:	2b04      	cmp	r3, #4
 800beaa:	bf08      	it	eq
 800beac:	1aad      	subeq	r5, r5, r2
 800beae:	68a3      	ldr	r3, [r4, #8]
 800beb0:	6922      	ldr	r2, [r4, #16]
 800beb2:	bf0c      	ite	eq
 800beb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800beb8:	2500      	movne	r5, #0
 800beba:	4293      	cmp	r3, r2
 800bebc:	bfc4      	itt	gt
 800bebe:	1a9b      	subgt	r3, r3, r2
 800bec0:	18ed      	addgt	r5, r5, r3
 800bec2:	2600      	movs	r6, #0
 800bec4:	341a      	adds	r4, #26
 800bec6:	42b5      	cmp	r5, r6
 800bec8:	d11a      	bne.n	800bf00 <_printf_common+0xc8>
 800beca:	2000      	movs	r0, #0
 800becc:	e008      	b.n	800bee0 <_printf_common+0xa8>
 800bece:	2301      	movs	r3, #1
 800bed0:	4652      	mov	r2, sl
 800bed2:	4649      	mov	r1, r9
 800bed4:	4638      	mov	r0, r7
 800bed6:	47c0      	blx	r8
 800bed8:	3001      	adds	r0, #1
 800beda:	d103      	bne.n	800bee4 <_printf_common+0xac>
 800bedc:	f04f 30ff 	mov.w	r0, #4294967295
 800bee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bee4:	3501      	adds	r5, #1
 800bee6:	e7c6      	b.n	800be76 <_printf_common+0x3e>
 800bee8:	18e1      	adds	r1, r4, r3
 800beea:	1c5a      	adds	r2, r3, #1
 800beec:	2030      	movs	r0, #48	; 0x30
 800beee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bef2:	4422      	add	r2, r4
 800bef4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bef8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800befc:	3302      	adds	r3, #2
 800befe:	e7c7      	b.n	800be90 <_printf_common+0x58>
 800bf00:	2301      	movs	r3, #1
 800bf02:	4622      	mov	r2, r4
 800bf04:	4649      	mov	r1, r9
 800bf06:	4638      	mov	r0, r7
 800bf08:	47c0      	blx	r8
 800bf0a:	3001      	adds	r0, #1
 800bf0c:	d0e6      	beq.n	800bedc <_printf_common+0xa4>
 800bf0e:	3601      	adds	r6, #1
 800bf10:	e7d9      	b.n	800bec6 <_printf_common+0x8e>
	...

0800bf14 <_printf_i>:
 800bf14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf18:	460c      	mov	r4, r1
 800bf1a:	4691      	mov	r9, r2
 800bf1c:	7e27      	ldrb	r7, [r4, #24]
 800bf1e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bf20:	2f78      	cmp	r7, #120	; 0x78
 800bf22:	4680      	mov	r8, r0
 800bf24:	469a      	mov	sl, r3
 800bf26:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bf2a:	d807      	bhi.n	800bf3c <_printf_i+0x28>
 800bf2c:	2f62      	cmp	r7, #98	; 0x62
 800bf2e:	d80a      	bhi.n	800bf46 <_printf_i+0x32>
 800bf30:	2f00      	cmp	r7, #0
 800bf32:	f000 80d8 	beq.w	800c0e6 <_printf_i+0x1d2>
 800bf36:	2f58      	cmp	r7, #88	; 0x58
 800bf38:	f000 80a3 	beq.w	800c082 <_printf_i+0x16e>
 800bf3c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bf40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bf44:	e03a      	b.n	800bfbc <_printf_i+0xa8>
 800bf46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bf4a:	2b15      	cmp	r3, #21
 800bf4c:	d8f6      	bhi.n	800bf3c <_printf_i+0x28>
 800bf4e:	a001      	add	r0, pc, #4	; (adr r0, 800bf54 <_printf_i+0x40>)
 800bf50:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800bf54:	0800bfad 	.word	0x0800bfad
 800bf58:	0800bfc1 	.word	0x0800bfc1
 800bf5c:	0800bf3d 	.word	0x0800bf3d
 800bf60:	0800bf3d 	.word	0x0800bf3d
 800bf64:	0800bf3d 	.word	0x0800bf3d
 800bf68:	0800bf3d 	.word	0x0800bf3d
 800bf6c:	0800bfc1 	.word	0x0800bfc1
 800bf70:	0800bf3d 	.word	0x0800bf3d
 800bf74:	0800bf3d 	.word	0x0800bf3d
 800bf78:	0800bf3d 	.word	0x0800bf3d
 800bf7c:	0800bf3d 	.word	0x0800bf3d
 800bf80:	0800c0cd 	.word	0x0800c0cd
 800bf84:	0800bff1 	.word	0x0800bff1
 800bf88:	0800c0af 	.word	0x0800c0af
 800bf8c:	0800bf3d 	.word	0x0800bf3d
 800bf90:	0800bf3d 	.word	0x0800bf3d
 800bf94:	0800c0ef 	.word	0x0800c0ef
 800bf98:	0800bf3d 	.word	0x0800bf3d
 800bf9c:	0800bff1 	.word	0x0800bff1
 800bfa0:	0800bf3d 	.word	0x0800bf3d
 800bfa4:	0800bf3d 	.word	0x0800bf3d
 800bfa8:	0800c0b7 	.word	0x0800c0b7
 800bfac:	680b      	ldr	r3, [r1, #0]
 800bfae:	1d1a      	adds	r2, r3, #4
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	600a      	str	r2, [r1, #0]
 800bfb4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bfb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bfbc:	2301      	movs	r3, #1
 800bfbe:	e0a3      	b.n	800c108 <_printf_i+0x1f4>
 800bfc0:	6825      	ldr	r5, [r4, #0]
 800bfc2:	6808      	ldr	r0, [r1, #0]
 800bfc4:	062e      	lsls	r6, r5, #24
 800bfc6:	f100 0304 	add.w	r3, r0, #4
 800bfca:	d50a      	bpl.n	800bfe2 <_printf_i+0xce>
 800bfcc:	6805      	ldr	r5, [r0, #0]
 800bfce:	600b      	str	r3, [r1, #0]
 800bfd0:	2d00      	cmp	r5, #0
 800bfd2:	da03      	bge.n	800bfdc <_printf_i+0xc8>
 800bfd4:	232d      	movs	r3, #45	; 0x2d
 800bfd6:	426d      	negs	r5, r5
 800bfd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bfdc:	485e      	ldr	r0, [pc, #376]	; (800c158 <_printf_i+0x244>)
 800bfde:	230a      	movs	r3, #10
 800bfe0:	e019      	b.n	800c016 <_printf_i+0x102>
 800bfe2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800bfe6:	6805      	ldr	r5, [r0, #0]
 800bfe8:	600b      	str	r3, [r1, #0]
 800bfea:	bf18      	it	ne
 800bfec:	b22d      	sxthne	r5, r5
 800bfee:	e7ef      	b.n	800bfd0 <_printf_i+0xbc>
 800bff0:	680b      	ldr	r3, [r1, #0]
 800bff2:	6825      	ldr	r5, [r4, #0]
 800bff4:	1d18      	adds	r0, r3, #4
 800bff6:	6008      	str	r0, [r1, #0]
 800bff8:	0628      	lsls	r0, r5, #24
 800bffa:	d501      	bpl.n	800c000 <_printf_i+0xec>
 800bffc:	681d      	ldr	r5, [r3, #0]
 800bffe:	e002      	b.n	800c006 <_printf_i+0xf2>
 800c000:	0669      	lsls	r1, r5, #25
 800c002:	d5fb      	bpl.n	800bffc <_printf_i+0xe8>
 800c004:	881d      	ldrh	r5, [r3, #0]
 800c006:	4854      	ldr	r0, [pc, #336]	; (800c158 <_printf_i+0x244>)
 800c008:	2f6f      	cmp	r7, #111	; 0x6f
 800c00a:	bf0c      	ite	eq
 800c00c:	2308      	moveq	r3, #8
 800c00e:	230a      	movne	r3, #10
 800c010:	2100      	movs	r1, #0
 800c012:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c016:	6866      	ldr	r6, [r4, #4]
 800c018:	60a6      	str	r6, [r4, #8]
 800c01a:	2e00      	cmp	r6, #0
 800c01c:	bfa2      	ittt	ge
 800c01e:	6821      	ldrge	r1, [r4, #0]
 800c020:	f021 0104 	bicge.w	r1, r1, #4
 800c024:	6021      	strge	r1, [r4, #0]
 800c026:	b90d      	cbnz	r5, 800c02c <_printf_i+0x118>
 800c028:	2e00      	cmp	r6, #0
 800c02a:	d04d      	beq.n	800c0c8 <_printf_i+0x1b4>
 800c02c:	4616      	mov	r6, r2
 800c02e:	fbb5 f1f3 	udiv	r1, r5, r3
 800c032:	fb03 5711 	mls	r7, r3, r1, r5
 800c036:	5dc7      	ldrb	r7, [r0, r7]
 800c038:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c03c:	462f      	mov	r7, r5
 800c03e:	42bb      	cmp	r3, r7
 800c040:	460d      	mov	r5, r1
 800c042:	d9f4      	bls.n	800c02e <_printf_i+0x11a>
 800c044:	2b08      	cmp	r3, #8
 800c046:	d10b      	bne.n	800c060 <_printf_i+0x14c>
 800c048:	6823      	ldr	r3, [r4, #0]
 800c04a:	07df      	lsls	r7, r3, #31
 800c04c:	d508      	bpl.n	800c060 <_printf_i+0x14c>
 800c04e:	6923      	ldr	r3, [r4, #16]
 800c050:	6861      	ldr	r1, [r4, #4]
 800c052:	4299      	cmp	r1, r3
 800c054:	bfde      	ittt	le
 800c056:	2330      	movle	r3, #48	; 0x30
 800c058:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c05c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c060:	1b92      	subs	r2, r2, r6
 800c062:	6122      	str	r2, [r4, #16]
 800c064:	f8cd a000 	str.w	sl, [sp]
 800c068:	464b      	mov	r3, r9
 800c06a:	aa03      	add	r2, sp, #12
 800c06c:	4621      	mov	r1, r4
 800c06e:	4640      	mov	r0, r8
 800c070:	f7ff fee2 	bl	800be38 <_printf_common>
 800c074:	3001      	adds	r0, #1
 800c076:	d14c      	bne.n	800c112 <_printf_i+0x1fe>
 800c078:	f04f 30ff 	mov.w	r0, #4294967295
 800c07c:	b004      	add	sp, #16
 800c07e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c082:	4835      	ldr	r0, [pc, #212]	; (800c158 <_printf_i+0x244>)
 800c084:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c088:	6823      	ldr	r3, [r4, #0]
 800c08a:	680e      	ldr	r6, [r1, #0]
 800c08c:	061f      	lsls	r7, r3, #24
 800c08e:	f856 5b04 	ldr.w	r5, [r6], #4
 800c092:	600e      	str	r6, [r1, #0]
 800c094:	d514      	bpl.n	800c0c0 <_printf_i+0x1ac>
 800c096:	07d9      	lsls	r1, r3, #31
 800c098:	bf44      	itt	mi
 800c09a:	f043 0320 	orrmi.w	r3, r3, #32
 800c09e:	6023      	strmi	r3, [r4, #0]
 800c0a0:	b91d      	cbnz	r5, 800c0aa <_printf_i+0x196>
 800c0a2:	6823      	ldr	r3, [r4, #0]
 800c0a4:	f023 0320 	bic.w	r3, r3, #32
 800c0a8:	6023      	str	r3, [r4, #0]
 800c0aa:	2310      	movs	r3, #16
 800c0ac:	e7b0      	b.n	800c010 <_printf_i+0xfc>
 800c0ae:	6823      	ldr	r3, [r4, #0]
 800c0b0:	f043 0320 	orr.w	r3, r3, #32
 800c0b4:	6023      	str	r3, [r4, #0]
 800c0b6:	2378      	movs	r3, #120	; 0x78
 800c0b8:	4828      	ldr	r0, [pc, #160]	; (800c15c <_printf_i+0x248>)
 800c0ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c0be:	e7e3      	b.n	800c088 <_printf_i+0x174>
 800c0c0:	065e      	lsls	r6, r3, #25
 800c0c2:	bf48      	it	mi
 800c0c4:	b2ad      	uxthmi	r5, r5
 800c0c6:	e7e6      	b.n	800c096 <_printf_i+0x182>
 800c0c8:	4616      	mov	r6, r2
 800c0ca:	e7bb      	b.n	800c044 <_printf_i+0x130>
 800c0cc:	680b      	ldr	r3, [r1, #0]
 800c0ce:	6826      	ldr	r6, [r4, #0]
 800c0d0:	6960      	ldr	r0, [r4, #20]
 800c0d2:	1d1d      	adds	r5, r3, #4
 800c0d4:	600d      	str	r5, [r1, #0]
 800c0d6:	0635      	lsls	r5, r6, #24
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	d501      	bpl.n	800c0e0 <_printf_i+0x1cc>
 800c0dc:	6018      	str	r0, [r3, #0]
 800c0de:	e002      	b.n	800c0e6 <_printf_i+0x1d2>
 800c0e0:	0671      	lsls	r1, r6, #25
 800c0e2:	d5fb      	bpl.n	800c0dc <_printf_i+0x1c8>
 800c0e4:	8018      	strh	r0, [r3, #0]
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	6123      	str	r3, [r4, #16]
 800c0ea:	4616      	mov	r6, r2
 800c0ec:	e7ba      	b.n	800c064 <_printf_i+0x150>
 800c0ee:	680b      	ldr	r3, [r1, #0]
 800c0f0:	1d1a      	adds	r2, r3, #4
 800c0f2:	600a      	str	r2, [r1, #0]
 800c0f4:	681e      	ldr	r6, [r3, #0]
 800c0f6:	6862      	ldr	r2, [r4, #4]
 800c0f8:	2100      	movs	r1, #0
 800c0fa:	4630      	mov	r0, r6
 800c0fc:	f7f4 f878 	bl	80001f0 <memchr>
 800c100:	b108      	cbz	r0, 800c106 <_printf_i+0x1f2>
 800c102:	1b80      	subs	r0, r0, r6
 800c104:	6060      	str	r0, [r4, #4]
 800c106:	6863      	ldr	r3, [r4, #4]
 800c108:	6123      	str	r3, [r4, #16]
 800c10a:	2300      	movs	r3, #0
 800c10c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c110:	e7a8      	b.n	800c064 <_printf_i+0x150>
 800c112:	6923      	ldr	r3, [r4, #16]
 800c114:	4632      	mov	r2, r6
 800c116:	4649      	mov	r1, r9
 800c118:	4640      	mov	r0, r8
 800c11a:	47d0      	blx	sl
 800c11c:	3001      	adds	r0, #1
 800c11e:	d0ab      	beq.n	800c078 <_printf_i+0x164>
 800c120:	6823      	ldr	r3, [r4, #0]
 800c122:	079b      	lsls	r3, r3, #30
 800c124:	d413      	bmi.n	800c14e <_printf_i+0x23a>
 800c126:	68e0      	ldr	r0, [r4, #12]
 800c128:	9b03      	ldr	r3, [sp, #12]
 800c12a:	4298      	cmp	r0, r3
 800c12c:	bfb8      	it	lt
 800c12e:	4618      	movlt	r0, r3
 800c130:	e7a4      	b.n	800c07c <_printf_i+0x168>
 800c132:	2301      	movs	r3, #1
 800c134:	4632      	mov	r2, r6
 800c136:	4649      	mov	r1, r9
 800c138:	4640      	mov	r0, r8
 800c13a:	47d0      	blx	sl
 800c13c:	3001      	adds	r0, #1
 800c13e:	d09b      	beq.n	800c078 <_printf_i+0x164>
 800c140:	3501      	adds	r5, #1
 800c142:	68e3      	ldr	r3, [r4, #12]
 800c144:	9903      	ldr	r1, [sp, #12]
 800c146:	1a5b      	subs	r3, r3, r1
 800c148:	42ab      	cmp	r3, r5
 800c14a:	dcf2      	bgt.n	800c132 <_printf_i+0x21e>
 800c14c:	e7eb      	b.n	800c126 <_printf_i+0x212>
 800c14e:	2500      	movs	r5, #0
 800c150:	f104 0619 	add.w	r6, r4, #25
 800c154:	e7f5      	b.n	800c142 <_printf_i+0x22e>
 800c156:	bf00      	nop
 800c158:	0800c665 	.word	0x0800c665
 800c15c:	0800c676 	.word	0x0800c676

0800c160 <__retarget_lock_acquire_recursive>:
 800c160:	4770      	bx	lr

0800c162 <__retarget_lock_release_recursive>:
 800c162:	4770      	bx	lr

0800c164 <memcpy>:
 800c164:	440a      	add	r2, r1
 800c166:	4291      	cmp	r1, r2
 800c168:	f100 33ff 	add.w	r3, r0, #4294967295
 800c16c:	d100      	bne.n	800c170 <memcpy+0xc>
 800c16e:	4770      	bx	lr
 800c170:	b510      	push	{r4, lr}
 800c172:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c176:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c17a:	4291      	cmp	r1, r2
 800c17c:	d1f9      	bne.n	800c172 <memcpy+0xe>
 800c17e:	bd10      	pop	{r4, pc}

0800c180 <memmove>:
 800c180:	4288      	cmp	r0, r1
 800c182:	b510      	push	{r4, lr}
 800c184:	eb01 0402 	add.w	r4, r1, r2
 800c188:	d902      	bls.n	800c190 <memmove+0x10>
 800c18a:	4284      	cmp	r4, r0
 800c18c:	4623      	mov	r3, r4
 800c18e:	d807      	bhi.n	800c1a0 <memmove+0x20>
 800c190:	1e43      	subs	r3, r0, #1
 800c192:	42a1      	cmp	r1, r4
 800c194:	d008      	beq.n	800c1a8 <memmove+0x28>
 800c196:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c19a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c19e:	e7f8      	b.n	800c192 <memmove+0x12>
 800c1a0:	4402      	add	r2, r0
 800c1a2:	4601      	mov	r1, r0
 800c1a4:	428a      	cmp	r2, r1
 800c1a6:	d100      	bne.n	800c1aa <memmove+0x2a>
 800c1a8:	bd10      	pop	{r4, pc}
 800c1aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c1ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c1b2:	e7f7      	b.n	800c1a4 <memmove+0x24>

0800c1b4 <_realloc_r>:
 800c1b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1b6:	4607      	mov	r7, r0
 800c1b8:	4614      	mov	r4, r2
 800c1ba:	460e      	mov	r6, r1
 800c1bc:	b921      	cbnz	r1, 800c1c8 <_realloc_r+0x14>
 800c1be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c1c2:	4611      	mov	r1, r2
 800c1c4:	f7ff bc2c 	b.w	800ba20 <_malloc_r>
 800c1c8:	b922      	cbnz	r2, 800c1d4 <_realloc_r+0x20>
 800c1ca:	f7ff fbd9 	bl	800b980 <_free_r>
 800c1ce:	4625      	mov	r5, r4
 800c1d0:	4628      	mov	r0, r5
 800c1d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1d4:	f000 f814 	bl	800c200 <_malloc_usable_size_r>
 800c1d8:	42a0      	cmp	r0, r4
 800c1da:	d20f      	bcs.n	800c1fc <_realloc_r+0x48>
 800c1dc:	4621      	mov	r1, r4
 800c1de:	4638      	mov	r0, r7
 800c1e0:	f7ff fc1e 	bl	800ba20 <_malloc_r>
 800c1e4:	4605      	mov	r5, r0
 800c1e6:	2800      	cmp	r0, #0
 800c1e8:	d0f2      	beq.n	800c1d0 <_realloc_r+0x1c>
 800c1ea:	4631      	mov	r1, r6
 800c1ec:	4622      	mov	r2, r4
 800c1ee:	f7ff ffb9 	bl	800c164 <memcpy>
 800c1f2:	4631      	mov	r1, r6
 800c1f4:	4638      	mov	r0, r7
 800c1f6:	f7ff fbc3 	bl	800b980 <_free_r>
 800c1fa:	e7e9      	b.n	800c1d0 <_realloc_r+0x1c>
 800c1fc:	4635      	mov	r5, r6
 800c1fe:	e7e7      	b.n	800c1d0 <_realloc_r+0x1c>

0800c200 <_malloc_usable_size_r>:
 800c200:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c204:	1f18      	subs	r0, r3, #4
 800c206:	2b00      	cmp	r3, #0
 800c208:	bfbc      	itt	lt
 800c20a:	580b      	ldrlt	r3, [r1, r0]
 800c20c:	18c0      	addlt	r0, r0, r3
 800c20e:	4770      	bx	lr

0800c210 <_init>:
 800c210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c212:	bf00      	nop
 800c214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c216:	bc08      	pop	{r3}
 800c218:	469e      	mov	lr, r3
 800c21a:	4770      	bx	lr

0800c21c <_fini>:
 800c21c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c21e:	bf00      	nop
 800c220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c222:	bc08      	pop	{r3}
 800c224:	469e      	mov	lr, r3
 800c226:	4770      	bx	lr
